/* tslint:disable */
/* eslint-disable */
/**
 * Vault REST API - version 2.0.12
 *
 * The Vault REST API provides access to the Vault database, offering a set of endpoints divided into two main sections: Global and Vault. The Global section includes general operations applicable across the system, while the Vault section specifically handles interactions with the Vault data. It&#x27;s designed to provide a seamless interface for users to interact with their Vaulted data.
 *
 * OpenAPI version: 3.0.1
 *
 * Contact:
 *
 * NOTE: This file is auto generated by the alova's vscode plugin.
 *
 * https://alova.js.org/devtools/vscode
 *
 * **Do not edit the file manually.**
 */
import type { Alova, AlovaMethodCreateConfig, AlovaGenerics, Method } from 'alova';
import type { $$userConfigMap, alovaInstance } from '.';
import type apiDefinitions from './apiDefinitions';

type CollapsedAlova = typeof alovaInstance;
type UserMethodConfigMap = typeof $$userConfigMap;

type Alova2MethodConfig<Responded> =
  CollapsedAlova extends Alova<
    AlovaGenerics<
      any,
      any,
      infer RequestConfig,
      infer Response,
      infer ResponseHeader,
      infer L1Cache,
      infer L2Cache,
      infer SE
    >
  >
    ? Omit<
        AlovaMethodCreateConfig<
          AlovaGenerics<Responded, any, RequestConfig, Response, ResponseHeader, L1Cache, L2Cache, SE>,
          any,
          Responded
        >,
        'params'
      >
    : never;

// Extract the return type of transform function that define in $$userConfigMap, if it not exists, use the default type.
type ExtractUserDefinedTransformed<
  DefinitionKey extends keyof typeof apiDefinitions,
  Default
> = DefinitionKey extends keyof UserMethodConfigMap
  ? UserMethodConfigMap[DefinitionKey]['transform'] extends (...args: any[]) => any
    ? Awaited<ReturnType<UserMethodConfigMap[DefinitionKey]['transform']>>
    : Default
  : Default;
type Alova2Method<
  Responded,
  DefinitionKey extends keyof typeof apiDefinitions,
  CurrentConfig extends Alova2MethodConfig<any>
> =
  CollapsedAlova extends Alova<
    AlovaGenerics<
      any,
      any,
      infer RequestConfig,
      infer Response,
      infer ResponseHeader,
      infer L1Cache,
      infer L2Cache,
      infer SE
    >
  >
    ? Method<
        AlovaGenerics<
          CurrentConfig extends undefined
            ? ExtractUserDefinedTransformed<DefinitionKey, Responded>
            : CurrentConfig['transform'] extends (...args: any[]) => any
              ? Awaited<ReturnType<CurrentConfig['transform']>>
              : ExtractUserDefinedTransformed<DefinitionKey, Responded>,
          any,
          RequestConfig,
          Response,
          ResponseHeader,
          L1Cache,
          L2Cache,
          SE
        >
      >
    : never;

export type IndexingStatus = 'IndexingComplete' | 'IndexingProperties' | 'IndexingContent' | 'NA';
export type CursorBasedPagination = {
  /**
   * Limit requested for the current search
   */
  limit?: number;
  /**
   * Number of total hits. If this value is larger than the objects returned, then multiple searches will have to be performed to get the complete result set.
   */
  totalResults?: number;
  /**
   * Indexing Status
   * ---
   * The status of the indexing engine.
   */
  indexingStatus?: IndexingStatus;
  /**
   * Used to continue a search if the results are too large for a single call. Url has bookmark string embedded for subsequent calls on that search
   */
  nextUrl?: string;
};
export type AuthTypeEnum = 'ActiveDirectory' | 'Vault' | 'Autodesk';
export type Url = string;
export type Group = {
  /**
   * The identifier for the object.
   */
  id?: string;
  /**
   * The unique name of the Group.
   */
  name?: string;
  systemName?: string;
  /**
   * AuthType Enum
   * ---
   * The authentication type.
   *
   *   ActiveDirectory,
   *   Vault,
   *   Autodesk
   */
  authTypes?: AuthTypeEnum;
  /**
   * The date the Group was created.
   */
  createDate?: string;
  /**
   * The email address (distribution list) for the Group.
   */
  emailDL?: string;
  /**
   * Is the group active
   */
  isActive?: boolean;
  /**
   * The relative URL to access this object.
   */
  url?: Url;
};
export type GroupCollection = {
  /**
   * Cursor-based pagination
   * ---
   */
  pagination?: CursorBasedPagination;
  results?: Group[];
};
export type GroupExtended = object;
export type Account = {
  id?: string;
  /**
   * The name of the account for signin purposes.
   */
  accountName?: string;
  /**
   * The email associated with the account.
   */
  accountEmail?: string;
  /**
   * Is the account active (enabled).
   */
  isActive?: boolean;
  /**
   * The relative URL to access this object.
   */
  url?: Url;
};
export type ProfileAttributeDefinition = {
  /**
   * The profile attribute id.
   */
  id?: string;
  /**
   * Name of the profile attribute (must be unique).
   */
  attributeName?: string;
  systemName?: string;
  /**
   * Active Directory field the attribute is mapped from (null if not mapped).
   */
  activeDirectoryMapping?: string;
  /**
   * The association type
   */
  association?: 'None' | 'User' | 'Group' | 'All';
  /**
   * The relative URL to access this object.
   */
  url?: Url;
};
export type ProfileAttributeDefinitionCollection = {
  /**
   * Cursor-based pagination
   * ---
   */
  pagination?: CursorBasedPagination;
  /**
   * Profile Attribute Definition
   * ---
   */
  results?: ProfileAttributeDefinition;
};
export type Role = {
  /**
   * A unique identifier of the role.
   */
  id?: string;
  /**
   * The name of the role.
   */
  roleName?: string;
  /**
   * The system name of the Role.
   */
  systemName?: string;
  /**
   * Friendly description of the role's purpose
   */
  description?: string;
  /**
   * The relative URL to access this object.
   */
  url?: Url;
};
export type RoleCollection = {
  /**
   * Cursor-based pagination
   * ---
   */
  pagination?: CursorBasedPagination;
  results?: Role[];
};
export type Vault = {
  /**
   * The name of the Knowledge Vault. This is also the name of the database.
   */
  name?: string;
  /**
   * A unique identifier for the Knowledge Vault.
   */
  id?: string;
  /**
   * The relative URL to access this object.
   */
  url?: Url;
};
export type User = {
  /**
   * A unique number that the Vault uses to reference the user.
   */
  id?: string;
  /**
   * The login name of the user.
   */
  name?: string;
  /**
   * The email address of the user.
   */
  email?: string;
  /**
   * AuthType Enum
   * ---
   * The authentication type.
   *
   *   ActiveDirectory,
   *   Vault,
   *   Autodesk
   */
  authTypes?: AuthTypeEnum;
  systemName?: string;
  /**
   * The date that the user was created.
   */
  createDate?: string;
  /**
   * Is the user active
   */
  isActive?: string;
  /**
   * The relative URL to access this object.
   */
  url?: Url;
};
export type Session = {
  id?: string;
  /**
   * The access token
   * [required]
   */
  accessToken: string;
  /**
   * Vault
   * ---
   */
  vaultInformation?: Vault;
  /**
   * User
   * ---
   */
  userInformation?: User;
};
export type VaultOption = {
  id?: string;
  /**
   * The name of the option
   */
  name?: string;
  /**
   * The value of the option
   */
  value?: string;
  /**
   * The relative URL to access this object.
   */
  url?: Url;
};
export type VaultOptionCollection = {
  /**
   * Cursor-based pagination
   * ---
   */
  pagination?: CursorBasedPagination;
  results?: VaultOption[];
};
export type UserCollection = {
  /**
   * Cursor-based pagination
   * ---
   */
  pagination?: CursorBasedPagination;
  results?: User[];
};
export type UserExtended = object;
export type AccountCollection = {
  /**
   * Cursor-based pagination
   * ---
   */
  pagination?: CursorBasedPagination;
  results?: Account[];
};
export type VaultCollection = {
  /**
   * Cursor-based pagination
   * ---
   */
  pagination?: CursorBasedPagination;
  results?: Vault[];
};
export type ChangeOrderExtended = object;
export type PropertyDefinition = {
  /**
   * Get the unique identifier for a server-based property definition
   * [required]
   */
  id: string;
  /**
   * The relative URL to access this object.
   */
  url?: Url;
  /**
   * Get or sets the Display name for this Property Definition
   * [required]
   */
  displayName: string;
  /**
   * Get the System Name for this Property Definition.
   * [required]
   */
  systemName: string;
  /**
   * The value defined in SQL database.
   * [required]
   */
  dataType: 'String' | 'Numeric' | 'Bool' | 'DateTime' | 'Image';
  /**
   * Get or sets whether this Property Definition is Active.
   */
  active?: boolean;
  /**
   * Get whether or not this is a System Property (as opposed to a UserDefined property)
   */
  isSystem?: boolean;
  /**
   * Default Value that will be applied to entities that do not have an existing value associated with this PropertyDefinition
   */
  initialValue?: string;
};
export type Property = {
  /**
   * Unique identifier for a server-based property definition
   */
  propertyDefinitionId?: string;
  /**
   * Property Definition
   * ---
   */
  definition?: PropertyDefinition;
  /**
   * The property value associated with the entity and PropertyDefinition
   */
  value?: string;
};
export type ChangeOrder = {
  /**
   * Master Id of this Change Order. The Master Id uniquely identifies this Change Order object
   */
  id?: string;
  /**
   * The relative URL to access this object.
   */
  url?: Url;
  /**
   * The descriptive name for this Change Order.The Change Order Number will be used here.
   */
  name?: string;
  /**
   * The date and time the Change Order was created
   */
  createDate?: string;
  /**
   * The Change Order number. Numbers are generated based on the Numbering Scheme.
   */
  number?: string;
  /**
   * The title of the Change Order
   */
  title?: string;
  /**
   * The description of the Change Order.
   */
  description?: string;
  /**
   * The date and time when the Change Order needs to be approved by.
   */
  approveDeadline?: string;
  /**
   * The last time that the Change Order was modified.
   */
  lastModifiedDate?: string;
  lastModifiedUserId?: string;
  closeDate?: string;
  /**
   * the last time that the Change Order was modified.
   */
  lastTouchedDate?: string;
  entityType?: string;
  /**
   * Number of File Attachments
   */
  numberOfAttachments?: number;
  properties?: Property[];
  /**
   * Get the name of the Change Order State.
   */
  state?: string;
  /**
   * The color of the state.
   */
  stateColor?: number;
  /**
   * Get if the Change Order is currently locked.
   */
  isReadOnly?: boolean;
};
export type ChangeOrderCollection = {
  /**
   * Cursor-based pagination
   * ---
   */
  pagination?: CursorBasedPagination;
  results?: (ChangeOrderExtended | ChangeOrder)[];
  included?: {
    propertyDefinition?: Record<string, PropertyDefinition>;
  };
};
export type FileVersionExtended = object;
export type FileClassificationEnum =
  | 'None'
  | 'DesignVisualization'
  | 'DesignDocument'
  | 'ConfigurationMember'
  | 'ConfigurationFactory'
  | 'ElectricalProject'
  | 'DesignSubstitute'
  | 'DesignRepresentation'
  | 'DesignPresentation';
export type VersionTypeEnum = 'None' | 'Latest' | 'LatestReleased';
export type FileObject = {
  /**
   * File MasterId
   * [required]
   */
  id: string;
  /**
   * The relative URL to access this object.
   * [required]
   */
  url: Url;
  /**
   * Version Type Enum
   * ---
   */
  versionType?: VersionTypeEnum;
  /**
   * File Version Extended
   * ---
   * file version extended object
   */
  fileVersion?: FileVersionExtended;
};
export type Folder = {
  /**
   * Get the unique identifier for this folder
   */
  id?: string;
  /**
   * The relative URL to access this object.
   */
  url?: Url;
  /**
   * Get the descriptive name for this Folder. This is always the Folder Name without the full path.
   */
  name?: string;
  /**
   * Get the full vault path for this folder (ie. $/Folder1)
   */
  fullName?: string;
  /**
   * Get the date and time that the folder was created.
   */
  createDate?: string;
  /**
   * Get the name of the user who created this folder.
   */
  createUserName?: string;
  /**
   * Get the category that is assigned to this folder
   */
  category?: string;
  /**
   * Category color
   */
  categoryColor?: number;
  /**
   * The name of the life cycle state for the current folder
   */
  state?: string;
  /**
   * The color of the state.
   */
  stateColor?: number;
  /**
   * Get the number of immediate child folders.
   */
  subfolderCount?: number;
  children?: string;
  /**
   * Get whether or not this folder is a library folder
   */
  isLibrary?: boolean;
  /**
   * Get whether this folder can be modified by the logged in user.
   */
  isReadOnly?: boolean;
  /**
   * Get if this folder is cloaked. A cloaked object is one that the caller does not have permissions to view.
   */
  isCloaked?: boolean;
  properties?: Property[];
};
export type FileVisualizationAttachmentStatusEnum =
  | 'None'
  | 'Syncronized'
  | 'NotSyncronized'
  | 'UserVerified'
  | 'Legacy';
export type FileVersion = {
  /**
   * File IterationId
   * [required]
   */
  id: string;
  /**
   * The name of the file. This value applies to all versions of the file
   * [required]
   */
  name: string;
  /**
   * Category information about this file
   */
  category?: string;
  /**
   * Category color
   */
  categoryColor?: number;
  /**
   * File Classification Enum
   * ---
   * The classification of the file.
   *
   *   None,
   *   DesignVisualization,
   *   DesignDocument,
   *   ConfigurationMember,
   *   ConfigurationFactory,
   *   ElectricalProject,
   *   DesignSubstitute,
   *   DesignRepresentation,
   *   DesignPresentation
   */
  classification?: FileClassificationEnum;
  entityType?: string;
  /**
   * The version of the file. A file that has just been added to the Vault, will have 1 as its VerNum
   */
  version?: number;
  /**
   * Tells the date and time that this version of the file was created in the Vault. For the first version of a file, this date will match CkInDate. For later versions, this value will have the time when the previous version was checked out.
   */
  createDate?: string;
  /**
   * The last modified date of the file. This value is set by the client that uploaded the file.
   */
  lastModifiedDate?: string;
  /**
   * Revision information about this file.
   */
  revision?: string;
  /**
   * The name of the life cycle state for the current file
   */
  state?: string;
  /**
   * The color of the state.
   */
  stateColor?: number;
  /**
   * FolderId of the parent the current file  resides in
   */
  parentFolderId?: string;
  /**
   * File - we cannot directly use File as class name, as it's occupied.
   * ---
   */
  file?: FileObject;
  /**
   * Folder
   * ---
   * folder object
   */
  parent?: Folder;
  /**
   * If true, then the latest version of this file is in the checked-out state
   */
  isCheckedOut?: boolean;
  /**
   * The Name of the user who checked-in or uploaded this file.
   */
  createUserName?: string;
  /**
   * The date and time that the file was checked in. This property is only valid if isCheckedOut is false.
   */
  checkinDate?: string;
  /**
   * The date and time that the file was last checked out
   */
  checkoutDate?: string;
  /**
   * User that has the file checked out
   */
  checkoutUserName?: string;
  /**
   * The size, in bytes, of the file. This property is only valid if CheckedOut is false.
   */
  size?: number;
  /**
   * The relative URL to access this object.
   */
  url?: Url;
  /**
   * Flag to determine if valid VizAttachmentStatus (Not None)
   */
  hasVisualizationAttachment?: boolean;
  /**
   * File Visualization Attachment Status Enum
   * ---
   * The design visualization attachment status of the file.
   *
   *   None,
   *   Syncronized,
   *   NotSyncronized,
   *   UserVerified,
   *   Legacy
   */
  visualizationAttachmentStatus?: FileVisualizationAttachmentStatusEnum;
  isReadOnly?: boolean;
  /**
   * Get if this file is cloaked. A cloaked object is one that the caller does not have permissions to view
   */
  isCloaked?: boolean;
  /**
   * Gets whether or not the file is on the local site (in a multi-site environment). This value will always be true on a single-site environment.
   */
  isOnSite?: boolean;
  properties?: Property[];
};
export type FileVersionCollection = {
  /**
   * Cursor-based pagination
   * ---
   */
  pagination?: CursorBasedPagination;
  results?: (FileVersionExtended | FileVersion)[];
  included?: {
    folder?: Record<string, Folder>;
    propertyDefinition?: Record<string, PropertyDefinition>;
  };
};
export type EntityCollection = {
  /**
   * Cursor-based pagination
   * ---
   */
  pagination?: CursorBasedPagination;
  results?: unknown[];
  included?: {
    folder?: Record<string, Folder>;
    propertyDefinition?: Record<string, PropertyDefinition>;
  };
};
export type ECOComment2 = {
  id?: string;
  /**
   * The relative URL to access this object.
   */
  url?: Url;
  subject?: string;
  message?: string;
  createDate?: string;
  createUserName?: string;
  state?: string;
  numberOfAttachments?: number;
  replies?: ECOComment[];
  /**
   * ECO Comment
   * ---
   * Change Order Comment object
   */
  parent?: ECOComment;
};
export type ECOComment = {
  id?: string;
  /**
   * The relative URL to access this object.
   */
  url?: Url;
  subject?: string;
  message?: string;
  createDate?: string;
  createUserName?: string;
  state?: string;
  numberOfAttachments?: number;
  replies?: ECOComment2[];
  /**
   * ECO Comment2
   * ---
   * Change Order Comment object duplicate(ECOComment) to allow them to reference to each other
   */
  parent?: ECOComment2;
};
export type ECOCommentCollection = {
  /**
   * Cursor-based pagination
   * ---
   */
  pagination?: CursorBasedPagination;
  results?: ECOComment[];
};
export type Item = {
  /**
   * MasterId of the item
   * [required]
   */
  id: string;
  /**
   * The relative URL to access this object.
   * [required]
   */
  url: Url;
  /**
   * Version Type Enum
   * ---
   */
  versionType?: VersionTypeEnum;
  /**
   * Item Version
   * ---
   * The unique identifier for the object.
   */
  itemVersion?: ItemVersion;
};
export type ItemVersion = {
  /**
   * Item Iteration Id
   */
  id?: string;
  /**
   * The relative URL to access this object.
   */
  url?: Url;
  /**
   * The Item number.
   */
  number?: string;
  /**
   * The version number, which is a sequential number given to each version. For example, if this value is 5, then the object is the 5th version.
   */
  version?: number;
  /**
   * The display value for the revision.
   */
  revision?: string;
  comment?: string;
  /**
   * The display title.
   */
  title?: string;
  /**
   * Life cycle state of the item
   */
  state?: string;
  stateColor?: number;
  name?: string;
  /**
   * Category assigned to the item
   */
  category?: string;
  categoryColor?: number;
  entityType?: string;
  isReadOnly?: boolean;
  /**
   * If true, the logged-in user is restricted from seeing this item.
   */
  isCloaked?: boolean;
  /**
   * Flag to check if an latest Item's  version is obsolete
   */
  isLatestObsolete?: boolean;
  /**
   * Item
   * ---
   */
  item?: Item;
  properties?: Property[];
};
export type ItemVersionCollection = {
  /**
   * Cursor-based pagination
   * ---
   */
  pagination?: CursorBasedPagination;
  results?: ItemVersion[];
  included?: {
    propertyDefinition?: Record<string, PropertyDefinition>;
  };
};
export type Markup = {
  id?: string;
  parentId?: string;
  /**
   * User
   * ---
   */
  createdByUser?: User;
  createDateTime?: string;
  /**
   * User
   * ---
   */
  updatedByUser?: User;
  updateDateTime?: string;
  data?: string;
  thumbnail?: string;
  /**
   * The relative URL to access this object.
   */
  url?: Url;
};
export type MarkupCollection = {
  results?: Markup[];
  /**
   * Cursor-based pagination
   * ---
   */
  pagination?: CursorBasedPagination;
};
export type FileAssociationTypeEnum = 'Dependency' | 'Attachment';
export type FileAssociation = {
  /**
   * File Version Extended
   * ---
   * file version extended object
   */
  parentFile?: FileVersionExtended;
  /**
   * File Version Extended
   * ---
   * file version extended object
   */
  childFile?: FileVersionExtended;
  /**
   * File Association Type Enum
   * ---
   * File association options.
   */
  fileAssocType?: FileAssociationTypeEnum;
};
export type FileAssocCollection = {
  /**
   * Cursor-based pagination
   * ---
   */
  pagination?: CursorBasedPagination;
  results?: FileAssociation[];
  included?: {
    folder?: Record<string, Folder>;
    propertyDefinition?: Record<string, PropertyDefinition>;
  };
};
export type HistoryOptionsEnum = 'All' | 'ReleasedOnly' | 'ReleasedAndRevisionTip' | 'RevisionTip';
export type RevisionOptionsEnum = 'AllRevision' | 'CurrentRevision';
export type FolderExtended = object;
export type FolderCollection = {
  /**
   * Cursor-based pagination
   * ---
   */
  pagination?: CursorBasedPagination;
  results?: (Folder | FolderExtended)[];
  included?: {
    folder?: Record<string, Folder>;
    propertyDefinition?: Record<string, PropertyDefinition>;
  };
};
export type ItemAssociationTypeEnum =
  | 'Primary'
  | 'Secondary'
  | 'Tertiary'
  | 'StandardComponent'
  | 'PrimarySub'
  | 'SecondarySub'
  | 'PinnedAttachment'
  | 'NotPinnedAttachment';
export type ItemAssociatedFileVersion = {
  /**
   * Item Association Type Enum
   * ---
   * Item File Link Types
   */
  itemAssociationType?: ItemAssociationTypeEnum;
  /**
   * File Version Extended
   * ---
   * file version extended object
   */
  file?: FileVersionExtended;
};
export type ItemAssociatedFileVersionCollection = {
  /**
   * Cursor-based pagination
   * ---
   */
  pagination?: CursorBasedPagination;
  results?: ItemAssociatedFileVersion[];
  included?: {
    folder?: Record<string, Folder>;
    propertyDefinition?: Record<string, PropertyDefinition>;
  };
};
export type BOMTypeEnum = 'Latest' | 'Historic';
export type ItemBomLink = {
  /**
   * Id of the BOM Component (only valid when BOM row is a component - not assigned an item)
   */
  bomComponentId?: string;
  /**
   * Indicates if this BOM association is a grouped row of multiple BOM rows
   */
  groupedRow?: boolean;
  /**
   * Id of the Multiple Row grouping
   */
  groupId?: string;
  /**
   * The unit size for this BOM row
   */
  unitSize?: string;
  /**
   * Instance Count of this BOM association
   */
  instCount?: string;
  /**
   * Indicates if this BOM row is created and maintained by CAD data or is a manual BOM row
   */
  cad?: boolean;
  /**
   * Indicates if this BOM row is included or excluded from the BOM
   */
  included?: boolean;
  /**
   * The reference designator ID. This value will be 0 if reference designators are not available.
   */
  refDesId?: string;
  /**
   * If true, the child Item has children of its own. If false, the child is a leaf.
   */
  childHasChildren?: boolean;
  /**
   * Item association's master Id (does not change between iterations)
   */
  bomLinkMasterId?: string;
  /**
   * The order that the child entry shows up in the BOM.
   */
  bomOrder?: string;
  /**
   * The display name for the Unit of Measure on CldItemUsage.
   */
  units?: string;
  /**
   * BOM row quantity
   */
  quantity?: string;
  /**
   * The ID of the child Item.
   */
  childItemId?: string;
  /**
   * The ID of the parent Item.
   */
  parentItemId?: string;
  /**
   * The ID for the object.
   */
  id?: string;
  parentMasterChildMasterAndRefDesMaster?: string;
  childMasterAndRefDesMaster?: string;
  /**
   * If true, the dependency is static. If false, the dependency is computed.
   */
  isStatic?: boolean;
  /**
   * Assigned BOM row position number
   */
  positionNumber?: string;
  properties?: Property[];
};
export type ItemBomOccurrence = {
  /**
   * The top most Item of the BOM.
   */
  rootItemId?: string;
  /**
   * A unique identifier for this occurrence within the Item BOM.
   */
  id?: string;
  /**
   * The immediate parent. -1 means no parent occurrence.
   */
  parentOccurrenceId?: string;
  bomLinkMasterId?: string;
  /**
   * The position on the BOM.
   */
  position?: string;
  /**
   * The value of the occurrence. Also known as the 'Detail Id.'
   */
  detailId?: string;
  /**
   * The path to the occurrence in the BOM. The format is the list of Item Master IDs separated by the '/' delimiter.
   */
  path?: string;
};
export type BOMStructureEnum = 'Normal' | 'Purchased' | 'Inseperable' | 'Phantom' | 'Reference' | 'DynamicPhantom';
export type ComponentTypeEnum = 'Part' | 'Assembly' | 'Virtual' | 'Standard' | 'Purchased' | 'Document';
export type XRefTypeEnum = 'Internal' | 'External';
export type BOMComponent = {
  /**
   * Indicates if a BOM component is cloaked
   */
  isCloaked?: boolean;
  /**
   * BOM Structure Enum
   * ---
   * An enumerated value representing the BOMStructure value of Component.
   *
   *   Normal = 0,
   *   Purchased = 1,
   *   Inseperable = 2,
   *   Phantom = 3,
   *   Reference = 4,
   *   DynamicPhantom = 5
   */
  bOMStructure?: BOMStructureEnum;
  /**
   * A numeric value quantifying a single instance of the Component. For Components with discreet quantities, "1" should always be used. For measured quantities, a positive decimal value can be used. For example, a rod cut to 3.5 feet would have a BaseUOM of "foot" and a BaseQty of "3.5".
   */
  baseQty?: string;
  /**
   * The Unit of Measure the Component is quantified with. For discreet quantities, "Each" should be used. For measured quantities, a length (inch, cm, foot, etc.) volume (ounce, ml, liter, quart, etc.) or mass (gram, pound, kg, etc.) unit of measure should be used.
   */
  baseUOM?: string;
  /**
   * Component Type Enum
   * ---
   * An enumerated value specifying the type of component.  Enum of Component Type
   *
   *   Part = 1,
   *   Assembly = 2,
   *   Virtual = 3,
   *   Standard = 4,
   *   Purchased = 5,
   *   Document = 6
   */
  componentType?: ComponentTypeEnum;
  /**
   * The name of this component.
   */
  name?: string;
  /**
   * XRef Type Enum
   * ---
   * An enumerated value that specifies whether the Component is internal or external in relation to the design file.
   * Enum of XRefType
   *
   *   Internal = 0,
   *   External = 1
   */
  xRefType?: XRefTypeEnum;
  /**
   * Unique data within the scope of the design file used to identify the Component. For Inventor files, the GUID used to identify the Component is used (or GUID plus VirtualComponentDefinition._PropertySetsId for Virtual components). For DWG files, the HandleID associated with the Component is used.
   */
  uniqueId?: string;
  id?: string;
  /**
   * For Components with a XRefType of "external", XRefID represents the FileID of the design file associated with that component. For "internal" Components, XRefID should be set to -1.
   */
  xRefId?: string;
};
export type BOMLinksAndRevisions = {
  /**
   * An array of Items.
   */
  itemVersions?: ItemVersion[];
  /**
   * The associations between the Items.
   */
  itemBomLinks?: ItemBomLink[];
  /**
   * If true, reference designators are available.
   */
  referenceDesignatorsAvailable?: boolean;
  /**
   * An array of occurrences.
   */
  occurrences?: ItemBomOccurrence[];
  /**
   * Array of BOM components in this BOM
   */
  bOMComponents?: BOMComponent[];
};
export type ItemCollection = {
  /**
   * Cursor-based pagination
   * ---
   */
  pagination?: CursorBasedPagination;
  /**
   * Item
   * ---
   */
  results?: Item;
  included?: {
    propertyDefinition?: Record<string, PropertyDefinition>;
  };
};
export type Job = {
  /**
   * A unique identifier for the job.
   */
  id?: string;
  /**
   * The job type.
   */
  jobType?: string;
  /**
   * The priority of the job. A lower number means a higher priority. 1 is the lowest possible number.
   */
  priority?: number;
  /**
   * A description of the job.
   */
  description?: string;
  /**
   * The relative URL to access this object.
   */
  url?: Url;
  /**
   * An array of parameters which provide meta-data about the job.
   */
  params?: Record<string, string>;
  /**
   * The status of the job.
   */
  status?: 'Ready' | 'Running' | 'Success' | 'Failure';
  /**
   * In a multi-site environment, this property tells if the file is on the local site.
   */
  isOnSite?: string;
};
export type Entity = {
  /**
   * A unique identifier for the object
   * [required]
   */
  id: string;
  /**
   * Name of the entity
   * [required]
   */
  name: string;
  /**
   * The full vault path if Entity is a folder
   */
  fullName?: string;
  number?: string;
  /**
   * Category information  about this entity
   */
  category?: string;
  /**
   * Category color
   */
  categoryColor?: number;
  entityType?: string;
  /**
   * Version number if entity is an Iteration object
   */
  version?: number;
  /**
   * Tells the date and time that this version of the entity was created in the Vault.
   */
  createDate?: string;
  lastModifiedDate?: string;
  /**
   * Revision information about this entity.
   */
  revision?: string;
  /**
   * The name of the life cycle state for the entity
   */
  state?: string;
  /**
   * The color of the state.
   */
  stateColor?: number;
  parentFolderId?: string;
  /**
   * Folder
   * ---
   * folder object
   */
  parent?: Folder;
  isCheckedOut?: boolean;
  createUserName?: string;
  checkinDate?: string;
  checkoutDate?: string;
  size?: number;
  /**
   * The relative URL to access this object.
   */
  url?: Url;
  hasVisualizationAttachment?: boolean;
  checkoutUserName?: string;
  isLibrary?: boolean;
  isReadOnly?: boolean;
  isCloaked?: boolean;
  /**
   * File - we cannot directly use File as class name, as it's occupied.
   * ---
   */
  file?: FileObject;
  /**
   * Item
   * ---
   */
  item?: Item;
  subfolderCount?: number;
  children?: string;
  properties?: Property[];
};
export type LinkEntity = {
  name?: string;
  /**
   * Get the unique identifier for this link object
   */
  id?: string;
  createDate?: string;
  createUserName?: string;
  entityType?: string;
  /**
   * The relative URL to access this object.
   */
  url?: Url;
  /**
   * Entity
   * ---
   * A generic entity object with all supported fields.
   */
  toEntity?: Entity;
  /**
   * Folder
   * ---
   * folder object
   */
  fromEntity?: Folder;
};
export type LinkCollection = {
  /**
   * Cursor-based pagination
   * ---
   */
  pagination?: CursorBasedPagination;
  results?: LinkEntity[];
  included?: {
    folder?: Record<string, Folder>;
    propertyDefinition?: Record<string, PropertyDefinition>;
  };
};
export type PropertyDefinitionExtended = object;
export type PropertyDefinitionCollection = {
  /**
   * Cursor-based pagination
   * ---
   */
  pagination?: CursorBasedPagination;
  results?: (PropertyDefinition | PropertyDefinitionExtended)[];
};
export type SearchCriteria = {
  /**
   * URL string to the property definition
   */
  propertyDefinitionUrl?: string;
  /**
   * Represents the operator used for the search
   * [required]
   */
  operator:
    | 'Unknown'
    | 'Contains'
    | 'DoesNotContain'
    | 'IsExactly'
    | 'IsEmpty'
    | 'IsNotEmpty'
    | 'GreaterThan'
    | 'GreaterThanOrEqualTo'
    | 'LessThan'
    | 'LessThanOrEqualTo'
    | 'NotEqualTo';
  /**
   * The value to use for the search
   */
  searchString?: string;
};
export type SortCriteria = {
  /**
   * URL string to the property definition
   */
  propertyDefinitionUrl?: string;
  /**
   * If true, the sort is ascending. If false, the sort is descending.
   */
  ascending?: boolean;
};
declare global {
  interface Apis {
    global: {
      /**
       * ---
       *
       * [GET] Get the complete specification of all APIs
       *
       * **path:** /openapi-spec.yml
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      getApiSpec<Config extends Alova2MethodConfig<unknown>>(
        config?: Config
      ): Alova2Method<unknown, 'global.getApiSpec', Config>;
      /**
       * ---
       *
       * [GET] Get server information
       *
       * **path:** /server-info
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // The internal product name. For backward compatibility, this value contains the original product name, which may not be the same as the current product name.
       *   name?: string
       *   // The product version currently installed. ex:30.0.91.0
       *   productVersion?: string
       * }
       * ```
       */
      getServerInfo<
        Config extends Alova2MethodConfig<{
          /**
           * The internal product name. For backward compatibility, this value contains the original product name, which may not be the same as the current product name.
           */
          name?: string;
          /**
           * The product version currently installed. ex:30.0.91.0
           */
          productVersion?: string;
        }>
      >(
        config?: Config
      ): Alova2Method<
        {
          /**
           * The internal product name. For backward compatibility, this value contains the original product name, which may not be the same as the current product name.
           */
          name?: string;
          /**
           * The product version currently installed. ex:30.0.91.0
           */
          productVersion?: string;
        },
        'global.getServerInfo',
        Config
      >;
      /**
       * ---
       *
       * [GET] Get all groups
       *
       * **path:** /groups
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
       *   //  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
       *   limit?: number
       *   // Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
       *   cursorState?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [title] Cursor-based pagination
       *   pagination?: {
       *     // Limit requested for the current search
       *     limit?: number
       *     // Number of total hits. If this value is larger than the objects returned, then multiple searches will have to be performed to get the complete result set.
       *     totalResults?: number
       *     // [title] Indexing Status
       *     // The status of the indexing engine.
       *     indexingStatus?: 'IndexingComplete' | 'IndexingProperties' | 'IndexingContent' | 'NA'
       *     // Used to continue a search if the results are too large for a single call. Url has bookmark string embedded for subsequent calls on that search
       *     nextUrl?: string
       *   }
       *   results?: Array<{
       *     // The identifier for the object.
       *     id?: string
       *     // The unique name of the Group.
       *     name?: string
       *     systemName?: string
       *     // [title] AuthType Enum
       *     // The authentication type.
       *     //
       *     //   ActiveDirectory,
       *     //   Vault,
       *     //   Autodesk
       *     authTypes?: 'ActiveDirectory' | 'Vault' | 'Autodesk'
       *     // The date the Group was created.
       *     createDate?: string
       *     // The email address (distribution list) for the Group.
       *     emailDL?: string
       *     // Is the group active
       *     isActive?: boolean
       *     // The relative URL to access this object.
       *     url?: string
       *   }>
       * }
       * ```
       */
      getGroups<
        Config extends Alova2MethodConfig<GroupCollection> & {
          params: {
            /**
             * Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
             *  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
             */
            limit?: number;
            /**
             * Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
             */
            cursorState?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<GroupCollection, 'global.getGroups', Config>;
      /**
       * ---
       *
       * [GET] Get group by its ID.
       *
       * **path:** /groups/{id}
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = object
       * ```
       */
      getGroupById<Config extends Alova2MethodConfig<GroupExtended>>(
        config?: Config
      ): Alova2Method<GroupExtended, 'global.getGroupById', Config>;
      /**
       * ---
       *
       * [GET] Get group account information by specific type
       *
       * **path:** /groups/{id}/accounts/{authType}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       *   // [required]
       *   authType: 'ActiveDirectory' | 'Vault' | 'Autodesk'
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   id?: string
       *   // The name of the account for signin purposes.
       *   accountName?: string
       *   // The email associated with the account.
       *   accountEmail?: string
       *   // Is the account active (enabled).
       *   isActive?: boolean
       *   // The relative URL to access this object.
       *   url?: string
       * }
       * ```
       */
      getAccountByAuthType<
        Config extends Alova2MethodConfig<Account> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
            /**
             * [required]
             */
            authType: 'ActiveDirectory' | 'Vault' | 'Autodesk';
          };
        }
      >(
        config: Config
      ): Alova2Method<Account, 'global.getAccountByAuthType', Config>;
      /**
       * ---
       *
       * [GET] Get all profile attribute definitions
       *
       * **path:** /profile-attribute-definitions
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // Types the profile attribute definition is associated with. Allowed values: User, Group or All
       *   'filter[association]'?: string
       *   // Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
       *   //  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
       *   limit?: number
       *   // Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
       *   cursorState?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [title] Cursor-based pagination
       *   pagination?: {
       *     // Limit requested for the current search
       *     limit?: number
       *     // Number of total hits. If this value is larger than the objects returned, then multiple searches will have to be performed to get the complete result set.
       *     totalResults?: number
       *     // [title] Indexing Status
       *     // The status of the indexing engine.
       *     indexingStatus?: 'IndexingComplete' | 'IndexingProperties' | 'IndexingContent' | 'NA'
       *     // Used to continue a search if the results are too large for a single call. Url has bookmark string embedded for subsequent calls on that search
       *     nextUrl?: string
       *   }
       *   // [title] Profile Attribute Definition
       *   results?: {
       *     // The profile attribute id.
       *     id?: string
       *     // Name of the profile attribute (must be unique).
       *     attributeName?: string
       *     systemName?: string
       *     // Active Directory field the attribute is mapped from (null if not mapped).
       *     activeDirectoryMapping?: string
       *     // The association type
       *     association?: 'None' | 'User' | 'Group' | 'All'
       *     // The relative URL to access this object.
       *     url?: string
       *   }
       * }
       * ```
       */
      getProfileAttributeDefinitions<
        Config extends Alova2MethodConfig<ProfileAttributeDefinitionCollection> & {
          params: {
            /**
             * Types the profile attribute definition is associated with. Allowed values: User, Group or All
             */
            'filter[association]'?: string;
            /**
             * Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
             *  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
             */
            limit?: number;
            /**
             * Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
             */
            cursorState?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<ProfileAttributeDefinitionCollection, 'global.getProfileAttributeDefinitions', Config>;
      /**
       * ---
       *
       * [GET] Get profile attribute definition by its ID
       *
       * **path:** /profile-attribute-definitions/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // The profile attribute id.
       *   id?: string
       *   // Name of the profile attribute (must be unique).
       *   attributeName?: string
       *   systemName?: string
       *   // Active Directory field the attribute is mapped from (null if not mapped).
       *   activeDirectoryMapping?: string
       *   // The association type
       *   association?: 'None' | 'User' | 'Group' | 'All'
       *   // The relative URL to access this object.
       *   url?: string
       * }
       * ```
       */
      getProfileAttributeDefinitionById<
        Config extends Alova2MethodConfig<ProfileAttributeDefinition> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<ProfileAttributeDefinition, 'global.getProfileAttributeDefinitionById', Config>;
      /**
       * ---
       *
       * [GET] Get list of user roles
       *
       * **path:** /roles
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
       *   //  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
       *   limit?: number
       *   // Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
       *   cursorState?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [title] Cursor-based pagination
       *   pagination?: {
       *     // Limit requested for the current search
       *     limit?: number
       *     // Number of total hits. If this value is larger than the objects returned, then multiple searches will have to be performed to get the complete result set.
       *     totalResults?: number
       *     // [title] Indexing Status
       *     // The status of the indexing engine.
       *     indexingStatus?: 'IndexingComplete' | 'IndexingProperties' | 'IndexingContent' | 'NA'
       *     // Used to continue a search if the results are too large for a single call. Url has bookmark string embedded for subsequent calls on that search
       *     nextUrl?: string
       *   }
       *   results?: Array<{
       *     // A unique identifier of the role.
       *     id?: string
       *     // The name of the role.
       *     roleName?: string
       *     // The system name of the Role.
       *     systemName?: string
       *     // Friendly description of the role's purpose
       *     description?: string
       *     // The relative URL to access this object.
       *     url?: string
       *   }>
       * }
       * ```
       */
      getRoles<
        Config extends Alova2MethodConfig<RoleCollection> & {
          params: {
            /**
             * Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
             *  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
             */
            limit?: number;
            /**
             * Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
             */
            cursorState?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<RoleCollection, 'global.getRoles', Config>;
      /**
       * ---
       *
       * [GET] Get role by its ID
       *
       * **path:** /roles/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // A unique identifier of the role.
       *   id?: string
       *   // The name of the role.
       *   roleName?: string
       *   // The system name of the Role.
       *   systemName?: string
       *   // Friendly description of the role's purpose
       *   description?: string
       *   // The relative URL to access this object.
       *   url?: string
       * }
       * ```
       */
      getRoleById<
        Config extends Alova2MethodConfig<Role> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<Role, 'global.getRoleById', Config>;
      /**
       * ---
       *
       * [POST] Authenticates to a specific Knowledge Vault using username and password.
       *
       * **path:** /sessions
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   input?: {
       *     // The knowledge vault to sign in to.
       *     vault?: string
       *     // The Vault user name.
       *     userName?: string
       *     // The Vault password.
       *     password?: string
       *     // The app name to use for server-side audit logging.
       *     appCode?: string
       *   }
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   id?: string
       *   // The access token
       *   // [required]
       *   accessToken: string
       *   // [title] Vault
       *   vaultInformation?: {
       *     // The name of the Knowledge Vault. This is also the name of the database.
       *     name?: string
       *     // A unique identifier for the Knowledge Vault.
       *     id?: string
       *     // The relative URL to access this object.
       *     url?: string
       *   }
       *   // [title] User
       *   userInformation?: {
       *     // A unique number that the Vault uses to reference the user.
       *     id?: string
       *     // The login name of the user.
       *     name?: string
       *     // The email address of the user.
       *     email?: string
       *     // [title] AuthType Enum
       *     // The authentication type.
       *     //
       *     //   ActiveDirectory,
       *     //   Vault,
       *     //   Autodesk
       *     authTypes?: 'ActiveDirectory' | 'Vault' | 'Autodesk'
       *     systemName?: string
       *     // The date that the user was created.
       *     createDate?: string
       *     // Is the user active
       *     isActive?: string
       *     // The relative URL to access this object.
       *     url?: Url
       *   }
       * }
       * ```
       */
      createSession<
        Config extends Alova2MethodConfig<Session> & {
          data: {
            input?: {
              /**
               * The knowledge vault to sign in to.
               */
              vault?: string;
              /**
               * The Vault user name.
               */
              userName?: string;
              /**
               * The Vault password.
               */
              password?: string;
              /**
               * The app name to use for server-side audit logging.
               */
              appCode?: string;
            };
          };
        }
      >(
        config: Config
      ): Alova2Method<Session, 'global.createSession', Config>;
      /**
       * ---
       *
       * [POST] Authenticates to a specific Knowledge Vault using Windows credentials.
       *
       * **path:** /sessions/win-auth
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   input?: {
       *     // The knowledge vault to sign in to.
       *     vault?: string
       *     // The app name to use for server-side audit logging.
       *     appCode?: string
       *   }
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   id?: string
       *   // The access token
       *   // [required]
       *   accessToken: string
       *   // [title] Vault
       *   vaultInformation?: {
       *     // The name of the Knowledge Vault. This is also the name of the database.
       *     name?: string
       *     // A unique identifier for the Knowledge Vault.
       *     id?: string
       *     // The relative URL to access this object.
       *     url?: string
       *   }
       *   // [title] User
       *   userInformation?: {
       *     // A unique number that the Vault uses to reference the user.
       *     id?: string
       *     // The login name of the user.
       *     name?: string
       *     // The email address of the user.
       *     email?: string
       *     // [title] AuthType Enum
       *     // The authentication type.
       *     //
       *     //   ActiveDirectory,
       *     //   Vault,
       *     //   Autodesk
       *     authTypes?: 'ActiveDirectory' | 'Vault' | 'Autodesk'
       *     systemName?: string
       *     // The date that the user was created.
       *     createDate?: string
       *     // Is the user active
       *     isActive?: string
       *     // The relative URL to access this object.
       *     url?: Url
       *   }
       * }
       * ```
       */
      createSessionWithWinAuth<
        Config extends Alova2MethodConfig<Session> & {
          data: {
            input?: {
              /**
               * The knowledge vault to sign in to.
               */
              vault?: string;
              /**
               * The app name to use for server-side audit logging.
               */
              appCode?: string;
            };
          };
        }
      >(
        config: Config
      ): Alova2Method<Session, 'global.createSessionWithWinAuth', Config>;
      /**
       * ---
       *
       * [GET] Get session by ID
       *
       * **path:** /sessions/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   id?: string
       *   // The access token
       *   // [required]
       *   accessToken: string
       *   // [title] Vault
       *   vaultInformation?: {
       *     // The name of the Knowledge Vault. This is also the name of the database.
       *     name?: string
       *     // A unique identifier for the Knowledge Vault.
       *     id?: string
       *     // The relative URL to access this object.
       *     url?: string
       *   }
       *   // [title] User
       *   userInformation?: {
       *     // A unique number that the Vault uses to reference the user.
       *     id?: string
       *     // The login name of the user.
       *     name?: string
       *     // The email address of the user.
       *     email?: string
       *     // [title] AuthType Enum
       *     // The authentication type.
       *     //
       *     //   ActiveDirectory,
       *     //   Vault,
       *     //   Autodesk
       *     authTypes?: 'ActiveDirectory' | 'Vault' | 'Autodesk'
       *     systemName?: string
       *     // The date that the user was created.
       *     createDate?: string
       *     // Is the user active
       *     isActive?: string
       *     // The relative URL to access this object.
       *     url?: Url
       *   }
       * }
       * ```
       */
      getSessionById<
        Config extends Alova2MethodConfig<Session> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<Session, 'global.getSessionById', Config>;
      /**
       * ---
       *
       * [DELETE] Delete session by ID
       *
       * **path:** /sessions/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      deleteSession<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'global.deleteSession', Config>;
      /**
       * ---
       *
       * [GET] Get system options
       *
       * **path:** /system-options
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // Filters and returns items with exact match
       *   'filter[name]'?: string
       *   // Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
       *   //  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
       *   limit?: number
       *   // Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
       *   cursorState?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [title] Cursor-based pagination
       *   pagination?: {
       *     // Limit requested for the current search
       *     limit?: number
       *     // Number of total hits. If this value is larger than the objects returned, then multiple searches will have to be performed to get the complete result set.
       *     totalResults?: number
       *     // [title] Indexing Status
       *     // The status of the indexing engine.
       *     indexingStatus?: 'IndexingComplete' | 'IndexingProperties' | 'IndexingContent' | 'NA'
       *     // Used to continue a search if the results are too large for a single call. Url has bookmark string embedded for subsequent calls on that search
       *     nextUrl?: string
       *   }
       *   results?: Array<{
       *     id?: string
       *     // The name of the option
       *     name?: string
       *     // The value of the option
       *     value?: string
       *     // The relative URL to access this object.
       *     url?: string
       *   }>
       * }
       * ```
       */
      getSystemOptions<
        Config extends Alova2MethodConfig<VaultOptionCollection> & {
          params: {
            /**
             * Filters and returns items with exact match
             */
            'filter[name]'?: string;
            /**
             * Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
             *  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
             */
            limit?: number;
            /**
             * Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
             */
            cursorState?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<VaultOptionCollection, 'global.getSystemOptions', Config>;
      /**
       * ---
       *
       * [POST] Create a system option
       *
       * **path:** /system-options
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // The name of the option.
       *   name?: string
       *   // The value of the option.
       *   value?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   id?: string
       *   // The name of the option
       *   name?: string
       *   // The value of the option
       *   value?: string
       *   // The relative URL to access this object.
       *   url?: string
       * }
       * ```
       */
      createSystemOption<
        Config extends Alova2MethodConfig<VaultOption> & {
          data: {
            /**
             * The name of the option.
             */
            name?: string;
            /**
             * The value of the option.
             */
            value?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<VaultOption, 'global.createSystemOption', Config>;
      /**
       * ---
       *
       * [GET] Get system option by its ID
       *
       * **path:** /system-options/{id}
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   id?: string
       *   // The name of the option
       *   name?: string
       *   // The value of the option
       *   value?: string
       *   // The relative URL to access this object.
       *   url?: string
       * }
       * ```
       */
      getSystemOptionById<Config extends Alova2MethodConfig<VaultOption>>(
        config?: Config
      ): Alova2Method<VaultOption, 'global.getSystemOptionById', Config>;
      /**
       * ---
       *
       * [PATCH] Update system option by its ID
       *
       * **path:** /system-options/{id}
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // The value of the option
       *   value?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   id?: string
       *   // The name of the option
       *   name?: string
       *   // The value of the option
       *   value?: string
       *   // The relative URL to access this object.
       *   url?: string
       * }
       * ```
       */
      updateSystemOptionById<
        Config extends Alova2MethodConfig<VaultOption> & {
          data: {
            /**
             * The value of the option
             */
            value?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<VaultOption, 'global.updateSystemOptionById', Config>;
      /**
       * ---
       *
       * [DELETE] Delete system option by its ID
       *
       * **path:** /system-options/{id}
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      deleteSystemOptionById<Config extends Alova2MethodConfig<unknown>>(
        config?: Config
      ): Alova2Method<unknown, 'global.deleteSystemOptionById', Config>;
      /**
       * ---
       *
       * [GET] Get the list of all users
       *
       * **path:** /users
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
       *   //  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
       *   limit?: number
       *   // Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
       *   cursorState?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [title] Cursor-based pagination
       *   pagination?: {
       *     // Limit requested for the current search
       *     limit?: number
       *     // Number of total hits. If this value is larger than the objects returned, then multiple searches will have to be performed to get the complete result set.
       *     totalResults?: number
       *     // [title] Indexing Status
       *     // The status of the indexing engine.
       *     indexingStatus?: 'IndexingComplete' | 'IndexingProperties' | 'IndexingContent' | 'NA'
       *     // Used to continue a search if the results are too large for a single call. Url has bookmark string embedded for subsequent calls on that search
       *     nextUrl?: string
       *   }
       *   results?: Array<{
       *     // A unique number that the Vault uses to reference the user.
       *     id?: string
       *     // The login name of the user.
       *     name?: string
       *     // The email address of the user.
       *     email?: string
       *     // [title] AuthType Enum
       *     // The authentication type.
       *     //
       *     //   ActiveDirectory,
       *     //   Vault,
       *     //   Autodesk
       *     authTypes?: 'ActiveDirectory' | 'Vault' | 'Autodesk'
       *     systemName?: string
       *     // The date that the user was created.
       *     createDate?: string
       *     // Is the user active
       *     isActive?: string
       *     // The relative URL to access this object.
       *     url?: Url
       *   }>
       * }
       * ```
       */
      getAllUsers<
        Config extends Alova2MethodConfig<UserCollection> & {
          params: {
            /**
             * Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
             *  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
             */
            limit?: number;
            /**
             * Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
             */
            cursorState?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<UserCollection, 'global.getAllUsers', Config>;
      /**
       * ---
       *
       * [GET] Get user by id
       *
       * **path:** /users/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = object
       * ```
       */
      getUserById<
        Config extends Alova2MethodConfig<UserExtended> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<UserExtended, 'global.getUserById', Config>;
      /**
       * ---
       *
       * [GET] Get all accounts associated with the specific user
       *
       * **path:** /users/{id}/accounts
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [title] Cursor-based pagination
       *   pagination?: {
       *     // Limit requested for the current search
       *     limit?: number
       *     // Number of total hits. If this value is larger than the objects returned, then multiple searches will have to be performed to get the complete result set.
       *     totalResults?: number
       *     // [title] Indexing Status
       *     // The status of the indexing engine.
       *     indexingStatus?: 'IndexingComplete' | 'IndexingProperties' | 'IndexingContent' | 'NA'
       *     // Used to continue a search if the results are too large for a single call. Url has bookmark string embedded for subsequent calls on that search
       *     nextUrl?: string
       *   }
       *   results?: Array<{
       *     id?: string
       *     // The name of the account for signin purposes.
       *     accountName?: string
       *     // The email associated with the account.
       *     accountEmail?: string
       *     // Is the account active (enabled).
       *     isActive?: boolean
       *     // The relative URL to access this object.
       *     url?: string
       *   }>
       * }
       * ```
       */
      getUserAccounts<
        Config extends Alova2MethodConfig<AccountCollection> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<AccountCollection, 'global.getUserAccounts', Config>;
      /**
       * ---
       *
       * [GET] Get user account information for a specific type.
       *
       * **path:** /users/{id}/accounts/{authType}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       *   // [required]
       *   authType: 'ActiveDirectory' | 'Vault' | 'Autodesk'
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   id?: string
       *   // The name of the account for signin purposes.
       *   accountName?: string
       *   // The email associated with the account.
       *   accountEmail?: string
       *   // Is the account active (enabled).
       *   isActive?: boolean
       *   // The relative URL to access this object.
       *   url?: string
       * }
       * ```
       */
      getUsersAccountByAuthType<
        Config extends Alova2MethodConfig<Account> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
            /**
             * [required]
             */
            authType: 'ActiveDirectory' | 'Vault' | 'Autodesk';
          };
        }
      >(
        config: Config
      ): Alova2Method<Account, 'global.getUsersAccountByAuthType', Config>;
      /**
       * ---
       *
       * [GET] Get all knowledge vaults available on the server
       *
       * **path:** /vaults
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
       *   //  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
       *   limit?: number
       *   // Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
       *   cursorState?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [title] Cursor-based pagination
       *   pagination?: {
       *     // Limit requested for the current search
       *     limit?: number
       *     // Number of total hits. If this value is larger than the objects returned, then multiple searches will have to be performed to get the complete result set.
       *     totalResults?: number
       *     // [title] Indexing Status
       *     // The status of the indexing engine.
       *     indexingStatus?: 'IndexingComplete' | 'IndexingProperties' | 'IndexingContent' | 'NA'
       *     // Used to continue a search if the results are too large for a single call. Url has bookmark string embedded for subsequent calls on that search
       *     nextUrl?: string
       *   }
       *   results?: Array<{
       *     // The name of the Knowledge Vault. This is also the name of the database.
       *     name?: string
       *     // A unique identifier for the Knowledge Vault.
       *     id?: string
       *     // The relative URL to access this object.
       *     url?: string
       *   }>
       * }
       * ```
       */
      getVaults<
        Config extends Alova2MethodConfig<VaultCollection> & {
          params: {
            /**
             * Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
             *  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
             */
            limit?: number;
            /**
             * Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
             */
            cursorState?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<VaultCollection, 'global.getVaults', Config>;
      /**
       * ---
       *
       * [GET] Get knowledge vault based on its ID
       *
       * **path:** /vaults/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // The name of the Knowledge Vault. This is also the name of the database.
       *   name?: string
       *   // A unique identifier for the Knowledge Vault.
       *   id?: string
       *   // The relative URL to access this object.
       *   url?: string
       * }
       * ```
       */
      getVaultById<
        Config extends Alova2MethodConfig<Vault> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<Vault, 'global.getVaultById', Config>;
    };
    vault: {
      /**
       * ---
       *
       * [GET] Get all change orders
       *
       * **path:** /vaults/{vaultId}/change-orders
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   vaultId: string
       * }
       * ```
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // The value to use for the search. Based on 'SearchContent' option, this parameter will either search across all properties  or across all properties and content. Ex: q=Assembly, all objects that contain 'Assembly' within their properties will be returned.
       *   q?: string
       *   // Search filter to include only change orders that match state property. e.g. filter[state]=open
       *   'filter[State]'?: string
       *   // Search filter to include only change orders that assignees user list can perform. ex: filter[assignees]=1,2,3,4
       *   'filter[assignees]'?: string
       *   // Search filter to include only open change orders.  e.g. filter[openCOsOnly]=true
       *   'filter[openCOsOnly]'?: boolean
       *   // If true, the response will include additional detailed information for each entity. Examples include:
       *   //   - For folders (getFolders API), it will return `FolderExtended` instead of `Folder`, which includes additional information such as the parent folder.
       *   //   - For file versions (getFileVersions API), it will return `FileVersionExtended` instead of `FileVersion`, which includes extra details like the checkout user ID.
       *   //   - For change orders (getChangeOrders API), it will return `ChangeOrderExtended` instead of `ChangeOrder`, which provides further information such as the list of assignees.
       *   //   - For property definitions (getPropertyDefinitions API), it will return `PropertyDefinitionExtended` instead of `PropertyDefinition`, which includes extra details like list values.
       *   'option[extendedModels]'?: boolean
       *   // The properties that need to be returned. property ids separated by ',', e.g. '1,2,3' 'all' means return all properties.
       *   'option[propDefIds]'?: string
       *   // Specifies sorting criteria for search results. Supports multi-sort and accepted values for sort-order: asc, desc.  Ex: sort = Revision desc,Name asc
       *   sort?: string
       *   // Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
       *   //  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
       *   limit?: number
       *   // Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
       *   cursorState?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [title] Cursor-based pagination
       *   pagination?: {
       *     // Limit requested for the current search
       *     limit?: number
       *     // Number of total hits. If this value is larger than the objects returned, then multiple searches will have to be performed to get the complete result set.
       *     totalResults?: number
       *     // [title] Indexing Status
       *     // The status of the indexing engine.
       *     indexingStatus?: 'IndexingComplete' | 'IndexingProperties' | 'IndexingContent' | 'NA'
       *     // Used to continue a search if the results are too large for a single call. Url has bookmark string embedded for subsequent calls on that search
       *     nextUrl?: string
       *   }
       *   results?: (
       *     | object
       *     | {
       *         // Master Id of this Change Order. The Master Id uniquely identifies this Change Order object
       *         id?: string
       *         // The relative URL to access this object.
       *         url?: string
       *         // The descriptive name for this Change Order.The Change Order Number will be used here.
       *         name?: string
       *         // The date and time the Change Order was created
       *         createDate?: string
       *         // The Change Order number. Numbers are generated based on the Numbering Scheme.
       *         number?: string
       *         // The title of the Change Order
       *         title?: string
       *         // The description of the Change Order.
       *         description?: string
       *         // The date and time when the Change Order needs to be approved by.
       *         approveDeadline?: string
       *         // The last time that the Change Order was modified.
       *         lastModifiedDate?: string
       *         lastModifiedUserId?: string
       *         closeDate?: string
       *         // the last time that the Change Order was modified.
       *         lastTouchedDate?: string
       *         entityType?: string
       *         // Number of File Attachments
       *         numberOfAttachments?: number
       *         properties?: Array<{
       *           // Unique identifier for a server-based property definition
       *           propertyDefinitionId?: string
       *           // [title] Property Definition
       *           definition?: {
       *             // Get the unique identifier for a server-based property definition
       *             // [required]
       *             id: string
       *             // The relative URL to access this object.
       *             url?: Url
       *             // Get or sets the Display name for this Property Definition
       *             // [required]
       *             displayName: string
       *             // Get the System Name for this Property Definition.
       *             // [required]
       *             systemName: string
       *             // The value defined in SQL database.
       *             // [required]
       *             dataType: 'String' | 'Numeric' | 'Bool' | 'DateTime' | 'Image'
       *             // Get or sets whether this Property Definition is Active.
       *             active?: boolean
       *             // Get whether or not this is a System Property (as opposed to a UserDefined property)
       *             isSystem?: boolean
       *             // Default Value that will be applied to entities that do not have an existing value associated with this PropertyDefinition
       *             initialValue?: string
       *           }
       *           // The property value associated with the entity and PropertyDefinition
       *           value?: string
       *         }>
       *         // Get the name of the Change Order State.
       *         state?: string
       *         // The color of the state.
       *         stateColor?: number
       *         // Get if the Change Order is currently locked.
       *         isReadOnly?: boolean
       *       }
       *   )[]
       *   included?: {
       *     propertyDefinition?: Record<string, PropertyDefinition>
       *   }
       * }
       * ```
       */
      getChangeOrders<
        Config extends Alova2MethodConfig<ChangeOrderCollection> & {
          pathParams: {
            /**
             * [required]
             */
            vaultId: string;
          };
          params: {
            /**
             * The value to use for the search. Based on 'SearchContent' option, this parameter will either search across all properties  or across all properties and content. Ex: q=Assembly, all objects that contain 'Assembly' within their properties will be returned.
             */
            q?: string;
            /**
             * Search filter to include only change orders that match state property. e.g. filter[state]=open
             */
            'filter[State]'?: string;
            /**
             * Search filter to include only change orders that assignees user list can perform. ex: filter[assignees]=1,2,3,4
             */
            'filter[assignees]'?: string;
            /**
             * Search filter to include only open change orders.  e.g. filter[openCOsOnly]=true
             */
            'filter[openCOsOnly]'?: boolean;
            /**
             * If true, the response will include additional detailed information for each entity. Examples include:
             *   - For folders (getFolders API), it will return `FolderExtended` instead of `Folder`, which includes additional information such as the parent folder.
             *   - For file versions (getFileVersions API), it will return `FileVersionExtended` instead of `FileVersion`, which includes extra details like the checkout user ID.
             *   - For change orders (getChangeOrders API), it will return `ChangeOrderExtended` instead of `ChangeOrder`, which provides further information such as the list of assignees.
             *   - For property definitions (getPropertyDefinitions API), it will return `PropertyDefinitionExtended` instead of `PropertyDefinition`, which includes extra details like list values.
             */
            'option[extendedModels]'?: boolean;
            /**
             * The properties that need to be returned. property ids separated by ',', e.g. '1,2,3' 'all' means return all properties.
             */
            'option[propDefIds]'?: string;
            /**
             * Specifies sorting criteria for search results. Supports multi-sort and accepted values for sort-order: asc, desc.  Ex: sort = Revision desc,Name asc
             */
            sort?: string;
            /**
             * Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
             *  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
             */
            limit?: number;
            /**
             * Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
             */
            cursorState?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<ChangeOrderCollection, 'vault.getChangeOrders', Config>;
      /**
       * ---
       *
       * [GET] Get change order by its ID
       *
       * **path:** /vaults/{vaultId}/change-orders/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   vaultId: string
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // Master Id of this Change Order. The Master Id uniquely identifies this Change Order object
       *   id?: string
       *   // The relative URL to access this object.
       *   url?: string
       *   // The descriptive name for this Change Order.The Change Order Number will be used here.
       *   name?: string
       *   // The date and time the Change Order was created
       *   createDate?: string
       *   // The Change Order number. Numbers are generated based on the Numbering Scheme.
       *   number?: string
       *   // The title of the Change Order
       *   title?: string
       *   // The description of the Change Order.
       *   description?: string
       *   // The date and time when the Change Order needs to be approved by.
       *   approveDeadline?: string
       *   // The last time that the Change Order was modified.
       *   lastModifiedDate?: string
       *   lastModifiedUserId?: string
       *   closeDate?: string
       *   // the last time that the Change Order was modified.
       *   lastTouchedDate?: string
       *   entityType?: string
       *   // Number of File Attachments
       *   numberOfAttachments?: number
       *   properties?: Array<{
       *     // Unique identifier for a server-based property definition
       *     propertyDefinitionId?: string
       *     // [title] Property Definition
       *     definition?: {
       *       // Get the unique identifier for a server-based property definition
       *       // [required]
       *       id: string
       *       // The relative URL to access this object.
       *       url?: Url
       *       // Get or sets the Display name for this Property Definition
       *       // [required]
       *       displayName: string
       *       // Get the System Name for this Property Definition.
       *       // [required]
       *       systemName: string
       *       // The value defined in SQL database.
       *       // [required]
       *       dataType: 'String' | 'Numeric' | 'Bool' | 'DateTime' | 'Image'
       *       // Get or sets whether this Property Definition is Active.
       *       active?: boolean
       *       // Get whether or not this is a System Property (as opposed to a UserDefined property)
       *       isSystem?: boolean
       *       // Default Value that will be applied to entities that do not have an existing value associated with this PropertyDefinition
       *       initialValue?: string
       *     }
       *     // The property value associated with the entity and PropertyDefinition
       *     value?: string
       *   }>
       *   // Get the name of the Change Order State.
       *   state?: string
       *   // The color of the state.
       *   stateColor?: number
       *   // Get if the Change Order is currently locked.
       *   isReadOnly?: boolean
       * }
       * ```
       */
      getChangeOrderById<
        Config extends Alova2MethodConfig<ChangeOrder> & {
          pathParams: {
            /**
             * [required]
             */
            vaultId: string;
            /**
             * [required]
             */
            id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<ChangeOrder, 'vault.getChangeOrderById', Config>;
      /**
       * ---
       *
       * [GET] Get all change order related Files by its ID
       *
       * **path:** /vaults/{vaultId}/change-orders/{id}/all-related-files
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   vaultId: string
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // Include only associated files that are in consumable(released) state. default: option[releasedOnly]=false
       *   'option[releasedOnly]'?: boolean
       *   // If true, the response will include additional detailed information for each entity. Examples include:
       *   //   - For folders (getFolders API), it will return `FolderExtended` instead of `Folder`, which includes additional information such as the parent folder.
       *   //   - For file versions (getFileVersions API), it will return `FileVersionExtended` instead of `FileVersion`, which includes extra details like the checkout user ID.
       *   //   - For change orders (getChangeOrders API), it will return `ChangeOrderExtended` instead of `ChangeOrder`, which provides further information such as the list of assignees.
       *   //   - For property definitions (getPropertyDefinitions API), it will return `PropertyDefinitionExtended` instead of `PropertyDefinition`, which includes extra details like list values.
       *   'option[extendedModels]'?: boolean
       *   // The properties that need to be returned. property ids separated by ',', e.g. '1,2,3' 'all' means return all properties.
       *   'option[propDefIds]'?: string
       *   // Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
       *   //  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
       *   limit?: number
       *   // Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
       *   cursorState?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [title] Cursor-based pagination
       *   pagination?: {
       *     // Limit requested for the current search
       *     limit?: number
       *     // Number of total hits. If this value is larger than the objects returned, then multiple searches will have to be performed to get the complete result set.
       *     totalResults?: number
       *     // [title] Indexing Status
       *     // The status of the indexing engine.
       *     indexingStatus?: 'IndexingComplete' | 'IndexingProperties' | 'IndexingContent' | 'NA'
       *     // Used to continue a search if the results are too large for a single call. Url has bookmark string embedded for subsequent calls on that search
       *     nextUrl?: string
       *   }
       *   results?: (
       *     | object
       *     | {
       *         // File IterationId
       *         // [required]
       *         id: string
       *         // The name of the file. This value applies to all versions of the file
       *         // [required]
       *         name: string
       *         // Category information about this file
       *         category?: string
       *         // Category color
       *         categoryColor?: number
       *         // [title] File Classification Enum
       *         // The classification of the file.
       *         //
       *         //   None,
       *         //   DesignVisualization,
       *         //   DesignDocument,
       *         //   ConfigurationMember,
       *         //   ConfigurationFactory,
       *         //   ElectricalProject,
       *         //   DesignSubstitute,
       *         //   DesignRepresentation,
       *         //   DesignPresentation
       *         classification?:
       *           | 'None'
       *           | 'DesignVisualization'
       *           | 'DesignDocument'
       *           | 'ConfigurationMember'
       *           | 'ConfigurationFactory'
       *           | 'ElectricalProject'
       *           | 'DesignSubstitute'
       *           | 'DesignRepresentation'
       *           | 'DesignPresentation'
       *         entityType?: string
       *         // The version of the file. A file that has just been added to the Vault, will have 1 as its VerNum
       *         version?: number
       *         // Tells the date and time that this version of the file was created in the Vault. For the first version of a file, this date will match CkInDate. For later versions, this value will have the time when the previous version was checked out.
       *         createDate?: string
       *         // The last modified date of the file. This value is set by the client that uploaded the file.
       *         lastModifiedDate?: string
       *         // Revision information about this file.
       *         revision?: string
       *         // The name of the life cycle state for the current file
       *         state?: string
       *         // The color of the state.
       *         stateColor?: number
       *         // FolderId of the parent the current file  resides in
       *         parentFolderId?: string
       *         // [title] File - we cannot directly use File as class name, as it's occupied.
       *         file?: {
       *           // File MasterId
       *           // [required]
       *           id: string
       *           // The relative URL to access this object.
       *           // [required]
       *           url: string
       *           // [title] Version Type Enum
       *           versionType?: 'None' | 'Latest' | 'LatestReleased'
       *           // [title] File Version Extended
       *           // file version extended object
       *           fileVersion?: FileVersionExtended
       *         }
       *         // [title] Folder
       *         // folder object
       *         parent?: {
       *           // Get the unique identifier for this folder
       *           id?: string
       *           // The relative URL to access this object.
       *           url?: Url
       *           // Get the descriptive name for this Folder. This is always the Folder Name without the full path.
       *           name?: string
       *           // Get the full vault path for this folder (ie. $/Folder1)
       *           fullName?: string
       *           // Get the date and time that the folder was created.
       *           createDate?: string
       *           // Get the name of the user who created this folder.
       *           createUserName?: string
       *           // Get the category that is assigned to this folder
       *           category?: string
       *           // Category color
       *           categoryColor?: number
       *           // The name of the life cycle state for the current folder
       *           state?: string
       *           // The color of the state.
       *           stateColor?: number
       *           // Get the number of immediate child folders.
       *           subfolderCount?: number
       *           children?: string
       *           // Get whether or not this folder is a library folder
       *           isLibrary?: boolean
       *           // Get whether this folder can be modified by the logged in user.
       *           isReadOnly?: boolean
       *           // Get if this folder is cloaked. A cloaked object is one that the caller does not have permissions to view.
       *           isCloaked?: boolean
       *           properties?: Array<{
       *             // Unique identifier for a server-based property definition
       *             propertyDefinitionId?: string
       *             // [title] Property Definition
       *             definition?: {
       *               // Get the unique identifier for a server-based property definition
       *               // [required]
       *               id: string
       *               // The relative URL to access this object.
       *               url?: Url
       *               // Get or sets the Display name for this Property Definition
       *               // [required]
       *               displayName: string
       *               // Get the System Name for this Property Definition.
       *               // [required]
       *               systemName: string
       *               // The value defined in SQL database.
       *               // [required]
       *               dataType: 'String' | 'Numeric' | 'Bool' | 'DateTime' | 'Image'
       *               // Get or sets whether this Property Definition is Active.
       *               active?: boolean
       *               // Get whether or not this is a System Property (as opposed to a UserDefined property)
       *               isSystem?: boolean
       *               // Default Value that will be applied to entities that do not have an existing value associated with this PropertyDefinition
       *               initialValue?: string
       *             }
       *             // The property value associated with the entity and PropertyDefinition
       *             value?: string
       *           }>
       *         }
       *         // If true, then the latest version of this file is in the checked-out state
       *         isCheckedOut?: boolean
       *         // The Name of the user who checked-in or uploaded this file.
       *         createUserName?: string
       *         // The date and time that the file was checked in. This property is only valid if isCheckedOut is false.
       *         checkinDate?: string
       *         // The date and time that the file was last checked out
       *         checkoutDate?: string
       *         // User that has the file checked out
       *         checkoutUserName?: string
       *         // The size, in bytes, of the file. This property is only valid if CheckedOut is false.
       *         size?: number
       *         // The relative URL to access this object.
       *         url?: Url
       *         // Flag to determine if valid VizAttachmentStatus (Not None)
       *         hasVisualizationAttachment?: boolean
       *         // [title] File Visualization Attachment Status Enum
       *         // The design visualization attachment status of the file.
       *         //
       *         //   None,
       *         //   Syncronized,
       *         //   NotSyncronized,
       *         //   UserVerified,
       *         //   Legacy
       *         visualizationAttachmentStatus?: 'None' | 'Syncronized' | 'NotSyncronized' | 'UserVerified' | 'Legacy'
       *         isReadOnly?: boolean
       *         // Get if this file is cloaked. A cloaked object is one that the caller does not have permissions to view
       *         isCloaked?: boolean
       *         // Gets whether or not the file is on the local site (in a multi-site environment). This value will always be true on a single-site environment.
       *         isOnSite?: boolean
       *         properties?: Array<Property>
       *       }
       *   )[]
       *   included?: {
       *     folder?: Record<string, Folder>
       *     propertyDefinition?: Record<
       *       string,
       *       {
       *         // Get the unique identifier for a server-based property definition
       *         // [required]
       *         id: string
       *         // The relative URL to access this object.
       *         url?: Url
       *         // Get or sets the Display name for this Property Definition
       *         // [required]
       *         displayName: string
       *         // Get the System Name for this Property Definition.
       *         // [required]
       *         systemName: string
       *         // The value defined in SQL database.
       *         // [required]
       *         dataType: 'String' | 'Numeric' | 'Bool' | 'DateTime' | 'Image'
       *         // Get or sets whether this Property Definition is Active.
       *         active?: boolean
       *         // Get whether or not this is a System Property (as opposed to a UserDefined property)
       *         isSystem?: boolean
       *         // Default Value that will be applied to entities that do not have an existing value associated with this PropertyDefinition
       *         initialValue?: string
       *       }
       *     >
       *   }
       * }
       * ```
       */
      getChangeOrderRelatedFiles<
        Config extends Alova2MethodConfig<FileVersionCollection> & {
          pathParams: {
            /**
             * [required]
             */
            vaultId: string;
            /**
             * [required]
             */
            id: string;
          };
          params: {
            /**
             * Include only associated files that are in consumable(released) state. default: option[releasedOnly]=false
             */
            'option[releasedOnly]'?: boolean;
            /**
             * If true, the response will include additional detailed information for each entity. Examples include:
             *   - For folders (getFolders API), it will return `FolderExtended` instead of `Folder`, which includes additional information such as the parent folder.
             *   - For file versions (getFileVersions API), it will return `FileVersionExtended` instead of `FileVersion`, which includes extra details like the checkout user ID.
             *   - For change orders (getChangeOrders API), it will return `ChangeOrderExtended` instead of `ChangeOrder`, which provides further information such as the list of assignees.
             *   - For property definitions (getPropertyDefinitions API), it will return `PropertyDefinitionExtended` instead of `PropertyDefinition`, which includes extra details like list values.
             */
            'option[extendedModels]'?: boolean;
            /**
             * The properties that need to be returned. property ids separated by ',', e.g. '1,2,3' 'all' means return all properties.
             */
            'option[propDefIds]'?: string;
            /**
             * Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
             *  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
             */
            limit?: number;
            /**
             * Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
             */
            cursorState?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<FileVersionCollection, 'vault.getChangeOrderRelatedFiles', Config>;
      /**
       * ---
       *
       * [GET] Get all change order associated entities by its ID
       *
       * **path:** /vaults/{vaultId}/change-orders/{id}/associated-entities
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   vaultId: string
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // Include only associated items that are consumable. default: option[releasedItemsOnly]=false
       *   'option[releasedItemsOnly]'?: boolean
       *   // Include only associated files that are in consumable(released) state.. default: option[releasedFilesOnly]=false
       *   'option[releasedFilesOnly]'?: boolean
       *   // If true, the response will include additional detailed information for each entity. Examples include:
       *   //   - For folders (getFolders API), it will return `FolderExtended` instead of `Folder`, which includes additional information such as the parent folder.
       *   //   - For file versions (getFileVersions API), it will return `FileVersionExtended` instead of `FileVersion`, which includes extra details like the checkout user ID.
       *   //   - For change orders (getChangeOrders API), it will return `ChangeOrderExtended` instead of `ChangeOrder`, which provides further information such as the list of assignees.
       *   //   - For property definitions (getPropertyDefinitions API), it will return `PropertyDefinitionExtended` instead of `PropertyDefinition`, which includes extra details like list values.
       *   'option[extendedModels]'?: boolean
       *   // The properties that need to be returned. property ids separated by ',', e.g. '1,2,3' 'all' means return all properties.
       *   'option[propDefIds]'?: string
       *   // Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
       *   //  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
       *   limit?: number
       *   // Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
       *   cursorState?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [title] Cursor-based pagination
       *   pagination?: {
       *     // Limit requested for the current search
       *     limit?: number
       *     // Number of total hits. If this value is larger than the objects returned, then multiple searches will have to be performed to get the complete result set.
       *     totalResults?: number
       *     // [title] Indexing Status
       *     // The status of the indexing engine.
       *     indexingStatus?: 'IndexingComplete' | 'IndexingProperties' | 'IndexingContent' | 'NA'
       *     // Used to continue a search if the results are too large for a single call. Url has bookmark string embedded for subsequent calls on that search
       *     nextUrl?: string
       *   }
       *   results?: unknown[]
       *   included?: {
       *     folder?: Record<
       *       string,
       *       {
       *         // Get the unique identifier for this folder
       *         id?: string
       *         // The relative URL to access this object.
       *         url?: Url
       *         // Get the descriptive name for this Folder. This is always the Folder Name without the full path.
       *         name?: string
       *         // Get the full vault path for this folder (ie. $/Folder1)
       *         fullName?: string
       *         // Get the date and time that the folder was created.
       *         createDate?: string
       *         // Get the name of the user who created this folder.
       *         createUserName?: string
       *         // Get the category that is assigned to this folder
       *         category?: string
       *         // Category color
       *         categoryColor?: number
       *         // The name of the life cycle state for the current folder
       *         state?: string
       *         // The color of the state.
       *         stateColor?: number
       *         // Get the number of immediate child folders.
       *         subfolderCount?: number
       *         children?: string
       *         // Get whether or not this folder is a library folder
       *         isLibrary?: boolean
       *         // Get whether this folder can be modified by the logged in user.
       *         isReadOnly?: boolean
       *         // Get if this folder is cloaked. A cloaked object is one that the caller does not have permissions to view.
       *         isCloaked?: boolean
       *         properties?: Array<{
       *           // Unique identifier for a server-based property definition
       *           propertyDefinitionId?: string
       *           // [title] Property Definition
       *           definition?: {
       *             // Get the unique identifier for a server-based property definition
       *             // [required]
       *             id: string
       *             // The relative URL to access this object.
       *             url?: Url
       *             // Get or sets the Display name for this Property Definition
       *             // [required]
       *             displayName: string
       *             // Get the System Name for this Property Definition.
       *             // [required]
       *             systemName: string
       *             // The value defined in SQL database.
       *             // [required]
       *             dataType: 'String' | 'Numeric' | 'Bool' | 'DateTime' | 'Image'
       *             // Get or sets whether this Property Definition is Active.
       *             active?: boolean
       *             // Get whether or not this is a System Property (as opposed to a UserDefined property)
       *             isSystem?: boolean
       *             // Default Value that will be applied to entities that do not have an existing value associated with this PropertyDefinition
       *             initialValue?: string
       *           }
       *           // The property value associated with the entity and PropertyDefinition
       *           value?: string
       *         }>
       *       }
       *     >
       *     propertyDefinition?: Record<
       *       string,
       *       {
       *         // Get the unique identifier for a server-based property definition
       *         // [required]
       *         id: string
       *         // The relative URL to access this object.
       *         url?: Url
       *         // Get or sets the Display name for this Property Definition
       *         // [required]
       *         displayName: string
       *         // Get the System Name for this Property Definition.
       *         // [required]
       *         systemName: string
       *         // The value defined in SQL database.
       *         // [required]
       *         dataType: 'String' | 'Numeric' | 'Bool' | 'DateTime' | 'Image'
       *         // Get or sets whether this Property Definition is Active.
       *         active?: boolean
       *         // Get whether or not this is a System Property (as opposed to a UserDefined property)
       *         isSystem?: boolean
       *         // Default Value that will be applied to entities that do not have an existing value associated with this PropertyDefinition
       *         initialValue?: string
       *       }
       *     >
       *   }
       * }
       * ```
       */
      getChangeOrderAssociatedEntities<
        Config extends Alova2MethodConfig<EntityCollection> & {
          pathParams: {
            /**
             * [required]
             */
            vaultId: string;
            /**
             * [required]
             */
            id: string;
          };
          params: {
            /**
             * Include only associated items that are consumable. default: option[releasedItemsOnly]=false
             */
            'option[releasedItemsOnly]'?: boolean;
            /**
             * Include only associated files that are in consumable(released) state.. default: option[releasedFilesOnly]=false
             */
            'option[releasedFilesOnly]'?: boolean;
            /**
             * If true, the response will include additional detailed information for each entity. Examples include:
             *   - For folders (getFolders API), it will return `FolderExtended` instead of `Folder`, which includes additional information such as the parent folder.
             *   - For file versions (getFileVersions API), it will return `FileVersionExtended` instead of `FileVersion`, which includes extra details like the checkout user ID.
             *   - For change orders (getChangeOrders API), it will return `ChangeOrderExtended` instead of `ChangeOrder`, which provides further information such as the list of assignees.
             *   - For property definitions (getPropertyDefinitions API), it will return `PropertyDefinitionExtended` instead of `PropertyDefinition`, which includes extra details like list values.
             */
            'option[extendedModels]'?: boolean;
            /**
             * The properties that need to be returned. property ids separated by ',', e.g. '1,2,3' 'all' means return all properties.
             */
            'option[propDefIds]'?: string;
            /**
             * Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
             *  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
             */
            limit?: number;
            /**
             * Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
             */
            cursorState?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<EntityCollection, 'vault.getChangeOrderAssociatedEntities', Config>;
      /**
       * ---
       *
       * [GET] Get comments for a given change order ID.
       *
       * **path:** /vaults/{vaultId}/change-orders/{id}/comments
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   vaultId: string
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
       *   //  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
       *   limit?: number
       *   // Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
       *   cursorState?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [title] Cursor-based pagination
       *   pagination?: {
       *     // Limit requested for the current search
       *     limit?: number
       *     // Number of total hits. If this value is larger than the objects returned, then multiple searches will have to be performed to get the complete result set.
       *     totalResults?: number
       *     // [title] Indexing Status
       *     // The status of the indexing engine.
       *     indexingStatus?: 'IndexingComplete' | 'IndexingProperties' | 'IndexingContent' | 'NA'
       *     // Used to continue a search if the results are too large for a single call. Url has bookmark string embedded for subsequent calls on that search
       *     nextUrl?: string
       *   }
       *   results?: Array<{
       *     id?: string
       *     // The relative URL to access this object.
       *     url?: string
       *     subject?: string
       *     message?: string
       *     createDate?: string
       *     createUserName?: string
       *     state?: string
       *     numberOfAttachments?: number
       *     replies?: Array<{
       *       id?: string
       *       // The relative URL to access this object.
       *       url?: Url
       *       subject?: string
       *       message?: string
       *       createDate?: string
       *       createUserName?: string
       *       state?: string
       *       numberOfAttachments?: number
       *       replies?: Array<ECOComment>
       *       // [title] ECO Comment
       *       // Change Order Comment object
       *       parent?: ECOComment
       *     }>
       *     // [title] ECO Comment2
       *     // Change Order Comment object duplicate(ECOComment) to allow them to reference to each other
       *     parent?: ECOComment2
       *   }>
       * }
       * ```
       */
      getChangeOrderComments<
        Config extends Alova2MethodConfig<ECOCommentCollection> & {
          pathParams: {
            /**
             * [required]
             */
            vaultId: string;
            /**
             * [required]
             */
            id: string;
          };
          params: {
            /**
             * Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
             *  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
             */
            limit?: number;
            /**
             * Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
             */
            cursorState?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<ECOCommentCollection, 'vault.getChangeOrderComments', Config>;
      /**
       * ---
       *
       * [GET] Get attachments associated with change order comment
       *
       * **path:** /vaults/{vaultId}/eco-comments/{id}/attachments
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   vaultId: string
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // Include only attachments that are in consumable(released) state.. default: option[releasedOnly]=false
       *   'option[releasedOnly]'?: boolean
       *   // If true, the response will include additional detailed information for each entity. Examples include:
       *   //   - For folders (getFolders API), it will return `FolderExtended` instead of `Folder`, which includes additional information such as the parent folder.
       *   //   - For file versions (getFileVersions API), it will return `FileVersionExtended` instead of `FileVersion`, which includes extra details like the checkout user ID.
       *   //   - For change orders (getChangeOrders API), it will return `ChangeOrderExtended` instead of `ChangeOrder`, which provides further information such as the list of assignees.
       *   //   - For property definitions (getPropertyDefinitions API), it will return `PropertyDefinitionExtended` instead of `PropertyDefinition`, which includes extra details like list values.
       *   'option[extendedModels]'?: boolean
       *   // The properties that need to be returned. property ids separated by ',', e.g. '1,2,3' 'all' means return all properties.
       *   'option[propDefIds]'?: string
       *   // Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
       *   //  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
       *   limit?: number
       *   // Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
       *   cursorState?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [title] Cursor-based pagination
       *   pagination?: {
       *     // Limit requested for the current search
       *     limit?: number
       *     // Number of total hits. If this value is larger than the objects returned, then multiple searches will have to be performed to get the complete result set.
       *     totalResults?: number
       *     // [title] Indexing Status
       *     // The status of the indexing engine.
       *     indexingStatus?: 'IndexingComplete' | 'IndexingProperties' | 'IndexingContent' | 'NA'
       *     // Used to continue a search if the results are too large for a single call. Url has bookmark string embedded for subsequent calls on that search
       *     nextUrl?: string
       *   }
       *   results?: (
       *     | object
       *     | {
       *         // File IterationId
       *         // [required]
       *         id: string
       *         // The name of the file. This value applies to all versions of the file
       *         // [required]
       *         name: string
       *         // Category information about this file
       *         category?: string
       *         // Category color
       *         categoryColor?: number
       *         // [title] File Classification Enum
       *         // The classification of the file.
       *         //
       *         //   None,
       *         //   DesignVisualization,
       *         //   DesignDocument,
       *         //   ConfigurationMember,
       *         //   ConfigurationFactory,
       *         //   ElectricalProject,
       *         //   DesignSubstitute,
       *         //   DesignRepresentation,
       *         //   DesignPresentation
       *         classification?:
       *           | 'None'
       *           | 'DesignVisualization'
       *           | 'DesignDocument'
       *           | 'ConfigurationMember'
       *           | 'ConfigurationFactory'
       *           | 'ElectricalProject'
       *           | 'DesignSubstitute'
       *           | 'DesignRepresentation'
       *           | 'DesignPresentation'
       *         entityType?: string
       *         // The version of the file. A file that has just been added to the Vault, will have 1 as its VerNum
       *         version?: number
       *         // Tells the date and time that this version of the file was created in the Vault. For the first version of a file, this date will match CkInDate. For later versions, this value will have the time when the previous version was checked out.
       *         createDate?: string
       *         // The last modified date of the file. This value is set by the client that uploaded the file.
       *         lastModifiedDate?: string
       *         // Revision information about this file.
       *         revision?: string
       *         // The name of the life cycle state for the current file
       *         state?: string
       *         // The color of the state.
       *         stateColor?: number
       *         // FolderId of the parent the current file  resides in
       *         parentFolderId?: string
       *         // [title] File - we cannot directly use File as class name, as it's occupied.
       *         file?: {
       *           // File MasterId
       *           // [required]
       *           id: string
       *           // The relative URL to access this object.
       *           // [required]
       *           url: string
       *           // [title] Version Type Enum
       *           versionType?: 'None' | 'Latest' | 'LatestReleased'
       *           // [title] File Version Extended
       *           // file version extended object
       *           fileVersion?: FileVersionExtended
       *         }
       *         // [title] Folder
       *         // folder object
       *         parent?: {
       *           // Get the unique identifier for this folder
       *           id?: string
       *           // The relative URL to access this object.
       *           url?: Url
       *           // Get the descriptive name for this Folder. This is always the Folder Name without the full path.
       *           name?: string
       *           // Get the full vault path for this folder (ie. $/Folder1)
       *           fullName?: string
       *           // Get the date and time that the folder was created.
       *           createDate?: string
       *           // Get the name of the user who created this folder.
       *           createUserName?: string
       *           // Get the category that is assigned to this folder
       *           category?: string
       *           // Category color
       *           categoryColor?: number
       *           // The name of the life cycle state for the current folder
       *           state?: string
       *           // The color of the state.
       *           stateColor?: number
       *           // Get the number of immediate child folders.
       *           subfolderCount?: number
       *           children?: string
       *           // Get whether or not this folder is a library folder
       *           isLibrary?: boolean
       *           // Get whether this folder can be modified by the logged in user.
       *           isReadOnly?: boolean
       *           // Get if this folder is cloaked. A cloaked object is one that the caller does not have permissions to view.
       *           isCloaked?: boolean
       *           properties?: Array<{
       *             // Unique identifier for a server-based property definition
       *             propertyDefinitionId?: string
       *             // [title] Property Definition
       *             definition?: {
       *               // Get the unique identifier for a server-based property definition
       *               // [required]
       *               id: string
       *               // The relative URL to access this object.
       *               url?: Url
       *               // Get or sets the Display name for this Property Definition
       *               // [required]
       *               displayName: string
       *               // Get the System Name for this Property Definition.
       *               // [required]
       *               systemName: string
       *               // The value defined in SQL database.
       *               // [required]
       *               dataType: 'String' | 'Numeric' | 'Bool' | 'DateTime' | 'Image'
       *               // Get or sets whether this Property Definition is Active.
       *               active?: boolean
       *               // Get whether or not this is a System Property (as opposed to a UserDefined property)
       *               isSystem?: boolean
       *               // Default Value that will be applied to entities that do not have an existing value associated with this PropertyDefinition
       *               initialValue?: string
       *             }
       *             // The property value associated with the entity and PropertyDefinition
       *             value?: string
       *           }>
       *         }
       *         // If true, then the latest version of this file is in the checked-out state
       *         isCheckedOut?: boolean
       *         // The Name of the user who checked-in or uploaded this file.
       *         createUserName?: string
       *         // The date and time that the file was checked in. This property is only valid if isCheckedOut is false.
       *         checkinDate?: string
       *         // The date and time that the file was last checked out
       *         checkoutDate?: string
       *         // User that has the file checked out
       *         checkoutUserName?: string
       *         // The size, in bytes, of the file. This property is only valid if CheckedOut is false.
       *         size?: number
       *         // The relative URL to access this object.
       *         url?: Url
       *         // Flag to determine if valid VizAttachmentStatus (Not None)
       *         hasVisualizationAttachment?: boolean
       *         // [title] File Visualization Attachment Status Enum
       *         // The design visualization attachment status of the file.
       *         //
       *         //   None,
       *         //   Syncronized,
       *         //   NotSyncronized,
       *         //   UserVerified,
       *         //   Legacy
       *         visualizationAttachmentStatus?: 'None' | 'Syncronized' | 'NotSyncronized' | 'UserVerified' | 'Legacy'
       *         isReadOnly?: boolean
       *         // Get if this file is cloaked. A cloaked object is one that the caller does not have permissions to view
       *         isCloaked?: boolean
       *         // Gets whether or not the file is on the local site (in a multi-site environment). This value will always be true on a single-site environment.
       *         isOnSite?: boolean
       *         properties?: Array<Property>
       *       }
       *   )[]
       *   included?: {
       *     folder?: Record<string, Folder>
       *     propertyDefinition?: Record<
       *       string,
       *       {
       *         // Get the unique identifier for a server-based property definition
       *         // [required]
       *         id: string
       *         // The relative URL to access this object.
       *         url?: Url
       *         // Get or sets the Display name for this Property Definition
       *         // [required]
       *         displayName: string
       *         // Get the System Name for this Property Definition.
       *         // [required]
       *         systemName: string
       *         // The value defined in SQL database.
       *         // [required]
       *         dataType: 'String' | 'Numeric' | 'Bool' | 'DateTime' | 'Image'
       *         // Get or sets whether this Property Definition is Active.
       *         active?: boolean
       *         // Get whether or not this is a System Property (as opposed to a UserDefined property)
       *         isSystem?: boolean
       *         // Default Value that will be applied to entities that do not have an existing value associated with this PropertyDefinition
       *         initialValue?: string
       *       }
       *     >
       *   }
       * }
       * ```
       */
      getChangeOrderCommentAttachments<
        Config extends Alova2MethodConfig<FileVersionCollection> & {
          pathParams: {
            /**
             * [required]
             */
            vaultId: string;
            /**
             * [required]
             */
            id: string;
          };
          params: {
            /**
             * Include only attachments that are in consumable(released) state.. default: option[releasedOnly]=false
             */
            'option[releasedOnly]'?: boolean;
            /**
             * If true, the response will include additional detailed information for each entity. Examples include:
             *   - For folders (getFolders API), it will return `FolderExtended` instead of `Folder`, which includes additional information such as the parent folder.
             *   - For file versions (getFileVersions API), it will return `FileVersionExtended` instead of `FileVersion`, which includes extra details like the checkout user ID.
             *   - For change orders (getChangeOrders API), it will return `ChangeOrderExtended` instead of `ChangeOrder`, which provides further information such as the list of assignees.
             *   - For property definitions (getPropertyDefinitions API), it will return `PropertyDefinitionExtended` instead of `PropertyDefinition`, which includes extra details like list values.
             */
            'option[extendedModels]'?: boolean;
            /**
             * The properties that need to be returned. property ids separated by ',', e.g. '1,2,3' 'all' means return all properties.
             */
            'option[propDefIds]'?: string;
            /**
             * Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
             *  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
             */
            limit?: number;
            /**
             * Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
             */
            cursorState?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<FileVersionCollection, 'vault.getChangeOrderCommentAttachments', Config>;
      /**
       * ---
       *
       * [GET] Get list of file versions
       *
       * **path:** /vaults/{vaultId}/file-versions
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   vaultId: string
       * }
       * ```
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // The value to use for the search. Based on 'SearchContent' option, this parameter will either search across all properties  or across all properties and content. Ex: q=Assembly, all objects that contain 'Assembly' within their properties will be returned.
       *   q?: string
       *   // Search filter to include only file versions that match CheckoutUserName property.  e.g. filter[CheckoutUserName]=userA
       *   'filter[CheckoutUserName]'?: string
       *   // Search filter to include only file versions that matchCreateUserName property.  e.g. filter[CreateUserName]=userA
       *   'filter[CreateUserName]'?: string
       *   // Search filter to include only file versions that match CategoryName property.  e.g. filter[CategoryName]=Office
       *   'filter[CategoryName]'?: string
       *   // Search filter to include only file versions that match state property.  e.g. filter[state]=Review
       *   'filter[State]'?: string
       *   // If true, include only the latest version; if false, include all versions. default: option[latestOnly]=true
       *   'option[latestOnly]'?: boolean
       *   // If true, include only versions that are consumable (released) state. default: option[releasedFilesOnly]=false.
       *   'option[releasedFilesOnly]'?: boolean
       *   // If true, the response will include additional detailed information for each entity. Examples include:
       *   //   - For folders (getFolders API), it will return `FolderExtended` instead of `Folder`, which includes additional information such as the parent folder.
       *   //   - For file versions (getFileVersions API), it will return `FileVersionExtended` instead of `FileVersion`, which includes extra details like the checkout user ID.
       *   //   - For change orders (getChangeOrders API), it will return `ChangeOrderExtended` instead of `ChangeOrder`, which provides further information such as the list of assignees.
       *   //   - For property definitions (getPropertyDefinitions API), it will return `PropertyDefinitionExtended` instead of `PropertyDefinition`, which includes extra details like list values.
       *   'option[extendedModels]'?: boolean
       *   // The properties that need to be returned. property ids separated by ',', e.g. '1,2,3' 'all' means return all properties.
       *   'option[propDefIds]'?: string
       *   // Specifies sorting criteria for search results. Format: {propertyDefSysName} {sort-order} Accepted values for sort-order: asc, desc.  Ex: sort = Revision desc,Name asc
       *   sort?: string
       *   // Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
       *   //  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
       *   limit?: number
       *   // Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
       *   cursorState?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [title] Cursor-based pagination
       *   pagination?: {
       *     // Limit requested for the current search
       *     limit?: number
       *     // Number of total hits. If this value is larger than the objects returned, then multiple searches will have to be performed to get the complete result set.
       *     totalResults?: number
       *     // [title] Indexing Status
       *     // The status of the indexing engine.
       *     indexingStatus?: 'IndexingComplete' | 'IndexingProperties' | 'IndexingContent' | 'NA'
       *     // Used to continue a search if the results are too large for a single call. Url has bookmark string embedded for subsequent calls on that search
       *     nextUrl?: string
       *   }
       *   results?: (
       *     | object
       *     | {
       *         // File IterationId
       *         // [required]
       *         id: string
       *         // The name of the file. This value applies to all versions of the file
       *         // [required]
       *         name: string
       *         // Category information about this file
       *         category?: string
       *         // Category color
       *         categoryColor?: number
       *         // [title] File Classification Enum
       *         // The classification of the file.
       *         //
       *         //   None,
       *         //   DesignVisualization,
       *         //   DesignDocument,
       *         //   ConfigurationMember,
       *         //   ConfigurationFactory,
       *         //   ElectricalProject,
       *         //   DesignSubstitute,
       *         //   DesignRepresentation,
       *         //   DesignPresentation
       *         classification?:
       *           | 'None'
       *           | 'DesignVisualization'
       *           | 'DesignDocument'
       *           | 'ConfigurationMember'
       *           | 'ConfigurationFactory'
       *           | 'ElectricalProject'
       *           | 'DesignSubstitute'
       *           | 'DesignRepresentation'
       *           | 'DesignPresentation'
       *         entityType?: string
       *         // The version of the file. A file that has just been added to the Vault, will have 1 as its VerNum
       *         version?: number
       *         // Tells the date and time that this version of the file was created in the Vault. For the first version of a file, this date will match CkInDate. For later versions, this value will have the time when the previous version was checked out.
       *         createDate?: string
       *         // The last modified date of the file. This value is set by the client that uploaded the file.
       *         lastModifiedDate?: string
       *         // Revision information about this file.
       *         revision?: string
       *         // The name of the life cycle state for the current file
       *         state?: string
       *         // The color of the state.
       *         stateColor?: number
       *         // FolderId of the parent the current file  resides in
       *         parentFolderId?: string
       *         // [title] File - we cannot directly use File as class name, as it's occupied.
       *         file?: {
       *           // File MasterId
       *           // [required]
       *           id: string
       *           // The relative URL to access this object.
       *           // [required]
       *           url: string
       *           // [title] Version Type Enum
       *           versionType?: 'None' | 'Latest' | 'LatestReleased'
       *           // [title] File Version Extended
       *           // file version extended object
       *           fileVersion?: FileVersionExtended
       *         }
       *         // [title] Folder
       *         // folder object
       *         parent?: {
       *           // Get the unique identifier for this folder
       *           id?: string
       *           // The relative URL to access this object.
       *           url?: Url
       *           // Get the descriptive name for this Folder. This is always the Folder Name without the full path.
       *           name?: string
       *           // Get the full vault path for this folder (ie. $/Folder1)
       *           fullName?: string
       *           // Get the date and time that the folder was created.
       *           createDate?: string
       *           // Get the name of the user who created this folder.
       *           createUserName?: string
       *           // Get the category that is assigned to this folder
       *           category?: string
       *           // Category color
       *           categoryColor?: number
       *           // The name of the life cycle state for the current folder
       *           state?: string
       *           // The color of the state.
       *           stateColor?: number
       *           // Get the number of immediate child folders.
       *           subfolderCount?: number
       *           children?: string
       *           // Get whether or not this folder is a library folder
       *           isLibrary?: boolean
       *           // Get whether this folder can be modified by the logged in user.
       *           isReadOnly?: boolean
       *           // Get if this folder is cloaked. A cloaked object is one that the caller does not have permissions to view.
       *           isCloaked?: boolean
       *           properties?: Array<{
       *             // Unique identifier for a server-based property definition
       *             propertyDefinitionId?: string
       *             // [title] Property Definition
       *             definition?: {
       *               // Get the unique identifier for a server-based property definition
       *               // [required]
       *               id: string
       *               // The relative URL to access this object.
       *               url?: Url
       *               // Get or sets the Display name for this Property Definition
       *               // [required]
       *               displayName: string
       *               // Get the System Name for this Property Definition.
       *               // [required]
       *               systemName: string
       *               // The value defined in SQL database.
       *               // [required]
       *               dataType: 'String' | 'Numeric' | 'Bool' | 'DateTime' | 'Image'
       *               // Get or sets whether this Property Definition is Active.
       *               active?: boolean
       *               // Get whether or not this is a System Property (as opposed to a UserDefined property)
       *               isSystem?: boolean
       *               // Default Value that will be applied to entities that do not have an existing value associated with this PropertyDefinition
       *               initialValue?: string
       *             }
       *             // The property value associated with the entity and PropertyDefinition
       *             value?: string
       *           }>
       *         }
       *         // If true, then the latest version of this file is in the checked-out state
       *         isCheckedOut?: boolean
       *         // The Name of the user who checked-in or uploaded this file.
       *         createUserName?: string
       *         // The date and time that the file was checked in. This property is only valid if isCheckedOut is false.
       *         checkinDate?: string
       *         // The date and time that the file was last checked out
       *         checkoutDate?: string
       *         // User that has the file checked out
       *         checkoutUserName?: string
       *         // The size, in bytes, of the file. This property is only valid if CheckedOut is false.
       *         size?: number
       *         // The relative URL to access this object.
       *         url?: Url
       *         // Flag to determine if valid VizAttachmentStatus (Not None)
       *         hasVisualizationAttachment?: boolean
       *         // [title] File Visualization Attachment Status Enum
       *         // The design visualization attachment status of the file.
       *         //
       *         //   None,
       *         //   Syncronized,
       *         //   NotSyncronized,
       *         //   UserVerified,
       *         //   Legacy
       *         visualizationAttachmentStatus?: 'None' | 'Syncronized' | 'NotSyncronized' | 'UserVerified' | 'Legacy'
       *         isReadOnly?: boolean
       *         // Get if this file is cloaked. A cloaked object is one that the caller does not have permissions to view
       *         isCloaked?: boolean
       *         // Gets whether or not the file is on the local site (in a multi-site environment). This value will always be true on a single-site environment.
       *         isOnSite?: boolean
       *         properties?: Array<Property>
       *       }
       *   )[]
       *   included?: {
       *     folder?: Record<string, Folder>
       *     propertyDefinition?: Record<
       *       string,
       *       {
       *         // Get the unique identifier for a server-based property definition
       *         // [required]
       *         id: string
       *         // The relative URL to access this object.
       *         url?: Url
       *         // Get or sets the Display name for this Property Definition
       *         // [required]
       *         displayName: string
       *         // Get the System Name for this Property Definition.
       *         // [required]
       *         systemName: string
       *         // The value defined in SQL database.
       *         // [required]
       *         dataType: 'String' | 'Numeric' | 'Bool' | 'DateTime' | 'Image'
       *         // Get or sets whether this Property Definition is Active.
       *         active?: boolean
       *         // Get whether or not this is a System Property (as opposed to a UserDefined property)
       *         isSystem?: boolean
       *         // Default Value that will be applied to entities that do not have an existing value associated with this PropertyDefinition
       *         initialValue?: string
       *       }
       *     >
       *   }
       * }
       * ```
       */
      getFileVersions<
        Config extends Alova2MethodConfig<FileVersionCollection> & {
          pathParams: {
            /**
             * [required]
             */
            vaultId: string;
          };
          params: {
            /**
             * The value to use for the search. Based on 'SearchContent' option, this parameter will either search across all properties  or across all properties and content. Ex: q=Assembly, all objects that contain 'Assembly' within their properties will be returned.
             */
            q?: string;
            /**
             * Search filter to include only file versions that match CheckoutUserName property.  e.g. filter[CheckoutUserName]=userA
             */
            'filter[CheckoutUserName]'?: string;
            /**
             * Search filter to include only file versions that matchCreateUserName property.  e.g. filter[CreateUserName]=userA
             */
            'filter[CreateUserName]'?: string;
            /**
             * Search filter to include only file versions that match CategoryName property.  e.g. filter[CategoryName]=Office
             */
            'filter[CategoryName]'?: string;
            /**
             * Search filter to include only file versions that match state property.  e.g. filter[state]=Review
             */
            'filter[State]'?: string;
            /**
             * If true, include only the latest version; if false, include all versions. default: option[latestOnly]=true
             */
            'option[latestOnly]'?: boolean;
            /**
             * If true, include only versions that are consumable (released) state. default: option[releasedFilesOnly]=false.
             */
            'option[releasedFilesOnly]'?: boolean;
            /**
             * If true, the response will include additional detailed information for each entity. Examples include:
             *   - For folders (getFolders API), it will return `FolderExtended` instead of `Folder`, which includes additional information such as the parent folder.
             *   - For file versions (getFileVersions API), it will return `FileVersionExtended` instead of `FileVersion`, which includes extra details like the checkout user ID.
             *   - For change orders (getChangeOrders API), it will return `ChangeOrderExtended` instead of `ChangeOrder`, which provides further information such as the list of assignees.
             *   - For property definitions (getPropertyDefinitions API), it will return `PropertyDefinitionExtended` instead of `PropertyDefinition`, which includes extra details like list values.
             */
            'option[extendedModels]'?: boolean;
            /**
             * The properties that need to be returned. property ids separated by ',', e.g. '1,2,3' 'all' means return all properties.
             */
            'option[propDefIds]'?: string;
            /**
             * Specifies sorting criteria for search results. Format: {propertyDefSysName} {sort-order} Accepted values for sort-order: asc, desc.  Ex: sort = Revision desc,Name asc
             */
            sort?: string;
            /**
             * Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
             *  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
             */
            limit?: number;
            /**
             * Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
             */
            cursorState?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<FileVersionCollection, 'vault.getFileVersions', Config>;
      /**
       * ---
       *
       * [GET] Get file version object by ID
       *
       * **path:** /vaults/{vaultId}/file-versions/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   vaultId: string
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = object
       * ```
       */
      getFileVersionById<
        Config extends Alova2MethodConfig<FileVersionExtended> & {
          pathParams: {
            /**
             * [required]
             */
            vaultId: string;
            /**
             * [required]
             */
            id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<FileVersionExtended, 'vault.getFileVersionById', Config>;
      /**
       * ---
       *
       * [GET] Generate signed download URL for Id
       *
       * **path:** /vaults/{vaultId}/file-versions/{id}/signedurl
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   vaultId: string
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // When current file is a dwf associated to an Item, to download its watermarked version, supply this Item Version's id as the watermark source.
       *   wmSrcItemVerId?: string
       *   // When current file is a dwf associated to an Item, directly or as a CAD file's visualization attachment, to download its watermarked version, supply this File Version's id or its CAD File Version's id as the watermark source.
       *   wmSrcFileVerId?: string
       *   // Specify the content disposition of the response header. Pass in 'inline' to allow the file to be displayed inside the web page; 'attachment' or null to save the file. Other values would be directly used as it is, but the behavior can't be guaranteed.
       *   contentDisposition?: string
       *   // Duration for the signed url to be valid in seconds. Max allowed time is 180 seconds. Ex: expirationTime=120
       *   expirationTime?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   id?: string
       *   url?: string
       * }
       * ```
       */
      getFileVersionSignedUrl<
        Config extends Alova2MethodConfig<{
          id?: string;
          url?: string;
        }> & {
          pathParams: {
            /**
             * [required]
             */
            vaultId: string;
            /**
             * [required]
             */
            id: string;
          };
          params: {
            /**
             * When current file is a dwf associated to an Item, to download its watermarked version, supply this Item Version's id as the watermark source.
             */
            wmSrcItemVerId?: string;
            /**
             * When current file is a dwf associated to an Item, directly or as a CAD file's visualization attachment, to download its watermarked version, supply this File Version's id or its CAD File Version's id as the watermark source.
             */
            wmSrcFileVerId?: string;
            /**
             * Specify the content disposition of the response header. Pass in 'inline' to allow the file to be displayed inside the web page; 'attachment' or null to save the file. Other values would be directly used as it is, but the behavior can't be guaranteed.
             */
            contentDisposition?: string;
            /**
             * Duration for the signed url to be valid in seconds. Max allowed time is 180 seconds. Ex: expirationTime=120
             */
            expirationTime?: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          id?: string;
          url?: string;
        },
        'vault.getFileVersionSignedUrl',
        Config
      >;
      /**
       * ---
       *
       * [GET] Download file version content
       *
       * **path:** /vaults/{vaultId}/file-versions/{id}/content
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   vaultId: string
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // In a multi-site environment, this field tells if the file should be synched to the local site. If true and the file is not on the local site, it will be moved to the local site.
       *   allowSync?: boolean
       *   // When current file is a dwf associated to an Item, to download its watermarked version, supply this Item Version's id as the watermark source.
       *   wmSrcItemVerId?: string
       *   // When current file is a dwf associated to an Item, directly or as a CAD file's visualization attachment, to download its watermarked version, supply this File Version's id or its CAD File Version's id as the watermark source.
       *   wmSrcFileVerId?: string
       *   // Specify the content disposition of the response header. Pass in 'inline' to allow the file to be displayed inside the web page; 'attachment' or null to save the file. Other values would be directly used as it is, but the behavior can't be guaranteed.
       *   contentDisposition?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = Blob
       * ```
       */
      getFileVersionContent<
        Config extends Alova2MethodConfig<Blob> & {
          pathParams: {
            /**
             * [required]
             */
            vaultId: string;
            /**
             * [required]
             */
            id: string;
          };
          params: {
            /**
             * In a multi-site environment, this field tells if the file should be synched to the local site. If true and the file is not on the local site, it will be moved to the local site.
             */
            allowSync?: boolean;
            /**
             * When current file is a dwf associated to an Item, to download its watermarked version, supply this Item Version's id as the watermark source.
             */
            wmSrcItemVerId?: string;
            /**
             * When current file is a dwf associated to an Item, directly or as a CAD file's visualization attachment, to download its watermarked version, supply this File Version's id or its CAD File Version's id as the watermark source.
             */
            wmSrcFileVerId?: string;
            /**
             * Specify the content disposition of the response header. Pass in 'inline' to allow the file to be displayed inside the web page; 'attachment' or null to save the file. Other values would be directly used as it is, but the behavior can't be guaranteed.
             */
            contentDisposition?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<Blob, 'vault.getFileVersionContent', Config>;
      /**
       * ---
       *
       * [HEAD] Get file version content metadata by its Id
       *
       * **path:** /vaults/{vaultId}/file-versions/{id}/content
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   vaultId: string
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // In a multi-site environment, this field tells if the file should be synched to the local site. If true and the file is not on the local site, it will be moved to the local site.
       *   allowSync?: boolean
       *   // When current file is a dwf associated to an Item, to download its watermarked version, supply this Item Version's id as the watermark source.
       *   wmSrcItemVerId?: string
       *   // When current file is a dwf associated to an Item, directly or as a CAD file's visualization attachment, to download its watermarked version, supply this File Version's id or its CAD File Version's id as the watermark source.
       *   wmSrcFileVerId?: string
       *   // Specify the content disposition of the response header. Pass in 'inline' to allow the file to be displayed inside the web page; 'attachment' or null to save the file. Other values would be directly used as it is, but the behavior can't be guaranteed.
       *   contentDisposition?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      getFileVersionContentHead<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            vaultId: string;
            /**
             * [required]
             */
            id: string;
          };
          params: {
            /**
             * In a multi-site environment, this field tells if the file should be synched to the local site. If true and the file is not on the local site, it will be moved to the local site.
             */
            allowSync?: boolean;
            /**
             * When current file is a dwf associated to an Item, to download its watermarked version, supply this Item Version's id as the watermark source.
             */
            wmSrcItemVerId?: string;
            /**
             * When current file is a dwf associated to an Item, directly or as a CAD file's visualization attachment, to download its watermarked version, supply this File Version's id or its CAD File Version's id as the watermark source.
             */
            wmSrcFileVerId?: string;
            /**
             * Specify the content disposition of the response header. Pass in 'inline' to allow the file to be displayed inside the web page; 'attachment' or null to save the file. Other values would be directly used as it is, but the behavior can't be guaranteed.
             */
            contentDisposition?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'vault.getFileVersionContentHead', Config>;
      /**
       * ---
       *
       * [GET] Get the LMV root file required for visualization
       *
       * **path:** /vaults/{vaultId}/file-versions/{id}/svf/bubble.json
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   vaultId: string
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // In a multi-site environment, this field tells if the file should be synched to the local site. If true and the file is not on the local site, it will be moved to the local site.
       *   allowSync?: boolean
       *   // When current file is a dwf associated to an Item, to download its watermarked version, supply this Item Version's id as the watermark source.
       *   wmSrcItemVerId?: string
       *   // When current file is a dwf associated to an Item, directly or as a CAD file's visualization attachment, to download its watermarked version, supply this File Version's id or its CAD File Version's id as the watermark source.
       *   wmSrcFileVerId?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = object
       * ```
       */
      getFileVersionLmvRoot<
        Config extends Alova2MethodConfig<object> & {
          pathParams: {
            /**
             * [required]
             */
            vaultId: string;
            /**
             * [required]
             */
            id: string;
          };
          params: {
            /**
             * In a multi-site environment, this field tells if the file should be synched to the local site. If true and the file is not on the local site, it will be moved to the local site.
             */
            allowSync?: boolean;
            /**
             * When current file is a dwf associated to an Item, to download its watermarked version, supply this Item Version's id as the watermark source.
             */
            wmSrcItemVerId?: string;
            /**
             * When current file is a dwf associated to an Item, directly or as a CAD file's visualization attachment, to download its watermarked version, supply this File Version's id or its CAD File Version's id as the watermark source.
             */
            wmSrcFileVerId?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<object, 'vault.getFileVersionLmvRoot', Config>;
      /**
       * ---
       *
       * [GET] Get all of the Items assigned to a file version
       *
       * **path:** /vaults/{vaultId}/file-versions/{id}/item-versions
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   vaultId: string
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // Include only items that are in consumable state. default: option[releasedOnly]=false
       *   'option[releasedOnly]'?: boolean
       *   // The properties that need to be returned. property ids separated by ',', e.g. '1,2,3' 'all' means return all properties.
       *   'option[propDefIds]'?: string
       *   // Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
       *   //  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
       *   limit?: number
       *   // Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
       *   cursorState?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [title] Cursor-based pagination
       *   pagination?: {
       *     // Limit requested for the current search
       *     limit?: number
       *     // Number of total hits. If this value is larger than the objects returned, then multiple searches will have to be performed to get the complete result set.
       *     totalResults?: number
       *     // [title] Indexing Status
       *     // The status of the indexing engine.
       *     indexingStatus?: 'IndexingComplete' | 'IndexingProperties' | 'IndexingContent' | 'NA'
       *     // Used to continue a search if the results are too large for a single call. Url has bookmark string embedded for subsequent calls on that search
       *     nextUrl?: string
       *   }
       *   results?: Array<{
       *     // Item Iteration Id
       *     id?: string
       *     // The relative URL to access this object.
       *     url?: string
       *     // The Item number.
       *     number?: string
       *     // The version number, which is a sequential number given to each version. For example, if this value is 5, then the object is the 5th version.
       *     version?: number
       *     // The display value for the revision.
       *     revision?: string
       *     comment?: string
       *     // The display title.
       *     title?: string
       *     // Life cycle state of the item
       *     state?: string
       *     stateColor?: number
       *     name?: string
       *     // Category assigned to the item
       *     category?: string
       *     categoryColor?: number
       *     entityType?: string
       *     isReadOnly?: boolean
       *     // If true, the logged-in user is restricted from seeing this item.
       *     isCloaked?: boolean
       *     // Flag to check if an latest Item's  version is obsolete
       *     isLatestObsolete?: boolean
       *     // [title] Item
       *     item?: {
       *       // MasterId of the item
       *       // [required]
       *       id: string
       *       // The relative URL to access this object.
       *       // [required]
       *       url: Url
       *       // [title] Version Type Enum
       *       versionType?: 'None' | 'Latest' | 'LatestReleased'
       *       // [title] Item Version
       *       // The unique identifier for the object.
       *       itemVersion?: ItemVersion
       *     }
       *     properties?: Array<{
       *       // Unique identifier for a server-based property definition
       *       propertyDefinitionId?: string
       *       // [title] Property Definition
       *       definition?: {
       *         // Get the unique identifier for a server-based property definition
       *         // [required]
       *         id: string
       *         // The relative URL to access this object.
       *         url?: Url
       *         // Get or sets the Display name for this Property Definition
       *         // [required]
       *         displayName: string
       *         // Get the System Name for this Property Definition.
       *         // [required]
       *         systemName: string
       *         // The value defined in SQL database.
       *         // [required]
       *         dataType: 'String' | 'Numeric' | 'Bool' | 'DateTime' | 'Image'
       *         // Get or sets whether this Property Definition is Active.
       *         active?: boolean
       *         // Get whether or not this is a System Property (as opposed to a UserDefined property)
       *         isSystem?: boolean
       *         // Default Value that will be applied to entities that do not have an existing value associated with this PropertyDefinition
       *         initialValue?: string
       *       }
       *       // The property value associated with the entity and PropertyDefinition
       *       value?: string
       *     }>
       *   }>
       *   included?: {
       *     propertyDefinition?: Record<
       *       string,
       *       {
       *         // Get the unique identifier for a server-based property definition
       *         // [required]
       *         id: string
       *         // The relative URL to access this object.
       *         url?: Url
       *         // Get or sets the Display name for this Property Definition
       *         // [required]
       *         displayName: string
       *         // Get the System Name for this Property Definition.
       *         // [required]
       *         systemName: string
       *         // The value defined in SQL database.
       *         // [required]
       *         dataType: 'String' | 'Numeric' | 'Bool' | 'DateTime' | 'Image'
       *         // Get or sets whether this Property Definition is Active.
       *         active?: boolean
       *         // Get whether or not this is a System Property (as opposed to a UserDefined property)
       *         isSystem?: boolean
       *         // Default Value that will be applied to entities that do not have an existing value associated with this PropertyDefinition
       *         initialValue?: string
       *       }
       *     >
       *   }
       * }
       * ```
       */
      getFileVersionAssociatedItemVersions<
        Config extends Alova2MethodConfig<ItemVersionCollection> & {
          pathParams: {
            /**
             * [required]
             */
            vaultId: string;
            /**
             * [required]
             */
            id: string;
          };
          params: {
            /**
             * Include only items that are in consumable state. default: option[releasedOnly]=false
             */
            'option[releasedOnly]'?: boolean;
            /**
             * The properties that need to be returned. property ids separated by ',', e.g. '1,2,3' 'all' means return all properties.
             */
            'option[propDefIds]'?: string;
            /**
             * Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
             *  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
             */
            limit?: number;
            /**
             * Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
             */
            cursorState?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<ItemVersionCollection, 'vault.getFileVersionAssociatedItemVersions', Config>;
      /**
       * ---
       *
       * [GET] Get markups for specific file version
       *
       * **path:** /vaults/{vaultId}/file-versions/{id}/markups
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   vaultId: string
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
       *   //  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
       *   limit?: number
       *   // Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
       *   cursorState?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   results?: Array<{
       *     id?: string
       *     parentId?: string
       *     // [title] User
       *     createdByUser?: {
       *       // A unique number that the Vault uses to reference the user.
       *       id?: string
       *       // The login name of the user.
       *       name?: string
       *       // The email address of the user.
       *       email?: string
       *       // [title] AuthType Enum
       *       // The authentication type.
       *       //
       *       //   ActiveDirectory,
       *       //   Vault,
       *       //   Autodesk
       *       authTypes?: 'ActiveDirectory' | 'Vault' | 'Autodesk'
       *       systemName?: string
       *       // The date that the user was created.
       *       createDate?: string
       *       // Is the user active
       *       isActive?: string
       *       // The relative URL to access this object.
       *       url?: Url
       *     }
       *     createDateTime?: string
       *     // [title] User
       *     updatedByUser?: User
       *     updateDateTime?: string
       *     data?: string
       *     thumbnail?: string
       *     // The relative URL to access this object.
       *     url?: string
       *   }>
       *   // [title] Cursor-based pagination
       *   pagination?: {
       *     // Limit requested for the current search
       *     limit?: number
       *     // Number of total hits. If this value is larger than the objects returned, then multiple searches will have to be performed to get the complete result set.
       *     totalResults?: number
       *     // [title] Indexing Status
       *     // The status of the indexing engine.
       *     indexingStatus?: 'IndexingComplete' | 'IndexingProperties' | 'IndexingContent' | 'NA'
       *     // Used to continue a search if the results are too large for a single call. Url has bookmark string embedded for subsequent calls on that search
       *     nextUrl?: string
       *   }
       * }
       * ```
       */
      getFileVersionMarkups<
        Config extends Alova2MethodConfig<MarkupCollection> & {
          pathParams: {
            /**
             * [required]
             */
            vaultId: string;
            /**
             * [required]
             */
            id: string;
          };
          params: {
            /**
             * Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
             *  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
             */
            limit?: number;
            /**
             * Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
             */
            cursorState?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<MarkupCollection, 'vault.getFileVersionMarkups', Config>;
      /**
       * ---
       *
       * [GET] Get file markup by Id
       *
       * **path:** /vaults/{vaultId}/file-versions/{id}/markups/{markupId}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   vaultId: string
       *   // [required]
       *   id: string
       *   // [required]
       *   markupId: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   id?: string
       *   parentId?: string
       *   // [title] User
       *   createdByUser?: {
       *     // A unique number that the Vault uses to reference the user.
       *     id?: string
       *     // The login name of the user.
       *     name?: string
       *     // The email address of the user.
       *     email?: string
       *     // [title] AuthType Enum
       *     // The authentication type.
       *     //
       *     //   ActiveDirectory,
       *     //   Vault,
       *     //   Autodesk
       *     authTypes?: 'ActiveDirectory' | 'Vault' | 'Autodesk'
       *     systemName?: string
       *     // The date that the user was created.
       *     createDate?: string
       *     // Is the user active
       *     isActive?: string
       *     // The relative URL to access this object.
       *     url?: Url
       *   }
       *   createDateTime?: string
       *   // [title] User
       *   updatedByUser?: User
       *   updateDateTime?: string
       *   data?: string
       *   thumbnail?: string
       *   // The relative URL to access this object.
       *   url?: string
       * }
       * ```
       */
      getFileVersionMarkupById<
        Config extends Alova2MethodConfig<Markup> & {
          pathParams: {
            /**
             * [required]
             */
            vaultId: string;
            /**
             * [required]
             */
            id: string;
            /**
             * [required]
             */
            markupId: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<Markup, 'vault.getFileVersionMarkupById', Config>;
      /**
       * ---
       *
       * [GET] Fetch thumbnail for specific file Id
       *
       * **path:** /vaults/{vaultId}/file-versions/{id}/thumbnail
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   vaultId: string
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = Blob
       * ```
       */
      getFileVersionThumbnailById<
        Config extends Alova2MethodConfig<Blob> & {
          pathParams: {
            /**
             * [required]
             */
            vaultId: string;
            /**
             * [required]
             */
            id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<Blob, 'vault.getFileVersionThumbnailById', Config>;
      /**
       * ---
       *
       * [GET] Get file visualization attachment for specific file version
       *
       * **path:** /vaults/{vaultId}/file-versions/{id}/visualization-attachment
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   vaultId: string
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = object
       * ```
       */
      getFileVersionVisualizationAttachment<
        Config extends Alova2MethodConfig<FileVersionExtended> & {
          pathParams: {
            /**
             * [required]
             */
            vaultId: string;
            /**
             * [required]
             */
            id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<FileVersionExtended, 'vault.getFileVersionVisualizationAttachment', Config>;
      /**
       * ---
       *
       * [GET] Get all child associations for given id
       *
       * **path:** /vaults/{vaultId}/file-versions/{id}/uses
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   vaultId: string
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // If true, include files marked as hidden. Otherwise hidden files will be excluded. Default value is false
       *   'option[includeHidden]'?: boolean
       *   // If true,  we use "Release biased" approach of gathering dependencies. Default value is true
       *   'option[releaseBiased]'?: boolean
       *   // If true, only associations that are in consumable state are included in end result. Default value is false
       *   'option[releasedOnly]'?: boolean
       *   // If true, the response will include additional detailed information for each entity. Examples include:
       *   //   - For folders (getFolders API), it will return `FolderExtended` instead of `Folder`, which includes additional information such as the parent folder.
       *   //   - For file versions (getFileVersions API), it will return `FileVersionExtended` instead of `FileVersion`, which includes extra details like the checkout user ID.
       *   //   - For change orders (getChangeOrders API), it will return `ChangeOrderExtended` instead of `ChangeOrder`, which provides further information such as the list of assignees.
       *   //   - For property definitions (getPropertyDefinitions API), it will return `PropertyDefinitionExtended` instead of `PropertyDefinition`, which includes extra details like list values.
       *   'option[extendedModels]'?: boolean
       *   // The properties that need to be returned. property ids separated by ',', e.g. '1,2,3' 'all' means return all properties.
       *   'option[propDefIds]'?: string
       *   // If true, we get the latest file associations. Default value is true
       *   'option[getLatestAssocs]'?: boolean
       *   // If true, all levels of child will be returned. If false, only the direct child will be returned. Default value is false
       *   'option[recurse]'?: boolean
       *   // Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
       *   //  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
       *   limit?: number
       *   // Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
       *   cursorState?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [title] Cursor-based pagination
       *   pagination?: {
       *     // Limit requested for the current search
       *     limit?: number
       *     // Number of total hits. If this value is larger than the objects returned, then multiple searches will have to be performed to get the complete result set.
       *     totalResults?: number
       *     // [title] Indexing Status
       *     // The status of the indexing engine.
       *     indexingStatus?: 'IndexingComplete' | 'IndexingProperties' | 'IndexingContent' | 'NA'
       *     // Used to continue a search if the results are too large for a single call. Url has bookmark string embedded for subsequent calls on that search
       *     nextUrl?: string
       *   }
       *   results?: Array<{
       *     // [title] File Version Extended
       *     // file version extended object
       *     parentFile?: object
       *     // [title] File Version Extended
       *     // file version extended object
       *     childFile?: FileVersionExtended
       *     // [title] File Association Type Enum
       *     // File association options.
       *     fileAssocType?: 'Dependency' | 'Attachment'
       *   }>
       *   included?: {
       *     folder?: Record<
       *       string,
       *       {
       *         // Get the unique identifier for this folder
       *         id?: string
       *         // The relative URL to access this object.
       *         url?: Url
       *         // Get the descriptive name for this Folder. This is always the Folder Name without the full path.
       *         name?: string
       *         // Get the full vault path for this folder (ie. $/Folder1)
       *         fullName?: string
       *         // Get the date and time that the folder was created.
       *         createDate?: string
       *         // Get the name of the user who created this folder.
       *         createUserName?: string
       *         // Get the category that is assigned to this folder
       *         category?: string
       *         // Category color
       *         categoryColor?: number
       *         // The name of the life cycle state for the current folder
       *         state?: string
       *         // The color of the state.
       *         stateColor?: number
       *         // Get the number of immediate child folders.
       *         subfolderCount?: number
       *         children?: string
       *         // Get whether or not this folder is a library folder
       *         isLibrary?: boolean
       *         // Get whether this folder can be modified by the logged in user.
       *         isReadOnly?: boolean
       *         // Get if this folder is cloaked. A cloaked object is one that the caller does not have permissions to view.
       *         isCloaked?: boolean
       *         properties?: Array<{
       *           // Unique identifier for a server-based property definition
       *           propertyDefinitionId?: string
       *           // [title] Property Definition
       *           definition?: {
       *             // Get the unique identifier for a server-based property definition
       *             // [required]
       *             id: string
       *             // The relative URL to access this object.
       *             url?: Url
       *             // Get or sets the Display name for this Property Definition
       *             // [required]
       *             displayName: string
       *             // Get the System Name for this Property Definition.
       *             // [required]
       *             systemName: string
       *             // The value defined in SQL database.
       *             // [required]
       *             dataType: 'String' | 'Numeric' | 'Bool' | 'DateTime' | 'Image'
       *             // Get or sets whether this Property Definition is Active.
       *             active?: boolean
       *             // Get whether or not this is a System Property (as opposed to a UserDefined property)
       *             isSystem?: boolean
       *             // Default Value that will be applied to entities that do not have an existing value associated with this PropertyDefinition
       *             initialValue?: string
       *           }
       *           // The property value associated with the entity and PropertyDefinition
       *           value?: string
       *         }>
       *       }
       *     >
       *     propertyDefinition?: Record<
       *       string,
       *       {
       *         // Get the unique identifier for a server-based property definition
       *         // [required]
       *         id: string
       *         // The relative URL to access this object.
       *         url?: Url
       *         // Get or sets the Display name for this Property Definition
       *         // [required]
       *         displayName: string
       *         // Get the System Name for this Property Definition.
       *         // [required]
       *         systemName: string
       *         // The value defined in SQL database.
       *         // [required]
       *         dataType: 'String' | 'Numeric' | 'Bool' | 'DateTime' | 'Image'
       *         // Get or sets whether this Property Definition is Active.
       *         active?: boolean
       *         // Get whether or not this is a System Property (as opposed to a UserDefined property)
       *         isSystem?: boolean
       *         // Default Value that will be applied to entities that do not have an existing value associated with this PropertyDefinition
       *         initialValue?: string
       *       }
       *     >
       *   }
       * }
       * ```
       */
      getFileVersionUses<
        Config extends Alova2MethodConfig<FileAssocCollection> & {
          pathParams: {
            /**
             * [required]
             */
            vaultId: string;
            /**
             * [required]
             */
            id: string;
          };
          params: {
            /**
             * If true, include files marked as hidden. Otherwise hidden files will be excluded. Default value is false
             */
            'option[includeHidden]'?: boolean;
            /**
             * If true,  we use "Release biased" approach of gathering dependencies. Default value is true
             */
            'option[releaseBiased]'?: boolean;
            /**
             * If true, only associations that are in consumable state are included in end result. Default value is false
             */
            'option[releasedOnly]'?: boolean;
            /**
             * If true, the response will include additional detailed information for each entity. Examples include:
             *   - For folders (getFolders API), it will return `FolderExtended` instead of `Folder`, which includes additional information such as the parent folder.
             *   - For file versions (getFileVersions API), it will return `FileVersionExtended` instead of `FileVersion`, which includes extra details like the checkout user ID.
             *   - For change orders (getChangeOrders API), it will return `ChangeOrderExtended` instead of `ChangeOrder`, which provides further information such as the list of assignees.
             *   - For property definitions (getPropertyDefinitions API), it will return `PropertyDefinitionExtended` instead of `PropertyDefinition`, which includes extra details like list values.
             */
            'option[extendedModels]'?: boolean;
            /**
             * The properties that need to be returned. property ids separated by ',', e.g. '1,2,3' 'all' means return all properties.
             */
            'option[propDefIds]'?: string;
            /**
             * If true, we get the latest file associations. Default value is true
             */
            'option[getLatestAssocs]'?: boolean;
            /**
             * If true, all levels of child will be returned. If false, only the direct child will be returned. Default value is false
             */
            'option[recurse]'?: boolean;
            /**
             * Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
             *  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
             */
            limit?: number;
            /**
             * Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
             */
            cursorState?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<FileAssocCollection, 'vault.getFileVersionUses', Config>;
      /**
       * ---
       *
       * [GET] Get all parent associations for given id
       *
       * **path:** /vaults/{vaultId}/file-versions/{id}/parents
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   vaultId: string
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // If true, files marked as hidden will show up in the search. Otherwise hidden files will be excluded. Default value is false
       *   'option[includeHidden]'?: boolean
       *   // If true,  we use "Release biased" approach of gathering dependencies. Default value is true
       *   'option[releaseBiased]'?: boolean
       *   // If true, only associations that are in consumable state are included in end result. Default value is false
       *   'option[releasedOnly]'?: boolean
       *   // If true, the response will include additional detailed information for each entity. Examples include:
       *   //   - For folders (getFolders API), it will return `FolderExtended` instead of `Folder`, which includes additional information such as the parent folder.
       *   //   - For file versions (getFileVersions API), it will return `FileVersionExtended` instead of `FileVersion`, which includes extra details like the checkout user ID.
       *   //   - For change orders (getChangeOrders API), it will return `ChangeOrderExtended` instead of `ChangeOrder`, which provides further information such as the list of assignees.
       *   //   - For property definitions (getPropertyDefinitions API), it will return `PropertyDefinitionExtended` instead of `PropertyDefinition`, which includes extra details like list values.
       *   'option[extendedModels]'?: boolean
       *   // The properties that need to be returned. property ids separated by ',', e.g. '1,2,3' 'all' means return all properties.
       *   'option[propDefIds]'?: string
       *   // If true, we get the latest file associations. Default value is true
       *   'option[getLatestAssocs]'?: boolean
       *   // If true, all levels of parents will be returned. If false, only the direct parents will be returned. Default value is false
       *   'option[recurse]'?: boolean
       *   // Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
       *   //  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
       *   limit?: number
       *   // Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
       *   cursorState?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [title] Cursor-based pagination
       *   pagination?: {
       *     // Limit requested for the current search
       *     limit?: number
       *     // Number of total hits. If this value is larger than the objects returned, then multiple searches will have to be performed to get the complete result set.
       *     totalResults?: number
       *     // [title] Indexing Status
       *     // The status of the indexing engine.
       *     indexingStatus?: 'IndexingComplete' | 'IndexingProperties' | 'IndexingContent' | 'NA'
       *     // Used to continue a search if the results are too large for a single call. Url has bookmark string embedded for subsequent calls on that search
       *     nextUrl?: string
       *   }
       *   results?: Array<{
       *     // [title] File Version Extended
       *     // file version extended object
       *     parentFile?: object
       *     // [title] File Version Extended
       *     // file version extended object
       *     childFile?: FileVersionExtended
       *     // [title] File Association Type Enum
       *     // File association options.
       *     fileAssocType?: 'Dependency' | 'Attachment'
       *   }>
       *   included?: {
       *     folder?: Record<
       *       string,
       *       {
       *         // Get the unique identifier for this folder
       *         id?: string
       *         // The relative URL to access this object.
       *         url?: Url
       *         // Get the descriptive name for this Folder. This is always the Folder Name without the full path.
       *         name?: string
       *         // Get the full vault path for this folder (ie. $/Folder1)
       *         fullName?: string
       *         // Get the date and time that the folder was created.
       *         createDate?: string
       *         // Get the name of the user who created this folder.
       *         createUserName?: string
       *         // Get the category that is assigned to this folder
       *         category?: string
       *         // Category color
       *         categoryColor?: number
       *         // The name of the life cycle state for the current folder
       *         state?: string
       *         // The color of the state.
       *         stateColor?: number
       *         // Get the number of immediate child folders.
       *         subfolderCount?: number
       *         children?: string
       *         // Get whether or not this folder is a library folder
       *         isLibrary?: boolean
       *         // Get whether this folder can be modified by the logged in user.
       *         isReadOnly?: boolean
       *         // Get if this folder is cloaked. A cloaked object is one that the caller does not have permissions to view.
       *         isCloaked?: boolean
       *         properties?: Array<{
       *           // Unique identifier for a server-based property definition
       *           propertyDefinitionId?: string
       *           // [title] Property Definition
       *           definition?: {
       *             // Get the unique identifier for a server-based property definition
       *             // [required]
       *             id: string
       *             // The relative URL to access this object.
       *             url?: Url
       *             // Get or sets the Display name for this Property Definition
       *             // [required]
       *             displayName: string
       *             // Get the System Name for this Property Definition.
       *             // [required]
       *             systemName: string
       *             // The value defined in SQL database.
       *             // [required]
       *             dataType: 'String' | 'Numeric' | 'Bool' | 'DateTime' | 'Image'
       *             // Get or sets whether this Property Definition is Active.
       *             active?: boolean
       *             // Get whether or not this is a System Property (as opposed to a UserDefined property)
       *             isSystem?: boolean
       *             // Default Value that will be applied to entities that do not have an existing value associated with this PropertyDefinition
       *             initialValue?: string
       *           }
       *           // The property value associated with the entity and PropertyDefinition
       *           value?: string
       *         }>
       *       }
       *     >
       *     propertyDefinition?: Record<
       *       string,
       *       {
       *         // Get the unique identifier for a server-based property definition
       *         // [required]
       *         id: string
       *         // The relative URL to access this object.
       *         url?: Url
       *         // Get or sets the Display name for this Property Definition
       *         // [required]
       *         displayName: string
       *         // Get the System Name for this Property Definition.
       *         // [required]
       *         systemName: string
       *         // The value defined in SQL database.
       *         // [required]
       *         dataType: 'String' | 'Numeric' | 'Bool' | 'DateTime' | 'Image'
       *         // Get or sets whether this Property Definition is Active.
       *         active?: boolean
       *         // Get whether or not this is a System Property (as opposed to a UserDefined property)
       *         isSystem?: boolean
       *         // Default Value that will be applied to entities that do not have an existing value associated with this PropertyDefinition
       *         initialValue?: string
       *       }
       *     >
       *   }
       * }
       * ```
       */
      getFileVersionWhereUsed<
        Config extends Alova2MethodConfig<FileAssocCollection> & {
          pathParams: {
            /**
             * [required]
             */
            vaultId: string;
            /**
             * [required]
             */
            id: string;
          };
          params: {
            /**
             * If true, files marked as hidden will show up in the search. Otherwise hidden files will be excluded. Default value is false
             */
            'option[includeHidden]'?: boolean;
            /**
             * If true,  we use "Release biased" approach of gathering dependencies. Default value is true
             */
            'option[releaseBiased]'?: boolean;
            /**
             * If true, only associations that are in consumable state are included in end result. Default value is false
             */
            'option[releasedOnly]'?: boolean;
            /**
             * If true, the response will include additional detailed information for each entity. Examples include:
             *   - For folders (getFolders API), it will return `FolderExtended` instead of `Folder`, which includes additional information such as the parent folder.
             *   - For file versions (getFileVersions API), it will return `FileVersionExtended` instead of `FileVersion`, which includes extra details like the checkout user ID.
             *   - For change orders (getChangeOrders API), it will return `ChangeOrderExtended` instead of `ChangeOrder`, which provides further information such as the list of assignees.
             *   - For property definitions (getPropertyDefinitions API), it will return `PropertyDefinitionExtended` instead of `PropertyDefinition`, which includes extra details like list values.
             */
            'option[extendedModels]'?: boolean;
            /**
             * The properties that need to be returned. property ids separated by ',', e.g. '1,2,3' 'all' means return all properties.
             */
            'option[propDefIds]'?: string;
            /**
             * If true, we get the latest file associations. Default value is true
             */
            'option[getLatestAssocs]'?: boolean;
            /**
             * If true, all levels of parents will be returned. If false, only the direct parents will be returned. Default value is false
             */
            'option[recurse]'?: boolean;
            /**
             * Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
             *  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
             */
            limit?: number;
            /**
             * Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
             */
            cursorState?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<FileAssocCollection, 'vault.getFileVersionWhereUsed', Config>;
      /**
       * ---
       *
       * [GET] Get file by its Id
       *
       * **path:** /vaults/{vaultId}/files/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   vaultId: string
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // Option determines if latest version (releaseOnly=false) or latest consumable version will be returned. Default: option[releasedOnly]=false
       *   'option[releasedOnly]'?: boolean
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // File MasterId
       *   // [required]
       *   id: string
       *   // The relative URL to access this object.
       *   // [required]
       *   url: string
       *   // [title] Version Type Enum
       *   versionType?: 'None' | 'Latest' | 'LatestReleased'
       *   // [title] File Version Extended
       *   // file version extended object
       *   fileVersion?: FileVersionExtended
       * }
       * ```
       */
      getFileById<
        Config extends Alova2MethodConfig<FileObject> & {
          pathParams: {
            /**
             * [required]
             */
            vaultId: string;
            /**
             * [required]
             */
            id: string;
          };
          params: {
            /**
             * Option determines if latest version (releaseOnly=false) or latest consumable version will be returned. Default: option[releasedOnly]=false
             */
            'option[releasedOnly]'?: boolean;
          };
        }
      >(
        config: Config
      ): Alova2Method<FileObject, 'vault.getFileById', Config>;
      /**
       * ---
       *
       * [GET] Get the Change Orders which are driving a given file
       *
       * **path:** /vaults/{vaultId}/files/{id}/change-orders
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   vaultId: string
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // Option to skip change orders with closed or cancelled state when if includeClosedECOs is false. Default: option[includeClosedECOs] = false
       *   'option[includeClosedECOs]'?: boolean
       *   // If true, the response will include additional detailed information for each entity. Examples include:
       *   //   - For folders (getFolders API), it will return `FolderExtended` instead of `Folder`, which includes additional information such as the parent folder.
       *   //   - For file versions (getFileVersions API), it will return `FileVersionExtended` instead of `FileVersion`, which includes extra details like the checkout user ID.
       *   //   - For change orders (getChangeOrders API), it will return `ChangeOrderExtended` instead of `ChangeOrder`, which provides further information such as the list of assignees.
       *   //   - For property definitions (getPropertyDefinitions API), it will return `PropertyDefinitionExtended` instead of `PropertyDefinition`, which includes extra details like list values.
       *   'option[extendedModels]'?: boolean
       *   // The properties that need to be returned. property ids separated by ',', e.g. '1,2,3' 'all' means return all properties.
       *   'option[propDefIds]'?: string
       *   // Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
       *   //  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
       *   limit?: number
       *   // Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
       *   cursorState?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [title] Cursor-based pagination
       *   pagination?: {
       *     // Limit requested for the current search
       *     limit?: number
       *     // Number of total hits. If this value is larger than the objects returned, then multiple searches will have to be performed to get the complete result set.
       *     totalResults?: number
       *     // [title] Indexing Status
       *     // The status of the indexing engine.
       *     indexingStatus?: 'IndexingComplete' | 'IndexingProperties' | 'IndexingContent' | 'NA'
       *     // Used to continue a search if the results are too large for a single call. Url has bookmark string embedded for subsequent calls on that search
       *     nextUrl?: string
       *   }
       *   results?: (
       *     | object
       *     | {
       *         // Master Id of this Change Order. The Master Id uniquely identifies this Change Order object
       *         id?: string
       *         // The relative URL to access this object.
       *         url?: string
       *         // The descriptive name for this Change Order.The Change Order Number will be used here.
       *         name?: string
       *         // The date and time the Change Order was created
       *         createDate?: string
       *         // The Change Order number. Numbers are generated based on the Numbering Scheme.
       *         number?: string
       *         // The title of the Change Order
       *         title?: string
       *         // The description of the Change Order.
       *         description?: string
       *         // The date and time when the Change Order needs to be approved by.
       *         approveDeadline?: string
       *         // The last time that the Change Order was modified.
       *         lastModifiedDate?: string
       *         lastModifiedUserId?: string
       *         closeDate?: string
       *         // the last time that the Change Order was modified.
       *         lastTouchedDate?: string
       *         entityType?: string
       *         // Number of File Attachments
       *         numberOfAttachments?: number
       *         properties?: Array<{
       *           // Unique identifier for a server-based property definition
       *           propertyDefinitionId?: string
       *           // [title] Property Definition
       *           definition?: {
       *             // Get the unique identifier for a server-based property definition
       *             // [required]
       *             id: string
       *             // The relative URL to access this object.
       *             url?: Url
       *             // Get or sets the Display name for this Property Definition
       *             // [required]
       *             displayName: string
       *             // Get the System Name for this Property Definition.
       *             // [required]
       *             systemName: string
       *             // The value defined in SQL database.
       *             // [required]
       *             dataType: 'String' | 'Numeric' | 'Bool' | 'DateTime' | 'Image'
       *             // Get or sets whether this Property Definition is Active.
       *             active?: boolean
       *             // Get whether or not this is a System Property (as opposed to a UserDefined property)
       *             isSystem?: boolean
       *             // Default Value that will be applied to entities that do not have an existing value associated with this PropertyDefinition
       *             initialValue?: string
       *           }
       *           // The property value associated with the entity and PropertyDefinition
       *           value?: string
       *         }>
       *         // Get the name of the Change Order State.
       *         state?: string
       *         // The color of the state.
       *         stateColor?: number
       *         // Get if the Change Order is currently locked.
       *         isReadOnly?: boolean
       *       }
       *   )[]
       *   included?: {
       *     propertyDefinition?: Record<string, PropertyDefinition>
       *   }
       * }
       * ```
       */
      getFileAssociatedChangeOrders<
        Config extends Alova2MethodConfig<ChangeOrderCollection> & {
          pathParams: {
            /**
             * [required]
             */
            vaultId: string;
            /**
             * [required]
             */
            id: string;
          };
          params: {
            /**
             * Option to skip change orders with closed or cancelled state when if includeClosedECOs is false. Default: option[includeClosedECOs] = false
             */
            'option[includeClosedECOs]'?: boolean;
            /**
             * If true, the response will include additional detailed information for each entity. Examples include:
             *   - For folders (getFolders API), it will return `FolderExtended` instead of `Folder`, which includes additional information such as the parent folder.
             *   - For file versions (getFileVersions API), it will return `FileVersionExtended` instead of `FileVersion`, which includes extra details like the checkout user ID.
             *   - For change orders (getChangeOrders API), it will return `ChangeOrderExtended` instead of `ChangeOrder`, which provides further information such as the list of assignees.
             *   - For property definitions (getPropertyDefinitions API), it will return `PropertyDefinitionExtended` instead of `PropertyDefinition`, which includes extra details like list values.
             */
            'option[extendedModels]'?: boolean;
            /**
             * The properties that need to be returned. property ids separated by ',', e.g. '1,2,3' 'all' means return all properties.
             */
            'option[propDefIds]'?: string;
            /**
             * Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
             *  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
             */
            limit?: number;
            /**
             * Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
             */
            cursorState?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<ChangeOrderCollection, 'vault.getFileAssociatedChangeOrders', Config>;
      /**
       * ---
       *
       * [GET] Get file versions history for given file
       *
       * **path:** /vaults/{vaultId}/files/{id}/versions
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   vaultId: string
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // [title] History Options Enum
       *   // Options for viewing file history.
       *   'option[history]'?: 'All' | 'ReleasedOnly' | 'ReleasedAndRevisionTip' | 'RevisionTip'
       *   // When a Revision has multiple Released versions, only show the tip one. This parameter won't take effect if option[history]=All. Default value is true
       *   'option[onlyShowTipReleasedForEachRev]'?: boolean
       *   // If true, the response will include additional detailed information for each entity. Examples include:
       *   //   - For folders (getFolders API), it will return `FolderExtended` instead of `Folder`, which includes additional information such as the parent folder.
       *   //   - For file versions (getFileVersions API), it will return `FileVersionExtended` instead of `FileVersion`, which includes extra details like the checkout user ID.
       *   //   - For change orders (getChangeOrders API), it will return `ChangeOrderExtended` instead of `ChangeOrder`, which provides further information such as the list of assignees.
       *   //   - For property definitions (getPropertyDefinitions API), it will return `PropertyDefinitionExtended` instead of `PropertyDefinition`, which includes extra details like list values.
       *   'option[extendedModels]'?: boolean
       *   // The properties that need to be returned. property ids separated by ',', e.g. '1,2,3' 'all' means return all properties.
       *   'option[propDefIds]'?: string
       *   // [title] Revision Options Enum
       *   'option[revision]'?: 'AllRevision' | 'CurrentRevision'
       *   // True to return latest file version at top.
       *   descending?: boolean
       *   // Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
       *   //  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
       *   limit?: number
       *   // Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
       *   cursorState?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [title] Cursor-based pagination
       *   pagination?: {
       *     // Limit requested for the current search
       *     limit?: number
       *     // Number of total hits. If this value is larger than the objects returned, then multiple searches will have to be performed to get the complete result set.
       *     totalResults?: number
       *     // [title] Indexing Status
       *     // The status of the indexing engine.
       *     indexingStatus?: 'IndexingComplete' | 'IndexingProperties' | 'IndexingContent' | 'NA'
       *     // Used to continue a search if the results are too large for a single call. Url has bookmark string embedded for subsequent calls on that search
       *     nextUrl?: string
       *   }
       *   results?: (
       *     | object
       *     | {
       *         // File IterationId
       *         // [required]
       *         id: string
       *         // The name of the file. This value applies to all versions of the file
       *         // [required]
       *         name: string
       *         // Category information about this file
       *         category?: string
       *         // Category color
       *         categoryColor?: number
       *         // [title] File Classification Enum
       *         // The classification of the file.
       *         //
       *         //   None,
       *         //   DesignVisualization,
       *         //   DesignDocument,
       *         //   ConfigurationMember,
       *         //   ConfigurationFactory,
       *         //   ElectricalProject,
       *         //   DesignSubstitute,
       *         //   DesignRepresentation,
       *         //   DesignPresentation
       *         classification?:
       *           | 'None'
       *           | 'DesignVisualization'
       *           | 'DesignDocument'
       *           | 'ConfigurationMember'
       *           | 'ConfigurationFactory'
       *           | 'ElectricalProject'
       *           | 'DesignSubstitute'
       *           | 'DesignRepresentation'
       *           | 'DesignPresentation'
       *         entityType?: string
       *         // The version of the file. A file that has just been added to the Vault, will have 1 as its VerNum
       *         version?: number
       *         // Tells the date and time that this version of the file was created in the Vault. For the first version of a file, this date will match CkInDate. For later versions, this value will have the time when the previous version was checked out.
       *         createDate?: string
       *         // The last modified date of the file. This value is set by the client that uploaded the file.
       *         lastModifiedDate?: string
       *         // Revision information about this file.
       *         revision?: string
       *         // The name of the life cycle state for the current file
       *         state?: string
       *         // The color of the state.
       *         stateColor?: number
       *         // FolderId of the parent the current file  resides in
       *         parentFolderId?: string
       *         // [title] File - we cannot directly use File as class name, as it's occupied.
       *         file?: {
       *           // File MasterId
       *           // [required]
       *           id: string
       *           // The relative URL to access this object.
       *           // [required]
       *           url: string
       *           // [title] Version Type Enum
       *           versionType?: 'None' | 'Latest' | 'LatestReleased'
       *           // [title] File Version Extended
       *           // file version extended object
       *           fileVersion?: FileVersionExtended
       *         }
       *         // [title] Folder
       *         // folder object
       *         parent?: {
       *           // Get the unique identifier for this folder
       *           id?: string
       *           // The relative URL to access this object.
       *           url?: Url
       *           // Get the descriptive name for this Folder. This is always the Folder Name without the full path.
       *           name?: string
       *           // Get the full vault path for this folder (ie. $/Folder1)
       *           fullName?: string
       *           // Get the date and time that the folder was created.
       *           createDate?: string
       *           // Get the name of the user who created this folder.
       *           createUserName?: string
       *           // Get the category that is assigned to this folder
       *           category?: string
       *           // Category color
       *           categoryColor?: number
       *           // The name of the life cycle state for the current folder
       *           state?: string
       *           // The color of the state.
       *           stateColor?: number
       *           // Get the number of immediate child folders.
       *           subfolderCount?: number
       *           children?: string
       *           // Get whether or not this folder is a library folder
       *           isLibrary?: boolean
       *           // Get whether this folder can be modified by the logged in user.
       *           isReadOnly?: boolean
       *           // Get if this folder is cloaked. A cloaked object is one that the caller does not have permissions to view.
       *           isCloaked?: boolean
       *           properties?: Array<{
       *             // Unique identifier for a server-based property definition
       *             propertyDefinitionId?: string
       *             // [title] Property Definition
       *             definition?: {
       *               // Get the unique identifier for a server-based property definition
       *               // [required]
       *               id: string
       *               // The relative URL to access this object.
       *               url?: Url
       *               // Get or sets the Display name for this Property Definition
       *               // [required]
       *               displayName: string
       *               // Get the System Name for this Property Definition.
       *               // [required]
       *               systemName: string
       *               // The value defined in SQL database.
       *               // [required]
       *               dataType: 'String' | 'Numeric' | 'Bool' | 'DateTime' | 'Image'
       *               // Get or sets whether this Property Definition is Active.
       *               active?: boolean
       *               // Get whether or not this is a System Property (as opposed to a UserDefined property)
       *               isSystem?: boolean
       *               // Default Value that will be applied to entities that do not have an existing value associated with this PropertyDefinition
       *               initialValue?: string
       *             }
       *             // The property value associated with the entity and PropertyDefinition
       *             value?: string
       *           }>
       *         }
       *         // If true, then the latest version of this file is in the checked-out state
       *         isCheckedOut?: boolean
       *         // The Name of the user who checked-in or uploaded this file.
       *         createUserName?: string
       *         // The date and time that the file was checked in. This property is only valid if isCheckedOut is false.
       *         checkinDate?: string
       *         // The date and time that the file was last checked out
       *         checkoutDate?: string
       *         // User that has the file checked out
       *         checkoutUserName?: string
       *         // The size, in bytes, of the file. This property is only valid if CheckedOut is false.
       *         size?: number
       *         // The relative URL to access this object.
       *         url?: Url
       *         // Flag to determine if valid VizAttachmentStatus (Not None)
       *         hasVisualizationAttachment?: boolean
       *         // [title] File Visualization Attachment Status Enum
       *         // The design visualization attachment status of the file.
       *         //
       *         //   None,
       *         //   Syncronized,
       *         //   NotSyncronized,
       *         //   UserVerified,
       *         //   Legacy
       *         visualizationAttachmentStatus?: 'None' | 'Syncronized' | 'NotSyncronized' | 'UserVerified' | 'Legacy'
       *         isReadOnly?: boolean
       *         // Get if this file is cloaked. A cloaked object is one that the caller does not have permissions to view
       *         isCloaked?: boolean
       *         // Gets whether or not the file is on the local site (in a multi-site environment). This value will always be true on a single-site environment.
       *         isOnSite?: boolean
       *         properties?: Array<Property>
       *       }
       *   )[]
       *   included?: {
       *     folder?: Record<string, Folder>
       *     propertyDefinition?: Record<
       *       string,
       *       {
       *         // Get the unique identifier for a server-based property definition
       *         // [required]
       *         id: string
       *         // The relative URL to access this object.
       *         url?: Url
       *         // Get or sets the Display name for this Property Definition
       *         // [required]
       *         displayName: string
       *         // Get the System Name for this Property Definition.
       *         // [required]
       *         systemName: string
       *         // The value defined in SQL database.
       *         // [required]
       *         dataType: 'String' | 'Numeric' | 'Bool' | 'DateTime' | 'Image'
       *         // Get or sets whether this Property Definition is Active.
       *         active?: boolean
       *         // Get whether or not this is a System Property (as opposed to a UserDefined property)
       *         isSystem?: boolean
       *         // Default Value that will be applied to entities that do not have an existing value associated with this PropertyDefinition
       *         initialValue?: string
       *       }
       *     >
       *   }
       * }
       * ```
       */
      getFileHistory<
        Config extends Alova2MethodConfig<FileVersionCollection> & {
          pathParams: {
            /**
             * [required]
             */
            vaultId: string;
            /**
             * [required]
             */
            id: string;
          };
          params: {
            /**
             * History Options Enum
             * ---
             * Options for viewing file history.
             */
            'option[history]'?: HistoryOptionsEnum;
            /**
             * When a Revision has multiple Released versions, only show the tip one. This parameter won't take effect if option[history]=All. Default value is true
             */
            'option[onlyShowTipReleasedForEachRev]'?: boolean;
            /**
             * If true, the response will include additional detailed information for each entity. Examples include:
             *   - For folders (getFolders API), it will return `FolderExtended` instead of `Folder`, which includes additional information such as the parent folder.
             *   - For file versions (getFileVersions API), it will return `FileVersionExtended` instead of `FileVersion`, which includes extra details like the checkout user ID.
             *   - For change orders (getChangeOrders API), it will return `ChangeOrderExtended` instead of `ChangeOrder`, which provides further information such as the list of assignees.
             *   - For property definitions (getPropertyDefinitions API), it will return `PropertyDefinitionExtended` instead of `PropertyDefinition`, which includes extra details like list values.
             */
            'option[extendedModels]'?: boolean;
            /**
             * The properties that need to be returned. property ids separated by ',', e.g. '1,2,3' 'all' means return all properties.
             */
            'option[propDefIds]'?: string;
            /**
             * Revision Options Enum
             * ---
             */
            'option[revision]'?: RevisionOptionsEnum;
            /**
             * True to return latest file version at top.
             */
            descending?: boolean;
            /**
             * Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
             *  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
             */
            limit?: number;
            /**
             * Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
             */
            cursorState?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<FileVersionCollection, 'vault.getFileHistory', Config>;
      /**
       * ---
       *
       * [GET] Get folder object by its ID
       *
       * **path:** /vaults/{vaultId}/folders/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   vaultId: string
       *   // The numeric folderId. If the id is 'root', return root folder object.
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // Get the unique identifier for this folder
       *   id?: string
       *   // The relative URL to access this object.
       *   url?: Url
       *   // Get the descriptive name for this Folder. This is always the Folder Name without the full path.
       *   name?: string
       *   // Get the full vault path for this folder (ie. $/Folder1)
       *   fullName?: string
       *   // Get the date and time that the folder was created.
       *   createDate?: string
       *   // Get the name of the user who created this folder.
       *   createUserName?: string
       *   // Get the category that is assigned to this folder
       *   category?: string
       *   // Category color
       *   categoryColor?: number
       *   // The name of the life cycle state for the current folder
       *   state?: string
       *   // The color of the state.
       *   stateColor?: number
       *   // Get the number of immediate child folders.
       *   subfolderCount?: number
       *   children?: string
       *   // Get whether or not this folder is a library folder
       *   isLibrary?: boolean
       *   // Get whether this folder can be modified by the logged in user.
       *   isReadOnly?: boolean
       *   // Get if this folder is cloaked. A cloaked object is one that the caller does not have permissions to view.
       *   isCloaked?: boolean
       *   properties?: Array<{
       *     // Unique identifier for a server-based property definition
       *     propertyDefinitionId?: string
       *     // [title] Property Definition
       *     definition?: {
       *       // Get the unique identifier for a server-based property definition
       *       // [required]
       *       id: string
       *       // The relative URL to access this object.
       *       url?: Url
       *       // Get or sets the Display name for this Property Definition
       *       // [required]
       *       displayName: string
       *       // Get the System Name for this Property Definition.
       *       // [required]
       *       systemName: string
       *       // The value defined in SQL database.
       *       // [required]
       *       dataType: 'String' | 'Numeric' | 'Bool' | 'DateTime' | 'Image'
       *       // Get or sets whether this Property Definition is Active.
       *       active?: boolean
       *       // Get whether or not this is a System Property (as opposed to a UserDefined property)
       *       isSystem?: boolean
       *       // Default Value that will be applied to entities that do not have an existing value associated with this PropertyDefinition
       *       initialValue?: string
       *     }
       *     // The property value associated with the entity and PropertyDefinition
       *     value?: string
       *   }>
       * }
       * ```
       */
      getFolderById<
        Config extends Alova2MethodConfig<Folder> & {
          pathParams: {
            /**
             * [required]
             */
            vaultId: string;
            /**
             * The numeric folderId. If the id is 'root', return root folder object.
             * [required]
             */
            id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<Folder, 'vault.getFolderById', Config>;
      /**
       * ---
       *
       * [GET] Get folder contents for folder Id
       *
       * **path:** /vaults/{vaultId}/folders/{id}/contents
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   vaultId: string
       *   // The numeric folderId. If the id is root, the $ folder contents are returned. Note: root is a special keyword
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // The value to use for the search. Based on 'SearchContent' option, this parameter will either search across all properties  or across all properties and content. Ex: q=Assembly, all objects that contain 'Assembly' within their properties will be returned.
       *   q?: string
       *   // Search query text within all properties or both in all properties and content. Default: option[searchContent]=false
       *   'option[searchContent]'?: boolean
       *   // Search sub folders, e.g. option[searchSubFolders]=false. Default value is false
       *   'option[searchSubFolders]'?: boolean
       *   // Option determines if Folder/Folder Link's should be included in the search result. Default value is true
       *   'option[includeFolders]'?: boolean
       *   // Option determines if Item/Change-order Link be included in the search result. Default value is true
       *   'option[includeItemEcoLinks]'?: boolean
       *   // If true, include only file/fileLink that are consumable (released) state. Default value is false
       *   'option[releasedFilesOnly]'?: boolean
       *   // If true, include only itemLink that are consumable state. Default value is false
       *   'option[releasedItemsOnly]'?: boolean
       *   // If true, include only the latest version. Default value is true
       *   'option[latestOnly]'?: boolean
       *   // If true, the response will include additional detailed information for each entity. Examples include:
       *   //   - For folders (getFolders API), it will return `FolderExtended` instead of `Folder`, which includes additional information such as the parent folder.
       *   //   - For file versions (getFileVersions API), it will return `FileVersionExtended` instead of `FileVersion`, which includes extra details like the checkout user ID.
       *   //   - For change orders (getChangeOrders API), it will return `ChangeOrderExtended` instead of `ChangeOrder`, which provides further information such as the list of assignees.
       *   //   - For property definitions (getPropertyDefinitions API), it will return `PropertyDefinitionExtended` instead of `PropertyDefinition`, which includes extra details like list values.
       *   'option[extendedModels]'?: boolean
       *   // The properties that need to be returned. property ids separated by ',', e.g. '1,2,3' 'all' means return all properties.
       *   'option[propDefIds]'?: string
       *   // Specifies sorting criteria for search results. Format: {propertyDefSysName} {sort-order} Accepted values for sort-order: asc, desc.  Ex: sort = Revision desc,Name asc
       *   sort?: string
       *   // Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
       *   //  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
       *   limit?: number
       *   // Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
       *   cursorState?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [title] Cursor-based pagination
       *   pagination?: {
       *     // Limit requested for the current search
       *     limit?: number
       *     // Number of total hits. If this value is larger than the objects returned, then multiple searches will have to be performed to get the complete result set.
       *     totalResults?: number
       *     // [title] Indexing Status
       *     // The status of the indexing engine.
       *     indexingStatus?: 'IndexingComplete' | 'IndexingProperties' | 'IndexingContent' | 'NA'
       *     // Used to continue a search if the results are too large for a single call. Url has bookmark string embedded for subsequent calls on that search
       *     nextUrl?: string
       *   }
       *   results?: unknown[]
       *   included?: {
       *     folder?: Record<
       *       string,
       *       {
       *         // Get the unique identifier for this folder
       *         id?: string
       *         // The relative URL to access this object.
       *         url?: Url
       *         // Get the descriptive name for this Folder. This is always the Folder Name without the full path.
       *         name?: string
       *         // Get the full vault path for this folder (ie. $/Folder1)
       *         fullName?: string
       *         // Get the date and time that the folder was created.
       *         createDate?: string
       *         // Get the name of the user who created this folder.
       *         createUserName?: string
       *         // Get the category that is assigned to this folder
       *         category?: string
       *         // Category color
       *         categoryColor?: number
       *         // The name of the life cycle state for the current folder
       *         state?: string
       *         // The color of the state.
       *         stateColor?: number
       *         // Get the number of immediate child folders.
       *         subfolderCount?: number
       *         children?: string
       *         // Get whether or not this folder is a library folder
       *         isLibrary?: boolean
       *         // Get whether this folder can be modified by the logged in user.
       *         isReadOnly?: boolean
       *         // Get if this folder is cloaked. A cloaked object is one that the caller does not have permissions to view.
       *         isCloaked?: boolean
       *         properties?: Array<{
       *           // Unique identifier for a server-based property definition
       *           propertyDefinitionId?: string
       *           // [title] Property Definition
       *           definition?: {
       *             // Get the unique identifier for a server-based property definition
       *             // [required]
       *             id: string
       *             // The relative URL to access this object.
       *             url?: Url
       *             // Get or sets the Display name for this Property Definition
       *             // [required]
       *             displayName: string
       *             // Get the System Name for this Property Definition.
       *             // [required]
       *             systemName: string
       *             // The value defined in SQL database.
       *             // [required]
       *             dataType: 'String' | 'Numeric' | 'Bool' | 'DateTime' | 'Image'
       *             // Get or sets whether this Property Definition is Active.
       *             active?: boolean
       *             // Get whether or not this is a System Property (as opposed to a UserDefined property)
       *             isSystem?: boolean
       *             // Default Value that will be applied to entities that do not have an existing value associated with this PropertyDefinition
       *             initialValue?: string
       *           }
       *           // The property value associated with the entity and PropertyDefinition
       *           value?: string
       *         }>
       *       }
       *     >
       *     propertyDefinition?: Record<
       *       string,
       *       {
       *         // Get the unique identifier for a server-based property definition
       *         // [required]
       *         id: string
       *         // The relative URL to access this object.
       *         url?: Url
       *         // Get or sets the Display name for this Property Definition
       *         // [required]
       *         displayName: string
       *         // Get the System Name for this Property Definition.
       *         // [required]
       *         systemName: string
       *         // The value defined in SQL database.
       *         // [required]
       *         dataType: 'String' | 'Numeric' | 'Bool' | 'DateTime' | 'Image'
       *         // Get or sets whether this Property Definition is Active.
       *         active?: boolean
       *         // Get whether or not this is a System Property (as opposed to a UserDefined property)
       *         isSystem?: boolean
       *         // Default Value that will be applied to entities that do not have an existing value associated with this PropertyDefinition
       *         initialValue?: string
       *       }
       *     >
       *   }
       * }
       * ```
       */
      getFolderContents<
        Config extends Alova2MethodConfig<EntityCollection> & {
          pathParams: {
            /**
             * [required]
             */
            vaultId: string;
            /**
             * The numeric folderId. If the id is root, the $ folder contents are returned. Note: root is a special keyword
             * [required]
             */
            id: string;
          };
          params: {
            /**
             * The value to use for the search. Based on 'SearchContent' option, this parameter will either search across all properties  or across all properties and content. Ex: q=Assembly, all objects that contain 'Assembly' within their properties will be returned.
             */
            q?: string;
            /**
             * Search query text within all properties or both in all properties and content. Default: option[searchContent]=false
             */
            'option[searchContent]'?: boolean;
            /**
             * Search sub folders, e.g. option[searchSubFolders]=false. Default value is false
             */
            'option[searchSubFolders]'?: boolean;
            /**
             * Option determines if Folder/Folder Link's should be included in the search result. Default value is true
             */
            'option[includeFolders]'?: boolean;
            /**
             * Option determines if Item/Change-order Link be included in the search result. Default value is true
             */
            'option[includeItemEcoLinks]'?: boolean;
            /**
             * If true, include only file/fileLink that are consumable (released) state. Default value is false
             */
            'option[releasedFilesOnly]'?: boolean;
            /**
             * If true, include only itemLink that are consumable state. Default value is false
             */
            'option[releasedItemsOnly]'?: boolean;
            /**
             * If true, include only the latest version. Default value is true
             */
            'option[latestOnly]'?: boolean;
            /**
             * If true, the response will include additional detailed information for each entity. Examples include:
             *   - For folders (getFolders API), it will return `FolderExtended` instead of `Folder`, which includes additional information such as the parent folder.
             *   - For file versions (getFileVersions API), it will return `FileVersionExtended` instead of `FileVersion`, which includes extra details like the checkout user ID.
             *   - For change orders (getChangeOrders API), it will return `ChangeOrderExtended` instead of `ChangeOrder`, which provides further information such as the list of assignees.
             *   - For property definitions (getPropertyDefinitions API), it will return `PropertyDefinitionExtended` instead of `PropertyDefinition`, which includes extra details like list values.
             */
            'option[extendedModels]'?: boolean;
            /**
             * The properties that need to be returned. property ids separated by ',', e.g. '1,2,3' 'all' means return all properties.
             */
            'option[propDefIds]'?: string;
            /**
             * Specifies sorting criteria for search results. Format: {propertyDefSysName} {sort-order} Accepted values for sort-order: asc, desc.  Ex: sort = Revision desc,Name asc
             */
            sort?: string;
            /**
             * Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
             *  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
             */
            limit?: number;
            /**
             * Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
             */
            cursorState?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<EntityCollection, 'vault.getFolderContents', Config>;
      /**
       * ---
       *
       * [GET] Get subfolders for a given folder Id
       *
       * **path:** /vaults/{vaultId}/folders/{id}/sub-folders
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   vaultId: string
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // If true, the response will include additional detailed information for each entity. Examples include:
       *   //   - For folders (getFolders API), it will return `FolderExtended` instead of `Folder`, which includes additional information such as the parent folder.
       *   //   - For file versions (getFileVersions API), it will return `FileVersionExtended` instead of `FileVersion`, which includes extra details like the checkout user ID.
       *   //   - For change orders (getChangeOrders API), it will return `ChangeOrderExtended` instead of `ChangeOrder`, which provides further information such as the list of assignees.
       *   //   - For property definitions (getPropertyDefinitions API), it will return `PropertyDefinitionExtended` instead of `PropertyDefinition`, which includes extra details like list values.
       *   'option[extendedModels]'?: boolean
       *   // The properties that need to be returned. property ids separated by ',', e.g. '1,2,3' 'all' means return all properties.
       *   'option[propDefIds]'?: string
       *   // Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
       *   //  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
       *   limit?: number
       *   // Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
       *   cursorState?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [title] Cursor-based pagination
       *   pagination?: {
       *     // Limit requested for the current search
       *     limit?: number
       *     // Number of total hits. If this value is larger than the objects returned, then multiple searches will have to be performed to get the complete result set.
       *     totalResults?: number
       *     // [title] Indexing Status
       *     // The status of the indexing engine.
       *     indexingStatus?: 'IndexingComplete' | 'IndexingProperties' | 'IndexingContent' | 'NA'
       *     // Used to continue a search if the results are too large for a single call. Url has bookmark string embedded for subsequent calls on that search
       *     nextUrl?: string
       *   }
       *   results?: (
       *     | {
       *         // Get the unique identifier for this folder
       *         id?: string
       *         // The relative URL to access this object.
       *         url?: Url
       *         // Get the descriptive name for this Folder. This is always the Folder Name without the full path.
       *         name?: string
       *         // Get the full vault path for this folder (ie. $/Folder1)
       *         fullName?: string
       *         // Get the date and time that the folder was created.
       *         createDate?: string
       *         // Get the name of the user who created this folder.
       *         createUserName?: string
       *         // Get the category that is assigned to this folder
       *         category?: string
       *         // Category color
       *         categoryColor?: number
       *         // The name of the life cycle state for the current folder
       *         state?: string
       *         // The color of the state.
       *         stateColor?: number
       *         // Get the number of immediate child folders.
       *         subfolderCount?: number
       *         children?: string
       *         // Get whether or not this folder is a library folder
       *         isLibrary?: boolean
       *         // Get whether this folder can be modified by the logged in user.
       *         isReadOnly?: boolean
       *         // Get if this folder is cloaked. A cloaked object is one that the caller does not have permissions to view.
       *         isCloaked?: boolean
       *         properties?: Array<{
       *           // Unique identifier for a server-based property definition
       *           propertyDefinitionId?: string
       *           // [title] Property Definition
       *           definition?: {
       *             // Get the unique identifier for a server-based property definition
       *             // [required]
       *             id: string
       *             // The relative URL to access this object.
       *             url?: Url
       *             // Get or sets the Display name for this Property Definition
       *             // [required]
       *             displayName: string
       *             // Get the System Name for this Property Definition.
       *             // [required]
       *             systemName: string
       *             // The value defined in SQL database.
       *             // [required]
       *             dataType: 'String' | 'Numeric' | 'Bool' | 'DateTime' | 'Image'
       *             // Get or sets whether this Property Definition is Active.
       *             active?: boolean
       *             // Get whether or not this is a System Property (as opposed to a UserDefined property)
       *             isSystem?: boolean
       *             // Default Value that will be applied to entities that do not have an existing value associated with this PropertyDefinition
       *             initialValue?: string
       *           }
       *           // The property value associated with the entity and PropertyDefinition
       *           value?: string
       *         }>
       *       }
       *     | object
       *   )[]
       *   included?: {
       *     folder?: Record<string, Folder>
       *     propertyDefinition?: Record<
       *       string,
       *       {
       *         // Get the unique identifier for a server-based property definition
       *         // [required]
       *         id: string
       *         // The relative URL to access this object.
       *         url?: Url
       *         // Get or sets the Display name for this Property Definition
       *         // [required]
       *         displayName: string
       *         // Get the System Name for this Property Definition.
       *         // [required]
       *         systemName: string
       *         // The value defined in SQL database.
       *         // [required]
       *         dataType: 'String' | 'Numeric' | 'Bool' | 'DateTime' | 'Image'
       *         // Get or sets whether this Property Definition is Active.
       *         active?: boolean
       *         // Get whether or not this is a System Property (as opposed to a UserDefined property)
       *         isSystem?: boolean
       *         // Default Value that will be applied to entities that do not have an existing value associated with this PropertyDefinition
       *         initialValue?: string
       *       }
       *     >
       *   }
       * }
       * ```
       */
      getFolderSubFolders<
        Config extends Alova2MethodConfig<FolderCollection> & {
          pathParams: {
            /**
             * [required]
             */
            vaultId: string;
            /**
             * [required]
             */
            id: string;
          };
          params: {
            /**
             * If true, the response will include additional detailed information for each entity. Examples include:
             *   - For folders (getFolders API), it will return `FolderExtended` instead of `Folder`, which includes additional information such as the parent folder.
             *   - For file versions (getFileVersions API), it will return `FileVersionExtended` instead of `FileVersion`, which includes extra details like the checkout user ID.
             *   - For change orders (getChangeOrders API), it will return `ChangeOrderExtended` instead of `ChangeOrder`, which provides further information such as the list of assignees.
             *   - For property definitions (getPropertyDefinitions API), it will return `PropertyDefinitionExtended` instead of `PropertyDefinition`, which includes extra details like list values.
             */
            'option[extendedModels]'?: boolean;
            /**
             * The properties that need to be returned. property ids separated by ',', e.g. '1,2,3' 'all' means return all properties.
             */
            'option[propDefIds]'?: string;
            /**
             * Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
             *  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
             */
            limit?: number;
            /**
             * Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
             */
            cursorState?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<FolderCollection, 'vault.getFolderSubFolders', Config>;
      /**
       * ---
       *
       * [GET] Get item versions
       *
       * **path:** /vaults/{vaultId}/item-versions
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   vaultId: string
       * }
       * ```
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // The value to use for the search. Based on 'SearchContent' option, this parameter will either search across all properties  or across all properties and content. Ex: q=Assembly, all objects that contain 'Assembly' within their properties will be returned.
       *   q?: string
       *   // The properties that need to be returned. property ids separated by ',', e.g. '1,2,3' 'all' means return all properties.
       *   'option[propDefIds]'?: string
       *   // If true, include only versions that are consumable (released) state. Default value is false
       *   'option[releasedItemsOnly]'?: boolean
       *   // If true, include only the latest version. Default value is true
       *   'option[latestOnly]'?: boolean
       *   // Specifies sorting criteria for search results. Format: {propertyDefSysName} {sort-order} Accepted values for sort-order: asc, desc.  Ex: sort = Revision desc,Name asc
       *   sort?: string
       *   // Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
       *   //  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
       *   limit?: number
       *   // Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
       *   cursorState?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [title] Cursor-based pagination
       *   pagination?: {
       *     // Limit requested for the current search
       *     limit?: number
       *     // Number of total hits. If this value is larger than the objects returned, then multiple searches will have to be performed to get the complete result set.
       *     totalResults?: number
       *     // [title] Indexing Status
       *     // The status of the indexing engine.
       *     indexingStatus?: 'IndexingComplete' | 'IndexingProperties' | 'IndexingContent' | 'NA'
       *     // Used to continue a search if the results are too large for a single call. Url has bookmark string embedded for subsequent calls on that search
       *     nextUrl?: string
       *   }
       *   results?: Array<{
       *     // Item Iteration Id
       *     id?: string
       *     // The relative URL to access this object.
       *     url?: string
       *     // The Item number.
       *     number?: string
       *     // The version number, which is a sequential number given to each version. For example, if this value is 5, then the object is the 5th version.
       *     version?: number
       *     // The display value for the revision.
       *     revision?: string
       *     comment?: string
       *     // The display title.
       *     title?: string
       *     // Life cycle state of the item
       *     state?: string
       *     stateColor?: number
       *     name?: string
       *     // Category assigned to the item
       *     category?: string
       *     categoryColor?: number
       *     entityType?: string
       *     isReadOnly?: boolean
       *     // If true, the logged-in user is restricted from seeing this item.
       *     isCloaked?: boolean
       *     // Flag to check if an latest Item's  version is obsolete
       *     isLatestObsolete?: boolean
       *     // [title] Item
       *     item?: {
       *       // MasterId of the item
       *       // [required]
       *       id: string
       *       // The relative URL to access this object.
       *       // [required]
       *       url: Url
       *       // [title] Version Type Enum
       *       versionType?: 'None' | 'Latest' | 'LatestReleased'
       *       // [title] Item Version
       *       // The unique identifier for the object.
       *       itemVersion?: ItemVersion
       *     }
       *     properties?: Array<{
       *       // Unique identifier for a server-based property definition
       *       propertyDefinitionId?: string
       *       // [title] Property Definition
       *       definition?: {
       *         // Get the unique identifier for a server-based property definition
       *         // [required]
       *         id: string
       *         // The relative URL to access this object.
       *         url?: Url
       *         // Get or sets the Display name for this Property Definition
       *         // [required]
       *         displayName: string
       *         // Get the System Name for this Property Definition.
       *         // [required]
       *         systemName: string
       *         // The value defined in SQL database.
       *         // [required]
       *         dataType: 'String' | 'Numeric' | 'Bool' | 'DateTime' | 'Image'
       *         // Get or sets whether this Property Definition is Active.
       *         active?: boolean
       *         // Get whether or not this is a System Property (as opposed to a UserDefined property)
       *         isSystem?: boolean
       *         // Default Value that will be applied to entities that do not have an existing value associated with this PropertyDefinition
       *         initialValue?: string
       *       }
       *       // The property value associated with the entity and PropertyDefinition
       *       value?: string
       *     }>
       *   }>
       *   included?: {
       *     propertyDefinition?: Record<
       *       string,
       *       {
       *         // Get the unique identifier for a server-based property definition
       *         // [required]
       *         id: string
       *         // The relative URL to access this object.
       *         url?: Url
       *         // Get or sets the Display name for this Property Definition
       *         // [required]
       *         displayName: string
       *         // Get the System Name for this Property Definition.
       *         // [required]
       *         systemName: string
       *         // The value defined in SQL database.
       *         // [required]
       *         dataType: 'String' | 'Numeric' | 'Bool' | 'DateTime' | 'Image'
       *         // Get or sets whether this Property Definition is Active.
       *         active?: boolean
       *         // Get whether or not this is a System Property (as opposed to a UserDefined property)
       *         isSystem?: boolean
       *         // Default Value that will be applied to entities that do not have an existing value associated with this PropertyDefinition
       *         initialValue?: string
       *       }
       *     >
       *   }
       * }
       * ```
       */
      getItemVersions<
        Config extends Alova2MethodConfig<ItemVersionCollection> & {
          pathParams: {
            /**
             * [required]
             */
            vaultId: string;
          };
          params: {
            /**
             * The value to use for the search. Based on 'SearchContent' option, this parameter will either search across all properties  or across all properties and content. Ex: q=Assembly, all objects that contain 'Assembly' within their properties will be returned.
             */
            q?: string;
            /**
             * The properties that need to be returned. property ids separated by ',', e.g. '1,2,3' 'all' means return all properties.
             */
            'option[propDefIds]'?: string;
            /**
             * If true, include only versions that are consumable (released) state. Default value is false
             */
            'option[releasedItemsOnly]'?: boolean;
            /**
             * If true, include only the latest version. Default value is true
             */
            'option[latestOnly]'?: boolean;
            /**
             * Specifies sorting criteria for search results. Format: {propertyDefSysName} {sort-order} Accepted values for sort-order: asc, desc.  Ex: sort = Revision desc,Name asc
             */
            sort?: string;
            /**
             * Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
             *  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
             */
            limit?: number;
            /**
             * Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
             */
            cursorState?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<ItemVersionCollection, 'vault.getItemVersions', Config>;
      /**
       * ---
       *
       * [GET] Get item version by its ID
       *
       * **path:** /vaults/{vaultId}/item-versions/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   vaultId: string
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // Item Iteration Id
       *   id?: string
       *   // The relative URL to access this object.
       *   url?: string
       *   // The Item number.
       *   number?: string
       *   // The version number, which is a sequential number given to each version. For example, if this value is 5, then the object is the 5th version.
       *   version?: number
       *   // The display value for the revision.
       *   revision?: string
       *   comment?: string
       *   // The display title.
       *   title?: string
       *   // Life cycle state of the item
       *   state?: string
       *   stateColor?: number
       *   name?: string
       *   // Category assigned to the item
       *   category?: string
       *   categoryColor?: number
       *   entityType?: string
       *   isReadOnly?: boolean
       *   // If true, the logged-in user is restricted from seeing this item.
       *   isCloaked?: boolean
       *   // Flag to check if an latest Item's  version is obsolete
       *   isLatestObsolete?: boolean
       *   // [title] Item
       *   item?: {
       *     // MasterId of the item
       *     // [required]
       *     id: string
       *     // The relative URL to access this object.
       *     // [required]
       *     url: Url
       *     // [title] Version Type Enum
       *     versionType?: 'None' | 'Latest' | 'LatestReleased'
       *     // [title] Item Version
       *     // The unique identifier for the object.
       *     itemVersion?: ItemVersion
       *   }
       *   properties?: Array<{
       *     // Unique identifier for a server-based property definition
       *     propertyDefinitionId?: string
       *     // [title] Property Definition
       *     definition?: {
       *       // Get the unique identifier for a server-based property definition
       *       // [required]
       *       id: string
       *       // The relative URL to access this object.
       *       url?: Url
       *       // Get or sets the Display name for this Property Definition
       *       // [required]
       *       displayName: string
       *       // Get the System Name for this Property Definition.
       *       // [required]
       *       systemName: string
       *       // The value defined in SQL database.
       *       // [required]
       *       dataType: 'String' | 'Numeric' | 'Bool' | 'DateTime' | 'Image'
       *       // Get or sets whether this Property Definition is Active.
       *       active?: boolean
       *       // Get whether or not this is a System Property (as opposed to a UserDefined property)
       *       isSystem?: boolean
       *       // Default Value that will be applied to entities that do not have an existing value associated with this PropertyDefinition
       *       initialValue?: string
       *     }
       *     // The property value associated with the entity and PropertyDefinition
       *     value?: string
       *   }>
       * }
       * ```
       */
      getItemVersionById<
        Config extends Alova2MethodConfig<ItemVersion> & {
          pathParams: {
            /**
             * [required]
             */
            vaultId: string;
            /**
             * [required]
             */
            id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<ItemVersion, 'vault.getItemVersionById', Config>;
      /**
       * ---
       *
       * [GET] Get all file associations on a given Item id
       *
       * **path:** /vaults/{vaultId}/item-versions/{id}/associated-files
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   vaultId: string
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // If true, the response will include additional detailed information for each entity. Examples include:
       *   //   - For folders (getFolders API), it will return `FolderExtended` instead of `Folder`, which includes additional information such as the parent folder.
       *   //   - For file versions (getFileVersions API), it will return `FileVersionExtended` instead of `FileVersion`, which includes extra details like the checkout user ID.
       *   //   - For change orders (getChangeOrders API), it will return `ChangeOrderExtended` instead of `ChangeOrder`, which provides further information such as the list of assignees.
       *   //   - For property definitions (getPropertyDefinitions API), it will return `PropertyDefinitionExtended` instead of `PropertyDefinition`, which includes extra details like list values.
       *   'option[extendedModels]'?: boolean
       *   // The properties that need to be returned. property ids separated by ',', e.g. '1,2,3' 'all' means return all properties.
       *   'option[propDefIds]'?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [title] Cursor-based pagination
       *   pagination?: {
       *     // Limit requested for the current search
       *     limit?: number
       *     // Number of total hits. If this value is larger than the objects returned, then multiple searches will have to be performed to get the complete result set.
       *     totalResults?: number
       *     // [title] Indexing Status
       *     // The status of the indexing engine.
       *     indexingStatus?: 'IndexingComplete' | 'IndexingProperties' | 'IndexingContent' | 'NA'
       *     // Used to continue a search if the results are too large for a single call. Url has bookmark string embedded for subsequent calls on that search
       *     nextUrl?: string
       *   }
       *   results?: Array<{
       *     // [title] Item Association Type Enum
       *     // Item File Link Types
       *     itemAssociationType?:
       *       | 'Primary'
       *       | 'Secondary'
       *       | 'Tertiary'
       *       | 'StandardComponent'
       *       | 'PrimarySub'
       *       | 'SecondarySub'
       *       | 'PinnedAttachment'
       *       | 'NotPinnedAttachment'
       *     // [title] File Version Extended
       *     // file version extended object
       *     file?: object
       *   }>
       *   included?: {
       *     folder?: Record<
       *       string,
       *       {
       *         // Get the unique identifier for this folder
       *         id?: string
       *         // The relative URL to access this object.
       *         url?: Url
       *         // Get the descriptive name for this Folder. This is always the Folder Name without the full path.
       *         name?: string
       *         // Get the full vault path for this folder (ie. $/Folder1)
       *         fullName?: string
       *         // Get the date and time that the folder was created.
       *         createDate?: string
       *         // Get the name of the user who created this folder.
       *         createUserName?: string
       *         // Get the category that is assigned to this folder
       *         category?: string
       *         // Category color
       *         categoryColor?: number
       *         // The name of the life cycle state for the current folder
       *         state?: string
       *         // The color of the state.
       *         stateColor?: number
       *         // Get the number of immediate child folders.
       *         subfolderCount?: number
       *         children?: string
       *         // Get whether or not this folder is a library folder
       *         isLibrary?: boolean
       *         // Get whether this folder can be modified by the logged in user.
       *         isReadOnly?: boolean
       *         // Get if this folder is cloaked. A cloaked object is one that the caller does not have permissions to view.
       *         isCloaked?: boolean
       *         properties?: Array<{
       *           // Unique identifier for a server-based property definition
       *           propertyDefinitionId?: string
       *           // [title] Property Definition
       *           definition?: {
       *             // Get the unique identifier for a server-based property definition
       *             // [required]
       *             id: string
       *             // The relative URL to access this object.
       *             url?: Url
       *             // Get or sets the Display name for this Property Definition
       *             // [required]
       *             displayName: string
       *             // Get the System Name for this Property Definition.
       *             // [required]
       *             systemName: string
       *             // The value defined in SQL database.
       *             // [required]
       *             dataType: 'String' | 'Numeric' | 'Bool' | 'DateTime' | 'Image'
       *             // Get or sets whether this Property Definition is Active.
       *             active?: boolean
       *             // Get whether or not this is a System Property (as opposed to a UserDefined property)
       *             isSystem?: boolean
       *             // Default Value that will be applied to entities that do not have an existing value associated with this PropertyDefinition
       *             initialValue?: string
       *           }
       *           // The property value associated with the entity and PropertyDefinition
       *           value?: string
       *         }>
       *       }
       *     >
       *     propertyDefinition?: Record<
       *       string,
       *       {
       *         // Get the unique identifier for a server-based property definition
       *         // [required]
       *         id: string
       *         // The relative URL to access this object.
       *         url?: Url
       *         // Get or sets the Display name for this Property Definition
       *         // [required]
       *         displayName: string
       *         // Get the System Name for this Property Definition.
       *         // [required]
       *         systemName: string
       *         // The value defined in SQL database.
       *         // [required]
       *         dataType: 'String' | 'Numeric' | 'Bool' | 'DateTime' | 'Image'
       *         // Get or sets whether this Property Definition is Active.
       *         active?: boolean
       *         // Get whether or not this is a System Property (as opposed to a UserDefined property)
       *         isSystem?: boolean
       *         // Default Value that will be applied to entities that do not have an existing value associated with this PropertyDefinition
       *         initialValue?: string
       *       }
       *     >
       *   }
       * }
       * ```
       */
      getItemVersionAssociatedFiles<
        Config extends Alova2MethodConfig<ItemAssociatedFileVersionCollection> & {
          pathParams: {
            /**
             * [required]
             */
            vaultId: string;
            /**
             * [required]
             */
            id: string;
          };
          params: {
            /**
             * If true, the response will include additional detailed information for each entity. Examples include:
             *   - For folders (getFolders API), it will return `FolderExtended` instead of `Folder`, which includes additional information such as the parent folder.
             *   - For file versions (getFileVersions API), it will return `FileVersionExtended` instead of `FileVersion`, which includes extra details like the checkout user ID.
             *   - For change orders (getChangeOrders API), it will return `ChangeOrderExtended` instead of `ChangeOrder`, which provides further information such as the list of assignees.
             *   - For property definitions (getPropertyDefinitions API), it will return `PropertyDefinitionExtended` instead of `PropertyDefinition`, which includes extra details like list values.
             */
            'option[extendedModels]'?: boolean;
            /**
             * The properties that need to be returned. property ids separated by ',', e.g. '1,2,3' 'all' means return all properties.
             */
            'option[propDefIds]'?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<ItemAssociatedFileVersionCollection, 'vault.getItemVersionAssociatedFiles', Config>;
      /**
       * ---
       *
       * [GET] Get Item Bill of Materials by Id
       *
       * **path:** /vaults/{vaultId}/item-versions/{id}/bill-of-materials
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   vaultId: string
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // [title] BOM Type Enum
       *   // Enum of BOM Type
       *   //
       *   //   Latest,
       *   //   Historic
       *   'option[bomType]'?: 'Latest' | 'Historic'
       *   // The date that it was effective. Default value is DateTime.MinValue
       *   'option[date]'?: string
       *   // Include a linear view of the BOM. Only available for view operations. Default value is false
       *   'option[rolledUp]'?: boolean
       *   // Include only the current level and immediate children. Default value is false
       *   'option[oneLevel]'?: boolean
       *   // Include tree view of the entire BOM. Default value is false
       *   'option[multiLevel]'?: boolean
       *   // Include reference designators. Default value is false
       *   'option[referenceDesignators]'?: boolean
       *   // Include the occurrences. Default value is false
       *   'option[occurrences]'?: boolean
       *   // Include excluded BOM rows. By default, only included BOM rows are returned. Default value is false
       *   'option[excludedBOMLinks]'?: boolean
       *   // Include unassigned components (BOM rows without associated items) in BOM rows. By default, only components with assigned items are included. Default value is false
       *   'option[unassignedComponents]'?: boolean
       *   // If true, include properties on BOM associations. Default value is false
       *   'option[includeBOMAssociationProperty]'?: boolean
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // An array of Items.
       *   itemVersions?: Array<{
       *     // Item Iteration Id
       *     id?: string
       *     // The relative URL to access this object.
       *     url?: string
       *     // The Item number.
       *     number?: string
       *     // The version number, which is a sequential number given to each version. For example, if this value is 5, then the object is the 5th version.
       *     version?: number
       *     // The display value for the revision.
       *     revision?: string
       *     comment?: string
       *     // The display title.
       *     title?: string
       *     // Life cycle state of the item
       *     state?: string
       *     stateColor?: number
       *     name?: string
       *     // Category assigned to the item
       *     category?: string
       *     categoryColor?: number
       *     entityType?: string
       *     isReadOnly?: boolean
       *     // If true, the logged-in user is restricted from seeing this item.
       *     isCloaked?: boolean
       *     // Flag to check if an latest Item's  version is obsolete
       *     isLatestObsolete?: boolean
       *     // [title] Item
       *     item?: {
       *       // MasterId of the item
       *       // [required]
       *       id: string
       *       // The relative URL to access this object.
       *       // [required]
       *       url: Url
       *       // [title] Version Type Enum
       *       versionType?: 'None' | 'Latest' | 'LatestReleased'
       *       // [title] Item Version
       *       // The unique identifier for the object.
       *       itemVersion?: ItemVersion
       *     }
       *     properties?: Array<{
       *       // Unique identifier for a server-based property definition
       *       propertyDefinitionId?: string
       *       // [title] Property Definition
       *       definition?: {
       *         // Get the unique identifier for a server-based property definition
       *         // [required]
       *         id: string
       *         // The relative URL to access this object.
       *         url?: Url
       *         // Get or sets the Display name for this Property Definition
       *         // [required]
       *         displayName: string
       *         // Get the System Name for this Property Definition.
       *         // [required]
       *         systemName: string
       *         // The value defined in SQL database.
       *         // [required]
       *         dataType: 'String' | 'Numeric' | 'Bool' | 'DateTime' | 'Image'
       *         // Get or sets whether this Property Definition is Active.
       *         active?: boolean
       *         // Get whether or not this is a System Property (as opposed to a UserDefined property)
       *         isSystem?: boolean
       *         // Default Value that will be applied to entities that do not have an existing value associated with this PropertyDefinition
       *         initialValue?: string
       *       }
       *       // The property value associated with the entity and PropertyDefinition
       *       value?: string
       *     }>
       *   }>
       *   // The associations between the Items.
       *   itemBomLinks?: Array<{
       *     // Id of the BOM Component (only valid when BOM row is a component - not assigned an item)
       *     bomComponentId?: string
       *     // Indicates if this BOM association is a grouped row of multiple BOM rows
       *     groupedRow?: boolean
       *     // Id of the Multiple Row grouping
       *     groupId?: string
       *     // The unit size for this BOM row
       *     unitSize?: string
       *     // Instance Count of this BOM association
       *     instCount?: string
       *     // Indicates if this BOM row is created and maintained by CAD data or is a manual BOM row
       *     cad?: boolean
       *     // Indicates if this BOM row is included or excluded from the BOM
       *     included?: boolean
       *     // The reference designator ID. This value will be 0 if reference designators are not available.
       *     refDesId?: string
       *     // If true, the child Item has children of its own. If false, the child is a leaf.
       *     childHasChildren?: boolean
       *     // Item association's master Id (does not change between iterations)
       *     bomLinkMasterId?: string
       *     // The order that the child entry shows up in the BOM.
       *     bomOrder?: string
       *     // The display name for the Unit of Measure on CldItemUsage.
       *     units?: string
       *     // BOM row quantity
       *     quantity?: string
       *     // The ID of the child Item.
       *     childItemId?: string
       *     // The ID of the parent Item.
       *     parentItemId?: string
       *     // The ID for the object.
       *     id?: string
       *     parentMasterChildMasterAndRefDesMaster?: string
       *     childMasterAndRefDesMaster?: string
       *     // If true, the dependency is static. If false, the dependency is computed.
       *     isStatic?: boolean
       *     // Assigned BOM row position number
       *     positionNumber?: string
       *     properties?: Array<{
       *       // Unique identifier for a server-based property definition
       *       propertyDefinitionId?: string
       *       // [title] Property Definition
       *       definition?: {
       *         // Get the unique identifier for a server-based property definition
       *         // [required]
       *         id: string
       *         // The relative URL to access this object.
       *         url?: Url
       *         // Get or sets the Display name for this Property Definition
       *         // [required]
       *         displayName: string
       *         // Get the System Name for this Property Definition.
       *         // [required]
       *         systemName: string
       *         // The value defined in SQL database.
       *         // [required]
       *         dataType: 'String' | 'Numeric' | 'Bool' | 'DateTime' | 'Image'
       *         // Get or sets whether this Property Definition is Active.
       *         active?: boolean
       *         // Get whether or not this is a System Property (as opposed to a UserDefined property)
       *         isSystem?: boolean
       *         // Default Value that will be applied to entities that do not have an existing value associated with this PropertyDefinition
       *         initialValue?: string
       *       }
       *       // The property value associated with the entity and PropertyDefinition
       *       value?: string
       *     }>
       *   }>
       *   // If true, reference designators are available.
       *   referenceDesignatorsAvailable?: boolean
       *   // An array of occurrences.
       *   occurrences?: Array<{
       *     // The top most Item of the BOM.
       *     rootItemId?: string
       *     // A unique identifier for this occurrence within the Item BOM.
       *     id?: string
       *     // The immediate parent. -1 means no parent occurrence.
       *     parentOccurrenceId?: string
       *     bomLinkMasterId?: string
       *     // The position on the BOM.
       *     position?: string
       *     // The value of the occurrence. Also known as the 'Detail Id.'
       *     detailId?: string
       *     // The path to the occurrence in the BOM. The format is the list of Item Master IDs separated by the '/' delimiter.
       *     path?: string
       *   }>
       *   // Array of BOM components in this BOM
       *   bOMComponents?: Array<{
       *     // Indicates if a BOM component is cloaked
       *     isCloaked?: boolean
       *     // [title] BOM Structure Enum
       *     // An enumerated value representing the BOMStructure value of Component.
       *     //
       *     //   Normal = 0,
       *     //   Purchased = 1,
       *     //   Inseperable = 2,
       *     //   Phantom = 3,
       *     //   Reference = 4,
       *     //   DynamicPhantom = 5
       *     bOMStructure?: 'Normal' | 'Purchased' | 'Inseperable' | 'Phantom' | 'Reference' | 'DynamicPhantom'
       *     // A numeric value quantifying a single instance of the Component. For Components with discreet quantities, "1" should always be used. For measured quantities, a positive decimal value can be used. For example, a rod cut to 3.5 feet would have a BaseUOM of "foot" and a BaseQty of "3.5".
       *     baseQty?: string
       *     // The Unit of Measure the Component is quantified with. For discreet quantities, "Each" should be used. For measured quantities, a length (inch, cm, foot, etc.) volume (ounce, ml, liter, quart, etc.) or mass (gram, pound, kg, etc.) unit of measure should be used.
       *     baseUOM?: string
       *     // [title] Component Type Enum
       *     // An enumerated value specifying the type of component.  Enum of Component Type
       *     //
       *     //   Part = 1,
       *     //   Assembly = 2,
       *     //   Virtual = 3,
       *     //   Standard = 4,
       *     //   Purchased = 5,
       *     //   Document = 6
       *     componentType?: 'Part' | 'Assembly' | 'Virtual' | 'Standard' | 'Purchased' | 'Document'
       *     // The name of this component.
       *     name?: string
       *     // [title] XRef Type Enum
       *     // An enumerated value that specifies whether the Component is internal or external in relation to the design file.
       *     // Enum of XRefType
       *     //
       *     //   Internal = 0,
       *     //   External = 1
       *     xRefType?: 'Internal' | 'External'
       *     // Unique data within the scope of the design file used to identify the Component. For Inventor files, the GUID used to identify the Component is used (or GUID plus VirtualComponentDefinition._PropertySetsId for Virtual components). For DWG files, the HandleID associated with the Component is used.
       *     uniqueId?: string
       *     id?: string
       *     // For Components with a XRefType of "external", XRefID represents the FileID of the design file associated with that component. For "internal" Components, XRefID should be set to -1.
       *     xRefId?: string
       *   }>
       * }
       * ```
       */
      getItemVersionBom<
        Config extends Alova2MethodConfig<BOMLinksAndRevisions> & {
          pathParams: {
            /**
             * [required]
             */
            vaultId: string;
            /**
             * [required]
             */
            id: string;
          };
          params: {
            /**
             * BOM Type Enum
             * ---
             * Enum of BOM Type
             *
             *   Latest,
             *   Historic
             */
            'option[bomType]'?: BOMTypeEnum;
            /**
             * The date that it was effective. Default value is DateTime.MinValue
             */
            'option[date]'?: string;
            /**
             * Include a linear view of the BOM. Only available for view operations. Default value is false
             */
            'option[rolledUp]'?: boolean;
            /**
             * Include only the current level and immediate children. Default value is false
             */
            'option[oneLevel]'?: boolean;
            /**
             * Include tree view of the entire BOM. Default value is false
             */
            'option[multiLevel]'?: boolean;
            /**
             * Include reference designators. Default value is false
             */
            'option[referenceDesignators]'?: boolean;
            /**
             * Include the occurrences. Default value is false
             */
            'option[occurrences]'?: boolean;
            /**
             * Include excluded BOM rows. By default, only included BOM rows are returned. Default value is false
             */
            'option[excludedBOMLinks]'?: boolean;
            /**
             * Include unassigned components (BOM rows without associated items) in BOM rows. By default, only components with assigned items are included. Default value is false
             */
            'option[unassignedComponents]'?: boolean;
            /**
             * If true, include properties on BOM associations. Default value is false
             */
            'option[includeBOMAssociationProperty]'?: boolean;
          };
        }
      >(
        config: Config
      ): Alova2Method<BOMLinksAndRevisions, 'vault.getItemVersionBom', Config>;
      /**
       * ---
       *
       * [GET] Get Item where used by Id
       *
       * **path:** /vaults/{vaultId}/item-versions/{id}/parents
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   vaultId: string
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // [title] BOM Type Enum
       *   // Enum of BOM Type
       *   //
       *   //   Latest,
       *   //   Historic
       *   'option[bomType]'?: 'Latest' | 'Historic'
       *   // The date that it was effective
       *   'option[date]'?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // An array of Items.
       *   itemVersions?: Array<{
       *     // Item Iteration Id
       *     id?: string
       *     // The relative URL to access this object.
       *     url?: string
       *     // The Item number.
       *     number?: string
       *     // The version number, which is a sequential number given to each version. For example, if this value is 5, then the object is the 5th version.
       *     version?: number
       *     // The display value for the revision.
       *     revision?: string
       *     comment?: string
       *     // The display title.
       *     title?: string
       *     // Life cycle state of the item
       *     state?: string
       *     stateColor?: number
       *     name?: string
       *     // Category assigned to the item
       *     category?: string
       *     categoryColor?: number
       *     entityType?: string
       *     isReadOnly?: boolean
       *     // If true, the logged-in user is restricted from seeing this item.
       *     isCloaked?: boolean
       *     // Flag to check if an latest Item's  version is obsolete
       *     isLatestObsolete?: boolean
       *     // [title] Item
       *     item?: {
       *       // MasterId of the item
       *       // [required]
       *       id: string
       *       // The relative URL to access this object.
       *       // [required]
       *       url: Url
       *       // [title] Version Type Enum
       *       versionType?: 'None' | 'Latest' | 'LatestReleased'
       *       // [title] Item Version
       *       // The unique identifier for the object.
       *       itemVersion?: ItemVersion
       *     }
       *     properties?: Array<{
       *       // Unique identifier for a server-based property definition
       *       propertyDefinitionId?: string
       *       // [title] Property Definition
       *       definition?: {
       *         // Get the unique identifier for a server-based property definition
       *         // [required]
       *         id: string
       *         // The relative URL to access this object.
       *         url?: Url
       *         // Get or sets the Display name for this Property Definition
       *         // [required]
       *         displayName: string
       *         // Get the System Name for this Property Definition.
       *         // [required]
       *         systemName: string
       *         // The value defined in SQL database.
       *         // [required]
       *         dataType: 'String' | 'Numeric' | 'Bool' | 'DateTime' | 'Image'
       *         // Get or sets whether this Property Definition is Active.
       *         active?: boolean
       *         // Get whether or not this is a System Property (as opposed to a UserDefined property)
       *         isSystem?: boolean
       *         // Default Value that will be applied to entities that do not have an existing value associated with this PropertyDefinition
       *         initialValue?: string
       *       }
       *       // The property value associated with the entity and PropertyDefinition
       *       value?: string
       *     }>
       *   }>
       *   // The associations between the Items.
       *   itemBomLinks?: Array<{
       *     // Id of the BOM Component (only valid when BOM row is a component - not assigned an item)
       *     bomComponentId?: string
       *     // Indicates if this BOM association is a grouped row of multiple BOM rows
       *     groupedRow?: boolean
       *     // Id of the Multiple Row grouping
       *     groupId?: string
       *     // The unit size for this BOM row
       *     unitSize?: string
       *     // Instance Count of this BOM association
       *     instCount?: string
       *     // Indicates if this BOM row is created and maintained by CAD data or is a manual BOM row
       *     cad?: boolean
       *     // Indicates if this BOM row is included or excluded from the BOM
       *     included?: boolean
       *     // The reference designator ID. This value will be 0 if reference designators are not available.
       *     refDesId?: string
       *     // If true, the child Item has children of its own. If false, the child is a leaf.
       *     childHasChildren?: boolean
       *     // Item association's master Id (does not change between iterations)
       *     bomLinkMasterId?: string
       *     // The order that the child entry shows up in the BOM.
       *     bomOrder?: string
       *     // The display name for the Unit of Measure on CldItemUsage.
       *     units?: string
       *     // BOM row quantity
       *     quantity?: string
       *     // The ID of the child Item.
       *     childItemId?: string
       *     // The ID of the parent Item.
       *     parentItemId?: string
       *     // The ID for the object.
       *     id?: string
       *     parentMasterChildMasterAndRefDesMaster?: string
       *     childMasterAndRefDesMaster?: string
       *     // If true, the dependency is static. If false, the dependency is computed.
       *     isStatic?: boolean
       *     // Assigned BOM row position number
       *     positionNumber?: string
       *     properties?: Array<{
       *       // Unique identifier for a server-based property definition
       *       propertyDefinitionId?: string
       *       // [title] Property Definition
       *       definition?: {
       *         // Get the unique identifier for a server-based property definition
       *         // [required]
       *         id: string
       *         // The relative URL to access this object.
       *         url?: Url
       *         // Get or sets the Display name for this Property Definition
       *         // [required]
       *         displayName: string
       *         // Get the System Name for this Property Definition.
       *         // [required]
       *         systemName: string
       *         // The value defined in SQL database.
       *         // [required]
       *         dataType: 'String' | 'Numeric' | 'Bool' | 'DateTime' | 'Image'
       *         // Get or sets whether this Property Definition is Active.
       *         active?: boolean
       *         // Get whether or not this is a System Property (as opposed to a UserDefined property)
       *         isSystem?: boolean
       *         // Default Value that will be applied to entities that do not have an existing value associated with this PropertyDefinition
       *         initialValue?: string
       *       }
       *       // The property value associated with the entity and PropertyDefinition
       *       value?: string
       *     }>
       *   }>
       *   // If true, reference designators are available.
       *   referenceDesignatorsAvailable?: boolean
       *   // An array of occurrences.
       *   occurrences?: Array<{
       *     // The top most Item of the BOM.
       *     rootItemId?: string
       *     // A unique identifier for this occurrence within the Item BOM.
       *     id?: string
       *     // The immediate parent. -1 means no parent occurrence.
       *     parentOccurrenceId?: string
       *     bomLinkMasterId?: string
       *     // The position on the BOM.
       *     position?: string
       *     // The value of the occurrence. Also known as the 'Detail Id.'
       *     detailId?: string
       *     // The path to the occurrence in the BOM. The format is the list of Item Master IDs separated by the '/' delimiter.
       *     path?: string
       *   }>
       *   // Array of BOM components in this BOM
       *   bOMComponents?: Array<{
       *     // Indicates if a BOM component is cloaked
       *     isCloaked?: boolean
       *     // [title] BOM Structure Enum
       *     // An enumerated value representing the BOMStructure value of Component.
       *     //
       *     //   Normal = 0,
       *     //   Purchased = 1,
       *     //   Inseperable = 2,
       *     //   Phantom = 3,
       *     //   Reference = 4,
       *     //   DynamicPhantom = 5
       *     bOMStructure?: 'Normal' | 'Purchased' | 'Inseperable' | 'Phantom' | 'Reference' | 'DynamicPhantom'
       *     // A numeric value quantifying a single instance of the Component. For Components with discreet quantities, "1" should always be used. For measured quantities, a positive decimal value can be used. For example, a rod cut to 3.5 feet would have a BaseUOM of "foot" and a BaseQty of "3.5".
       *     baseQty?: string
       *     // The Unit of Measure the Component is quantified with. For discreet quantities, "Each" should be used. For measured quantities, a length (inch, cm, foot, etc.) volume (ounce, ml, liter, quart, etc.) or mass (gram, pound, kg, etc.) unit of measure should be used.
       *     baseUOM?: string
       *     // [title] Component Type Enum
       *     // An enumerated value specifying the type of component.  Enum of Component Type
       *     //
       *     //   Part = 1,
       *     //   Assembly = 2,
       *     //   Virtual = 3,
       *     //   Standard = 4,
       *     //   Purchased = 5,
       *     //   Document = 6
       *     componentType?: 'Part' | 'Assembly' | 'Virtual' | 'Standard' | 'Purchased' | 'Document'
       *     // The name of this component.
       *     name?: string
       *     // [title] XRef Type Enum
       *     // An enumerated value that specifies whether the Component is internal or external in relation to the design file.
       *     // Enum of XRefType
       *     //
       *     //   Internal = 0,
       *     //   External = 1
       *     xRefType?: 'Internal' | 'External'
       *     // Unique data within the scope of the design file used to identify the Component. For Inventor files, the GUID used to identify the Component is used (or GUID plus VirtualComponentDefinition._PropertySetsId for Virtual components). For DWG files, the HandleID associated with the Component is used.
       *     uniqueId?: string
       *     id?: string
       *     // For Components with a XRefType of "external", XRefID represents the FileID of the design file associated with that component. For "internal" Components, XRefID should be set to -1.
       *     xRefId?: string
       *   }>
       * }
       * ```
       */
      getItemVersionWhereUsed<
        Config extends Alova2MethodConfig<BOMLinksAndRevisions> & {
          pathParams: {
            /**
             * [required]
             */
            vaultId: string;
            /**
             * [required]
             */
            id: string;
          };
          params: {
            /**
             * BOM Type Enum
             * ---
             * Enum of BOM Type
             *
             *   Latest,
             *   Historic
             */
            'option[bomType]'?: BOMTypeEnum;
            /**
             * The date that it was effective
             */
            'option[date]'?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<BOMLinksAndRevisions, 'vault.getItemVersionWhereUsed', Config>;
      /**
       * ---
       *
       * [GET] Get Thumbnail for specific item version
       *
       * **path:** /vaults/{vaultId}/item-versions/{id}/thumbnail
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   vaultId: string
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = Blob
       * ```
       */
      getItemVersionThumbnail<
        Config extends Alova2MethodConfig<Blob> & {
          pathParams: {
            /**
             * [required]
             */
            vaultId: string;
            /**
             * [required]
             */
            id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<Blob, 'vault.getItemVersionThumbnail', Config>;
      /**
       * ---
       *
       * [GET] Get all Items
       *
       * **path:** /vaults/{vaultId}/items
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   vaultId: string
       * }
       * ```
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
       *   //  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
       *   limit?: number
       *   // Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
       *   cursorState?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [title] Cursor-based pagination
       *   pagination?: {
       *     // Limit requested for the current search
       *     limit?: number
       *     // Number of total hits. If this value is larger than the objects returned, then multiple searches will have to be performed to get the complete result set.
       *     totalResults?: number
       *     // [title] Indexing Status
       *     // The status of the indexing engine.
       *     indexingStatus?: 'IndexingComplete' | 'IndexingProperties' | 'IndexingContent' | 'NA'
       *     // Used to continue a search if the results are too large for a single call. Url has bookmark string embedded for subsequent calls on that search
       *     nextUrl?: string
       *   }
       *   // [title] Item
       *   results?: {
       *     // MasterId of the item
       *     // [required]
       *     id: string
       *     // The relative URL to access this object.
       *     // [required]
       *     url: Url
       *     // [title] Version Type Enum
       *     versionType?: 'None' | 'Latest' | 'LatestReleased'
       *     // [title] Item Version
       *     // The unique identifier for the object.
       *     itemVersion?: ItemVersion
       *   }
       *   included?: {
       *     propertyDefinition?: Record<
       *       string,
       *       {
       *         // Get the unique identifier for a server-based property definition
       *         // [required]
       *         id: string
       *         // The relative URL to access this object.
       *         url?: Url
       *         // Get or sets the Display name for this Property Definition
       *         // [required]
       *         displayName: string
       *         // Get the System Name for this Property Definition.
       *         // [required]
       *         systemName: string
       *         // The value defined in SQL database.
       *         // [required]
       *         dataType: 'String' | 'Numeric' | 'Bool' | 'DateTime' | 'Image'
       *         // Get or sets whether this Property Definition is Active.
       *         active?: boolean
       *         // Get whether or not this is a System Property (as opposed to a UserDefined property)
       *         isSystem?: boolean
       *         // Default Value that will be applied to entities that do not have an existing value associated with this PropertyDefinition
       *         initialValue?: string
       *       }
       *     >
       *   }
       * }
       * ```
       */
      getItems<
        Config extends Alova2MethodConfig<ItemCollection> & {
          pathParams: {
            /**
             * [required]
             */
            vaultId: string;
          };
          params: {
            /**
             * Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
             *  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
             */
            limit?: number;
            /**
             * Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
             */
            cursorState?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<ItemCollection, 'vault.getItems', Config>;
      /**
       * ---
       *
       * [GET] Get Item By Id
       *
       * **path:** /vaults/{vaultId}/items/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   vaultId: string
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // Option determines if tip item revision (releaseOnly=false) or latest consumable(released) item revision  be returned. Default: option[releasedOnly]=false
       *   'option[releasedOnly]'?: boolean
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // MasterId of the item
       *   // [required]
       *   id: string
       *   // The relative URL to access this object.
       *   // [required]
       *   url: Url
       *   // [title] Version Type Enum
       *   versionType?: 'None' | 'Latest' | 'LatestReleased'
       *   // [title] Item Version
       *   // The unique identifier for the object.
       *   itemVersion?: ItemVersion
       * }
       * ```
       */
      getItemById<
        Config extends Alova2MethodConfig<Item> & {
          pathParams: {
            /**
             * [required]
             */
            vaultId: string;
            /**
             * [required]
             */
            id: string;
          };
          params: {
            /**
             * Option determines if tip item revision (releaseOnly=false) or latest consumable(released) item revision  be returned. Default: option[releasedOnly]=false
             */
            'option[releasedOnly]'?: boolean;
          };
        }
      >(
        config: Config
      ): Alova2Method<Item, 'vault.getItemById', Config>;
      /**
       * ---
       *
       * [GET] Get item associated Change Orders
       *
       * **path:** /vaults/{vaultId}/items/{id}/change-orders
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   vaultId: string
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // Option determines if change order with closed or cancelled state be skipped if false. Default: option[includeClosedECOs] = false
       *   'option[includeClosedECOs]'?: boolean
       *   // If true, the response will include additional detailed information for each entity. Examples include:
       *   //   - For folders (getFolders API), it will return `FolderExtended` instead of `Folder`, which includes additional information such as the parent folder.
       *   //   - For file versions (getFileVersions API), it will return `FileVersionExtended` instead of `FileVersion`, which includes extra details like the checkout user ID.
       *   //   - For change orders (getChangeOrders API), it will return `ChangeOrderExtended` instead of `ChangeOrder`, which provides further information such as the list of assignees.
       *   //   - For property definitions (getPropertyDefinitions API), it will return `PropertyDefinitionExtended` instead of `PropertyDefinition`, which includes extra details like list values.
       *   'option[extendedModels]'?: boolean
       *   // The properties that need to be returned. property ids separated by ',', e.g. '1,2,3' 'all' means return all properties.
       *   'option[propDefIds]'?: string
       *   // Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
       *   //  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
       *   limit?: number
       *   // Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
       *   cursorState?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [title] Cursor-based pagination
       *   pagination?: {
       *     // Limit requested for the current search
       *     limit?: number
       *     // Number of total hits. If this value is larger than the objects returned, then multiple searches will have to be performed to get the complete result set.
       *     totalResults?: number
       *     // [title] Indexing Status
       *     // The status of the indexing engine.
       *     indexingStatus?: 'IndexingComplete' | 'IndexingProperties' | 'IndexingContent' | 'NA'
       *     // Used to continue a search if the results are too large for a single call. Url has bookmark string embedded for subsequent calls on that search
       *     nextUrl?: string
       *   }
       *   results?: (
       *     | object
       *     | {
       *         // Master Id of this Change Order. The Master Id uniquely identifies this Change Order object
       *         id?: string
       *         // The relative URL to access this object.
       *         url?: string
       *         // The descriptive name for this Change Order.The Change Order Number will be used here.
       *         name?: string
       *         // The date and time the Change Order was created
       *         createDate?: string
       *         // The Change Order number. Numbers are generated based on the Numbering Scheme.
       *         number?: string
       *         // The title of the Change Order
       *         title?: string
       *         // The description of the Change Order.
       *         description?: string
       *         // The date and time when the Change Order needs to be approved by.
       *         approveDeadline?: string
       *         // The last time that the Change Order was modified.
       *         lastModifiedDate?: string
       *         lastModifiedUserId?: string
       *         closeDate?: string
       *         // the last time that the Change Order was modified.
       *         lastTouchedDate?: string
       *         entityType?: string
       *         // Number of File Attachments
       *         numberOfAttachments?: number
       *         properties?: Array<{
       *           // Unique identifier for a server-based property definition
       *           propertyDefinitionId?: string
       *           // [title] Property Definition
       *           definition?: {
       *             // Get the unique identifier for a server-based property definition
       *             // [required]
       *             id: string
       *             // The relative URL to access this object.
       *             url?: Url
       *             // Get or sets the Display name for this Property Definition
       *             // [required]
       *             displayName: string
       *             // Get the System Name for this Property Definition.
       *             // [required]
       *             systemName: string
       *             // The value defined in SQL database.
       *             // [required]
       *             dataType: 'String' | 'Numeric' | 'Bool' | 'DateTime' | 'Image'
       *             // Get or sets whether this Property Definition is Active.
       *             active?: boolean
       *             // Get whether or not this is a System Property (as opposed to a UserDefined property)
       *             isSystem?: boolean
       *             // Default Value that will be applied to entities that do not have an existing value associated with this PropertyDefinition
       *             initialValue?: string
       *           }
       *           // The property value associated with the entity and PropertyDefinition
       *           value?: string
       *         }>
       *         // Get the name of the Change Order State.
       *         state?: string
       *         // The color of the state.
       *         stateColor?: number
       *         // Get if the Change Order is currently locked.
       *         isReadOnly?: boolean
       *       }
       *   )[]
       *   included?: {
       *     propertyDefinition?: Record<string, PropertyDefinition>
       *   }
       * }
       * ```
       */
      getItemAssociatedChangeOrders<
        Config extends Alova2MethodConfig<ChangeOrderCollection> & {
          pathParams: {
            /**
             * [required]
             */
            vaultId: string;
            /**
             * [required]
             */
            id: string;
          };
          params: {
            /**
             * Option determines if change order with closed or cancelled state be skipped if false. Default: option[includeClosedECOs] = false
             */
            'option[includeClosedECOs]'?: boolean;
            /**
             * If true, the response will include additional detailed information for each entity. Examples include:
             *   - For folders (getFolders API), it will return `FolderExtended` instead of `Folder`, which includes additional information such as the parent folder.
             *   - For file versions (getFileVersions API), it will return `FileVersionExtended` instead of `FileVersion`, which includes extra details like the checkout user ID.
             *   - For change orders (getChangeOrders API), it will return `ChangeOrderExtended` instead of `ChangeOrder`, which provides further information such as the list of assignees.
             *   - For property definitions (getPropertyDefinitions API), it will return `PropertyDefinitionExtended` instead of `PropertyDefinition`, which includes extra details like list values.
             */
            'option[extendedModels]'?: boolean;
            /**
             * The properties that need to be returned. property ids separated by ',', e.g. '1,2,3' 'all' means return all properties.
             */
            'option[propDefIds]'?: string;
            /**
             * Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
             *  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
             */
            limit?: number;
            /**
             * Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
             */
            cursorState?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<ChangeOrderCollection, 'vault.getItemAssociatedChangeOrders', Config>;
      /**
       * ---
       *
       * [GET] Get item history by Id
       *
       * **path:** /vaults/{vaultId}/items/{id}/versions
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   vaultId: string
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // [title] History Options Enum
       *   // Options for viewing file history.
       *   'option[history]'?: 'All' | 'ReleasedOnly' | 'ReleasedAndRevisionTip' | 'RevisionTip'
       *   // If true, the response will include additional detailed information for each entity. Examples include:
       *   //   - For folders (getFolders API), it will return `FolderExtended` instead of `Folder`, which includes additional information such as the parent folder.
       *   //   - For file versions (getFileVersions API), it will return `FileVersionExtended` instead of `FileVersion`, which includes extra details like the checkout user ID.
       *   //   - For change orders (getChangeOrders API), it will return `ChangeOrderExtended` instead of `ChangeOrder`, which provides further information such as the list of assignees.
       *   //   - For property definitions (getPropertyDefinitions API), it will return `PropertyDefinitionExtended` instead of `PropertyDefinition`, which includes extra details like list values.
       *   'option[extendedModels]'?: boolean
       *   // The properties that need to be returned. property ids separated by ',', e.g. '1,2,3' 'all' means return all properties.
       *   'option[propDefIds]'?: string
       *   // True to return latest file version at top.
       *   descending?: boolean
       *   // Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
       *   //  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
       *   limit?: number
       *   // Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
       *   cursorState?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [title] Cursor-based pagination
       *   pagination?: {
       *     // Limit requested for the current search
       *     limit?: number
       *     // Number of total hits. If this value is larger than the objects returned, then multiple searches will have to be performed to get the complete result set.
       *     totalResults?: number
       *     // [title] Indexing Status
       *     // The status of the indexing engine.
       *     indexingStatus?: 'IndexingComplete' | 'IndexingProperties' | 'IndexingContent' | 'NA'
       *     // Used to continue a search if the results are too large for a single call. Url has bookmark string embedded for subsequent calls on that search
       *     nextUrl?: string
       *   }
       *   results?: Array<{
       *     // Item Iteration Id
       *     id?: string
       *     // The relative URL to access this object.
       *     url?: string
       *     // The Item number.
       *     number?: string
       *     // The version number, which is a sequential number given to each version. For example, if this value is 5, then the object is the 5th version.
       *     version?: number
       *     // The display value for the revision.
       *     revision?: string
       *     comment?: string
       *     // The display title.
       *     title?: string
       *     // Life cycle state of the item
       *     state?: string
       *     stateColor?: number
       *     name?: string
       *     // Category assigned to the item
       *     category?: string
       *     categoryColor?: number
       *     entityType?: string
       *     isReadOnly?: boolean
       *     // If true, the logged-in user is restricted from seeing this item.
       *     isCloaked?: boolean
       *     // Flag to check if an latest Item's  version is obsolete
       *     isLatestObsolete?: boolean
       *     // [title] Item
       *     item?: {
       *       // MasterId of the item
       *       // [required]
       *       id: string
       *       // The relative URL to access this object.
       *       // [required]
       *       url: Url
       *       // [title] Version Type Enum
       *       versionType?: 'None' | 'Latest' | 'LatestReleased'
       *       // [title] Item Version
       *       // The unique identifier for the object.
       *       itemVersion?: ItemVersion
       *     }
       *     properties?: Array<{
       *       // Unique identifier for a server-based property definition
       *       propertyDefinitionId?: string
       *       // [title] Property Definition
       *       definition?: {
       *         // Get the unique identifier for a server-based property definition
       *         // [required]
       *         id: string
       *         // The relative URL to access this object.
       *         url?: Url
       *         // Get or sets the Display name for this Property Definition
       *         // [required]
       *         displayName: string
       *         // Get the System Name for this Property Definition.
       *         // [required]
       *         systemName: string
       *         // The value defined in SQL database.
       *         // [required]
       *         dataType: 'String' | 'Numeric' | 'Bool' | 'DateTime' | 'Image'
       *         // Get or sets whether this Property Definition is Active.
       *         active?: boolean
       *         // Get whether or not this is a System Property (as opposed to a UserDefined property)
       *         isSystem?: boolean
       *         // Default Value that will be applied to entities that do not have an existing value associated with this PropertyDefinition
       *         initialValue?: string
       *       }
       *       // The property value associated with the entity and PropertyDefinition
       *       value?: string
       *     }>
       *   }>
       *   included?: {
       *     propertyDefinition?: Record<
       *       string,
       *       {
       *         // Get the unique identifier for a server-based property definition
       *         // [required]
       *         id: string
       *         // The relative URL to access this object.
       *         url?: Url
       *         // Get or sets the Display name for this Property Definition
       *         // [required]
       *         displayName: string
       *         // Get the System Name for this Property Definition.
       *         // [required]
       *         systemName: string
       *         // The value defined in SQL database.
       *         // [required]
       *         dataType: 'String' | 'Numeric' | 'Bool' | 'DateTime' | 'Image'
       *         // Get or sets whether this Property Definition is Active.
       *         active?: boolean
       *         // Get whether or not this is a System Property (as opposed to a UserDefined property)
       *         isSystem?: boolean
       *         // Default Value that will be applied to entities that do not have an existing value associated with this PropertyDefinition
       *         initialValue?: string
       *       }
       *     >
       *   }
       * }
       * ```
       */
      getItemHistory<
        Config extends Alova2MethodConfig<ItemVersionCollection> & {
          pathParams: {
            /**
             * [required]
             */
            vaultId: string;
            /**
             * [required]
             */
            id: string;
          };
          params: {
            /**
             * History Options Enum
             * ---
             * Options for viewing file history.
             */
            'option[history]'?: HistoryOptionsEnum;
            /**
             * If true, the response will include additional detailed information for each entity. Examples include:
             *   - For folders (getFolders API), it will return `FolderExtended` instead of `Folder`, which includes additional information such as the parent folder.
             *   - For file versions (getFileVersions API), it will return `FileVersionExtended` instead of `FileVersion`, which includes extra details like the checkout user ID.
             *   - For change orders (getChangeOrders API), it will return `ChangeOrderExtended` instead of `ChangeOrder`, which provides further information such as the list of assignees.
             *   - For property definitions (getPropertyDefinitions API), it will return `PropertyDefinitionExtended` instead of `PropertyDefinition`, which includes extra details like list values.
             */
            'option[extendedModels]'?: boolean;
            /**
             * The properties that need to be returned. property ids separated by ',', e.g. '1,2,3' 'all' means return all properties.
             */
            'option[propDefIds]'?: string;
            /**
             * True to return latest file version at top.
             */
            descending?: boolean;
            /**
             * Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
             *  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
             */
            limit?: number;
            /**
             * Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
             */
            cursorState?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<ItemVersionCollection, 'vault.getItemHistory', Config>;
      /**
       * ---
       *
       * [POST] Add a job into the job queue
       *
       * **path:** /vaults/{vaultId}/jobs
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   vaultId: string
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // A unique identifier for the job.
       *   id?: string
       *   // The job type.
       *   jobType?: string
       *   // The priority of the job. A lower number means a higher priority. 1 is the lowest possible number.
       *   priority?: number
       *   // A description of the job.
       *   description?: string
       *   // The relative URL to access this object.
       *   url?: string
       *   // An array of parameters which provide meta-data about the job.
       *   params?: Record<string, string>
       *   // The status of the job.
       *   status?: 'Ready' | 'Running' | 'Success' | 'Failure'
       *   // In a multi-site environment, this property tells if the file is on the local site.
       *   isOnSite?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // A unique identifier for the job.
       *   id?: string
       *   // The job type.
       *   jobType?: string
       *   // The priority of the job. A lower number means a higher priority. 1 is the lowest possible number.
       *   priority?: number
       *   // A description of the job.
       *   description?: string
       *   // The relative URL to access this object.
       *   url?: string
       *   // An array of parameters which provide meta-data about the job.
       *   params?: Record<string, string>
       *   // The status of the job.
       *   status?: 'Ready' | 'Running' | 'Success' | 'Failure'
       *   // In a multi-site environment, this property tells if the file is on the local site.
       *   isOnSite?: string
       * }
       * ```
       */
      addJob<
        Config extends Alova2MethodConfig<Job> & {
          pathParams: {
            /**
             * [required]
             */
            vaultId: string;
          };
          data: Job;
        }
      >(
        config: Config
      ): Alova2Method<Job, 'vault.addJob', Config>;
      /**
       * ---
       *
       * [GET] Get job queue enabled status
       *
       * **path:** /vaults/{vaultId}/jobs/job-queue-enabled
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   vaultId: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = boolean
       * ```
       */
      getJobQueueEnabled<
        Config extends Alova2MethodConfig<boolean> & {
          pathParams: {
            /**
             * [required]
             */
            vaultId: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<boolean, 'vault.getJobQueueEnabled', Config>;
      /**
       * ---
       *
       * [GET] Get job by its Id
       *
       * **path:** /vaults/{vaultId}/jobs/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   vaultId: string
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // A unique identifier for the job.
       *   id?: string
       *   // The job type.
       *   jobType?: string
       *   // The priority of the job. A lower number means a higher priority. 1 is the lowest possible number.
       *   priority?: number
       *   // A description of the job.
       *   description?: string
       *   // The relative URL to access this object.
       *   url?: string
       *   // An array of parameters which provide meta-data about the job.
       *   params?: Record<string, string>
       *   // The status of the job.
       *   status?: 'Ready' | 'Running' | 'Success' | 'Failure'
       *   // In a multi-site environment, this property tells if the file is on the local site.
       *   isOnSite?: string
       * }
       * ```
       */
      getJobsById<
        Config extends Alova2MethodConfig<Job> & {
          pathParams: {
            /**
             * [required]
             */
            vaultId: string;
            /**
             * [required]
             */
            id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<Job, 'vault.getJobsById', Config>;
      /**
       * ---
       *
       * [GET] Get all links
       *
       * **path:** /vaults/{vaultId}/links
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   vaultId: string
       * }
       * ```
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
       *   //  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
       *   limit?: number
       *   // Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
       *   cursorState?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [title] Cursor-based pagination
       *   pagination?: {
       *     // Limit requested for the current search
       *     limit?: number
       *     // Number of total hits. If this value is larger than the objects returned, then multiple searches will have to be performed to get the complete result set.
       *     totalResults?: number
       *     // [title] Indexing Status
       *     // The status of the indexing engine.
       *     indexingStatus?: 'IndexingComplete' | 'IndexingProperties' | 'IndexingContent' | 'NA'
       *     // Used to continue a search if the results are too large for a single call. Url has bookmark string embedded for subsequent calls on that search
       *     nextUrl?: string
       *   }
       *   results?: Array<{
       *     name?: string
       *     // Get the unique identifier for this link object
       *     id?: string
       *     createDate?: string
       *     createUserName?: string
       *     entityType?: string
       *     // The relative URL to access this object.
       *     url?: string
       *     // [title] Entity
       *     // A generic entity object with all supported fields.
       *     toEntity?: {
       *       // A unique identifier for the object
       *       // [required]
       *       id: string
       *       // Name of the entity
       *       // [required]
       *       name: string
       *       // The full vault path if Entity is a folder
       *       fullName?: string
       *       number?: string
       *       // Category information  about this entity
       *       category?: string
       *       // Category color
       *       categoryColor?: number
       *       entityType?: string
       *       // Version number if entity is an Iteration object
       *       version?: number
       *       // Tells the date and time that this version of the entity was created in the Vault.
       *       createDate?: string
       *       lastModifiedDate?: string
       *       // Revision information about this entity.
       *       revision?: string
       *       // The name of the life cycle state for the entity
       *       state?: string
       *       // The color of the state.
       *       stateColor?: number
       *       parentFolderId?: string
       *       // [title] Folder
       *       // folder object
       *       parent?: {
       *         // Get the unique identifier for this folder
       *         id?: string
       *         // The relative URL to access this object.
       *         url?: Url
       *         // Get the descriptive name for this Folder. This is always the Folder Name without the full path.
       *         name?: string
       *         // Get the full vault path for this folder (ie. $/Folder1)
       *         fullName?: string
       *         // Get the date and time that the folder was created.
       *         createDate?: string
       *         // Get the name of the user who created this folder.
       *         createUserName?: string
       *         // Get the category that is assigned to this folder
       *         category?: string
       *         // Category color
       *         categoryColor?: number
       *         // The name of the life cycle state for the current folder
       *         state?: string
       *         // The color of the state.
       *         stateColor?: number
       *         // Get the number of immediate child folders.
       *         subfolderCount?: number
       *         children?: string
       *         // Get whether or not this folder is a library folder
       *         isLibrary?: boolean
       *         // Get whether this folder can be modified by the logged in user.
       *         isReadOnly?: boolean
       *         // Get if this folder is cloaked. A cloaked object is one that the caller does not have permissions to view.
       *         isCloaked?: boolean
       *         properties?: Array<{
       *           // Unique identifier for a server-based property definition
       *           propertyDefinitionId?: string
       *           // [title] Property Definition
       *           definition?: {
       *             // Get the unique identifier for a server-based property definition
       *             // [required]
       *             id: string
       *             // The relative URL to access this object.
       *             url?: Url
       *             // Get or sets the Display name for this Property Definition
       *             // [required]
       *             displayName: string
       *             // Get the System Name for this Property Definition.
       *             // [required]
       *             systemName: string
       *             // The value defined in SQL database.
       *             // [required]
       *             dataType: 'String' | 'Numeric' | 'Bool' | 'DateTime' | 'Image'
       *             // Get or sets whether this Property Definition is Active.
       *             active?: boolean
       *             // Get whether or not this is a System Property (as opposed to a UserDefined property)
       *             isSystem?: boolean
       *             // Default Value that will be applied to entities that do not have an existing value associated with this PropertyDefinition
       *             initialValue?: string
       *           }
       *           // The property value associated with the entity and PropertyDefinition
       *           value?: string
       *         }>
       *       }
       *       isCheckedOut?: boolean
       *       createUserName?: string
       *       checkinDate?: string
       *       checkoutDate?: string
       *       size?: number
       *       // The relative URL to access this object.
       *       url?: Url
       *       hasVisualizationAttachment?: boolean
       *       checkoutUserName?: string
       *       isLibrary?: boolean
       *       isReadOnly?: boolean
       *       isCloaked?: boolean
       *       // [title] File - we cannot directly use File as class name, as it's occupied.
       *       file?: {
       *         // File MasterId
       *         // [required]
       *         id: string
       *         // The relative URL to access this object.
       *         // [required]
       *         url: string
       *         // [title] Version Type Enum
       *         versionType?: 'None' | 'Latest' | 'LatestReleased'
       *         // [title] File Version Extended
       *         // file version extended object
       *         fileVersion?: FileVersionExtended
       *       }
       *       // [title] Item
       *       item?: {
       *         // MasterId of the item
       *         // [required]
       *         id: string
       *         // The relative URL to access this object.
       *         // [required]
       *         url: Url
       *         // [title] Version Type Enum
       *         versionType?: 'None' | 'Latest' | 'LatestReleased'
       *         // [title] Item Version
       *         // The unique identifier for the object.
       *         itemVersion?: ItemVersion
       *       }
       *       subfolderCount?: number
       *       children?: string
       *       properties?: Array<{
       *         // Unique identifier for a server-based property definition
       *         propertyDefinitionId?: string
       *         // [title] Property Definition
       *         definition?: {
       *           // Get the unique identifier for a server-based property definition
       *           // [required]
       *           id: string
       *           // The relative URL to access this object.
       *           url?: Url
       *           // Get or sets the Display name for this Property Definition
       *           // [required]
       *           displayName: string
       *           // Get the System Name for this Property Definition.
       *           // [required]
       *           systemName: string
       *           // The value defined in SQL database.
       *           // [required]
       *           dataType: 'String' | 'Numeric' | 'Bool' | 'DateTime' | 'Image'
       *           // Get or sets whether this Property Definition is Active.
       *           active?: boolean
       *           // Get whether or not this is a System Property (as opposed to a UserDefined property)
       *           isSystem?: boolean
       *           // Default Value that will be applied to entities that do not have an existing value associated with this PropertyDefinition
       *           initialValue?: string
       *         }
       *         // The property value associated with the entity and PropertyDefinition
       *         value?: string
       *       }>
       *     }
       *     // [title] Folder
       *     // folder object
       *     fromEntity?: Folder
       *   }>
       *   included?: {
       *     folder?: Record<string, Folder>
       *     propertyDefinition?: Record<
       *       string,
       *       {
       *         // Get the unique identifier for a server-based property definition
       *         // [required]
       *         id: string
       *         // The relative URL to access this object.
       *         url?: Url
       *         // Get or sets the Display name for this Property Definition
       *         // [required]
       *         displayName: string
       *         // Get the System Name for this Property Definition.
       *         // [required]
       *         systemName: string
       *         // The value defined in SQL database.
       *         // [required]
       *         dataType: 'String' | 'Numeric' | 'Bool' | 'DateTime' | 'Image'
       *         // Get or sets whether this Property Definition is Active.
       *         active?: boolean
       *         // Get whether or not this is a System Property (as opposed to a UserDefined property)
       *         isSystem?: boolean
       *         // Default Value that will be applied to entities that do not have an existing value associated with this PropertyDefinition
       *         initialValue?: string
       *       }
       *     >
       *   }
       * }
       * ```
       */
      getLinks<
        Config extends Alova2MethodConfig<LinkCollection> & {
          pathParams: {
            /**
             * [required]
             */
            vaultId: string;
          };
          params: {
            /**
             * Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
             *  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
             */
            limit?: number;
            /**
             * Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
             */
            cursorState?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<LinkCollection, 'vault.getLinks', Config>;
      /**
       * ---
       *
       * [GET] Get the link object by Id
       *
       * **path:** /vaults/{vaultId}/links/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   vaultId: string
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   name?: string
       *   // Get the unique identifier for this link object
       *   id?: string
       *   createDate?: string
       *   createUserName?: string
       *   entityType?: string
       *   // The relative URL to access this object.
       *   url?: string
       *   // [title] Entity
       *   // A generic entity object with all supported fields.
       *   toEntity?: {
       *     // A unique identifier for the object
       *     // [required]
       *     id: string
       *     // Name of the entity
       *     // [required]
       *     name: string
       *     // The full vault path if Entity is a folder
       *     fullName?: string
       *     number?: string
       *     // Category information  about this entity
       *     category?: string
       *     // Category color
       *     categoryColor?: number
       *     entityType?: string
       *     // Version number if entity is an Iteration object
       *     version?: number
       *     // Tells the date and time that this version of the entity was created in the Vault.
       *     createDate?: string
       *     lastModifiedDate?: string
       *     // Revision information about this entity.
       *     revision?: string
       *     // The name of the life cycle state for the entity
       *     state?: string
       *     // The color of the state.
       *     stateColor?: number
       *     parentFolderId?: string
       *     // [title] Folder
       *     // folder object
       *     parent?: {
       *       // Get the unique identifier for this folder
       *       id?: string
       *       // The relative URL to access this object.
       *       url?: Url
       *       // Get the descriptive name for this Folder. This is always the Folder Name without the full path.
       *       name?: string
       *       // Get the full vault path for this folder (ie. $/Folder1)
       *       fullName?: string
       *       // Get the date and time that the folder was created.
       *       createDate?: string
       *       // Get the name of the user who created this folder.
       *       createUserName?: string
       *       // Get the category that is assigned to this folder
       *       category?: string
       *       // Category color
       *       categoryColor?: number
       *       // The name of the life cycle state for the current folder
       *       state?: string
       *       // The color of the state.
       *       stateColor?: number
       *       // Get the number of immediate child folders.
       *       subfolderCount?: number
       *       children?: string
       *       // Get whether or not this folder is a library folder
       *       isLibrary?: boolean
       *       // Get whether this folder can be modified by the logged in user.
       *       isReadOnly?: boolean
       *       // Get if this folder is cloaked. A cloaked object is one that the caller does not have permissions to view.
       *       isCloaked?: boolean
       *       properties?: Array<{
       *         // Unique identifier for a server-based property definition
       *         propertyDefinitionId?: string
       *         // [title] Property Definition
       *         definition?: {
       *           // Get the unique identifier for a server-based property definition
       *           // [required]
       *           id: string
       *           // The relative URL to access this object.
       *           url?: Url
       *           // Get or sets the Display name for this Property Definition
       *           // [required]
       *           displayName: string
       *           // Get the System Name for this Property Definition.
       *           // [required]
       *           systemName: string
       *           // The value defined in SQL database.
       *           // [required]
       *           dataType: 'String' | 'Numeric' | 'Bool' | 'DateTime' | 'Image'
       *           // Get or sets whether this Property Definition is Active.
       *           active?: boolean
       *           // Get whether or not this is a System Property (as opposed to a UserDefined property)
       *           isSystem?: boolean
       *           // Default Value that will be applied to entities that do not have an existing value associated with this PropertyDefinition
       *           initialValue?: string
       *         }
       *         // The property value associated with the entity and PropertyDefinition
       *         value?: string
       *       }>
       *     }
       *     isCheckedOut?: boolean
       *     createUserName?: string
       *     checkinDate?: string
       *     checkoutDate?: string
       *     size?: number
       *     // The relative URL to access this object.
       *     url?: Url
       *     hasVisualizationAttachment?: boolean
       *     checkoutUserName?: string
       *     isLibrary?: boolean
       *     isReadOnly?: boolean
       *     isCloaked?: boolean
       *     // [title] File - we cannot directly use File as class name, as it's occupied.
       *     file?: {
       *       // File MasterId
       *       // [required]
       *       id: string
       *       // The relative URL to access this object.
       *       // [required]
       *       url: string
       *       // [title] Version Type Enum
       *       versionType?: 'None' | 'Latest' | 'LatestReleased'
       *       // [title] File Version Extended
       *       // file version extended object
       *       fileVersion?: FileVersionExtended
       *     }
       *     // [title] Item
       *     item?: {
       *       // MasterId of the item
       *       // [required]
       *       id: string
       *       // The relative URL to access this object.
       *       // [required]
       *       url: Url
       *       // [title] Version Type Enum
       *       versionType?: 'None' | 'Latest' | 'LatestReleased'
       *       // [title] Item Version
       *       // The unique identifier for the object.
       *       itemVersion?: ItemVersion
       *     }
       *     subfolderCount?: number
       *     children?: string
       *     properties?: Array<{
       *       // Unique identifier for a server-based property definition
       *       propertyDefinitionId?: string
       *       // [title] Property Definition
       *       definition?: {
       *         // Get the unique identifier for a server-based property definition
       *         // [required]
       *         id: string
       *         // The relative URL to access this object.
       *         url?: Url
       *         // Get or sets the Display name for this Property Definition
       *         // [required]
       *         displayName: string
       *         // Get the System Name for this Property Definition.
       *         // [required]
       *         systemName: string
       *         // The value defined in SQL database.
       *         // [required]
       *         dataType: 'String' | 'Numeric' | 'Bool' | 'DateTime' | 'Image'
       *         // Get or sets whether this Property Definition is Active.
       *         active?: boolean
       *         // Get whether or not this is a System Property (as opposed to a UserDefined property)
       *         isSystem?: boolean
       *         // Default Value that will be applied to entities that do not have an existing value associated with this PropertyDefinition
       *         initialValue?: string
       *       }
       *       // The property value associated with the entity and PropertyDefinition
       *       value?: string
       *     }>
       *   }
       *   // [title] Folder
       *   // folder object
       *   fromEntity?: Folder
       * }
       * ```
       */
      getLinkById<
        Config extends Alova2MethodConfig<LinkEntity> & {
          pathParams: {
            /**
             * [required]
             */
            vaultId: string;
            /**
             * [required]
             */
            id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<LinkEntity, 'vault.getLinkById', Config>;
      /**
       * ---
       *
       * [GET] Get all property definitions in the vault
       *
       * **path:** /vaults/{vaultId}/property-definitions
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   vaultId: string
       * }
       * ```
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // The value should be from EntityClass, e.g., FILE, FLDR, ITEM, CO. if null of empty will return property defs for all Entity Classes.
       *   'filter[entityClassId]'?: string
       *   // Search filter to include only propertyDefs that match SystemName. SystemNames, separated by ','
       *   'filter[systemNames]'?: string
       *   // Search filter to include only propertyDefs that match Id. PropertyDefIds, separated by ','
       *   'filter[propDefIds]'?: string
       *   // If true, the response will include additional detailed information for each entity. Examples include:
       *   //   - For folders (getFolders API), it will return `FolderExtended` instead of `Folder`, which includes additional information such as the parent folder.
       *   //   - For file versions (getFileVersions API), it will return `FileVersionExtended` instead of `FileVersion`, which includes extra details like the checkout user ID.
       *   //   - For change orders (getChangeOrders API), it will return `ChangeOrderExtended` instead of `ChangeOrder`, which provides further information such as the list of assignees.
       *   //   - For property definitions (getPropertyDefinitions API), it will return `PropertyDefinitionExtended` instead of `PropertyDefinition`, which includes extra details like list values.
       *   'option[extendedModels]'?: boolean
       *   // Include BOM Association Property definitions if true. Default value is false
       *   'option[includeBOMAssociationProperty]'?: boolean
       *   // Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
       *   //  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
       *   limit?: number
       *   // Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
       *   cursorState?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [title] Cursor-based pagination
       *   pagination?: {
       *     // Limit requested for the current search
       *     limit?: number
       *     // Number of total hits. If this value is larger than the objects returned, then multiple searches will have to be performed to get the complete result set.
       *     totalResults?: number
       *     // [title] Indexing Status
       *     // The status of the indexing engine.
       *     indexingStatus?: 'IndexingComplete' | 'IndexingProperties' | 'IndexingContent' | 'NA'
       *     // Used to continue a search if the results are too large for a single call. Url has bookmark string embedded for subsequent calls on that search
       *     nextUrl?: string
       *   }
       *   results?: (
       *     | {
       *         // Get the unique identifier for a server-based property definition
       *         // [required]
       *         id: string
       *         // The relative URL to access this object.
       *         url?: Url
       *         // Get or sets the Display name for this Property Definition
       *         // [required]
       *         displayName: string
       *         // Get the System Name for this Property Definition.
       *         // [required]
       *         systemName: string
       *         // The value defined in SQL database.
       *         // [required]
       *         dataType: 'String' | 'Numeric' | 'Bool' | 'DateTime' | 'Image'
       *         // Get or sets whether this Property Definition is Active.
       *         active?: boolean
       *         // Get whether or not this is a System Property (as opposed to a UserDefined property)
       *         isSystem?: boolean
       *         // Default Value that will be applied to entities that do not have an existing value associated with this PropertyDefinition
       *         initialValue?: string
       *       }
       *     | object
       *   )[]
       * }
       * ```
       */
      getPropertyDefinitions<
        Config extends Alova2MethodConfig<PropertyDefinitionCollection> & {
          pathParams: {
            /**
             * [required]
             */
            vaultId: string;
          };
          params: {
            /**
             * The value should be from EntityClass, e.g., FILE, FLDR, ITEM, CO. if null of empty will return property defs for all Entity Classes.
             */
            'filter[entityClassId]'?: string;
            /**
             * Search filter to include only propertyDefs that match SystemName. SystemNames, separated by ','
             */
            'filter[systemNames]'?: string;
            /**
             * Search filter to include only propertyDefs that match Id. PropertyDefIds, separated by ','
             */
            'filter[propDefIds]'?: string;
            /**
             * If true, the response will include additional detailed information for each entity. Examples include:
             *   - For folders (getFolders API), it will return `FolderExtended` instead of `Folder`, which includes additional information such as the parent folder.
             *   - For file versions (getFileVersions API), it will return `FileVersionExtended` instead of `FileVersion`, which includes extra details like the checkout user ID.
             *   - For change orders (getChangeOrders API), it will return `ChangeOrderExtended` instead of `ChangeOrder`, which provides further information such as the list of assignees.
             *   - For property definitions (getPropertyDefinitions API), it will return `PropertyDefinitionExtended` instead of `PropertyDefinition`, which includes extra details like list values.
             */
            'option[extendedModels]'?: boolean;
            /**
             * Include BOM Association Property definitions if true. Default value is false
             */
            'option[includeBOMAssociationProperty]'?: boolean;
            /**
             * Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
             *  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
             */
            limit?: number;
            /**
             * Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
             */
            cursorState?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<PropertyDefinitionCollection, 'vault.getPropertyDefinitions', Config>;
      /**
       * ---
       *
       * [GET] Get the property definition by its Id
       *
       * **path:** /vaults/{vaultId}/property-definitions/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   vaultId: string
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // Get the unique identifier for a server-based property definition
       *   // [required]
       *   id: string
       *   // The relative URL to access this object.
       *   url?: Url
       *   // Get or sets the Display name for this Property Definition
       *   // [required]
       *   displayName: string
       *   // Get the System Name for this Property Definition.
       *   // [required]
       *   systemName: string
       *   // The value defined in SQL database.
       *   // [required]
       *   dataType: 'String' | 'Numeric' | 'Bool' | 'DateTime' | 'Image'
       *   // Get or sets whether this Property Definition is Active.
       *   active?: boolean
       *   // Get whether or not this is a System Property (as opposed to a UserDefined property)
       *   isSystem?: boolean
       *   // Default Value that will be applied to entities that do not have an existing value associated with this PropertyDefinition
       *   initialValue?: string
       * }
       * ```
       */
      getPropertyDefinitionById<
        Config extends Alova2MethodConfig<PropertyDefinition> & {
          pathParams: {
            /**
             * [required]
             */
            vaultId: string;
            /**
             * [required]
             */
            id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<PropertyDefinition, 'vault.getPropertyDefinitionById', Config>;
      /**
       * ---
       *
       * [GET] Basic Search: Find entities using a query string
       *
       * **path:** /vaults/{vaultId}/search-results
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   vaultId: string
       * }
       * ```
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // The value to use for the search. Based on 'SearchContent' option, this parameter will either search across all properties  or across all properties and content. Ex: q=Assembly, all objects that contain 'Assembly' within their properties will be returned.
       *   q?: string
       *   // Search File full content, e.g. option[searchContent]=false, default value is false
       *   'option[searchContent]'?: boolean
       *   // Search sub folders, e.g. option[searchSubFolders]=false, default value is false
       *   'option[searchSubFolders]'?: boolean
       *   // If true, include only versions that are consumable (released) state. Default value is false
       *   'option[releasedFilesOnly]'?: boolean
       *   // If true, include only versions that are consumable (released) state. Default value is false
       *   'option[releasedItemsOnly]'?: boolean
       *   // If true, include only the latest version; Default value is true
       *   'option[latestOnly]'?: boolean
       *   // If true, the response will include additional detailed information for each entity. Examples include:
       *   //   - For folders (getFolders API), it will return `FolderExtended` instead of `Folder`, which includes additional information such as the parent folder.
       *   //   - For file versions (getFileVersions API), it will return `FileVersionExtended` instead of `FileVersion`, which includes extra details like the checkout user ID.
       *   //   - For change orders (getChangeOrders API), it will return `ChangeOrderExtended` instead of `ChangeOrder`, which provides further information such as the list of assignees.
       *   //   - For property definitions (getPropertyDefinitions API), it will return `PropertyDefinitionExtended` instead of `PropertyDefinition`, which includes extra details like list values.
       *   'option[extendedModels]'?: boolean
       *   // The properties that need to be returned. property ids separated by ',', e.g. '1,2,3' 'all' means return all properties.
       *   'option[propDefIds]'?: string
       *   // Specifies sorting criteria for search results. Format: {propertyDefSysName} {sort-order} Accepted values for sort-order: asc, desc.  Ex: sort = Revision desc,Name asc
       *   sort?: string
       *   // Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
       *   //  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
       *   limit?: number
       *   // Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
       *   cursorState?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [title] Cursor-based pagination
       *   pagination?: {
       *     // Limit requested for the current search
       *     limit?: number
       *     // Number of total hits. If this value is larger than the objects returned, then multiple searches will have to be performed to get the complete result set.
       *     totalResults?: number
       *     // [title] Indexing Status
       *     // The status of the indexing engine.
       *     indexingStatus?: 'IndexingComplete' | 'IndexingProperties' | 'IndexingContent' | 'NA'
       *     // Used to continue a search if the results are too large for a single call. Url has bookmark string embedded for subsequent calls on that search
       *     nextUrl?: string
       *   }
       *   results?: unknown[]
       *   included?: {
       *     folder?: Record<
       *       string,
       *       {
       *         // Get the unique identifier for this folder
       *         id?: string
       *         // The relative URL to access this object.
       *         url?: Url
       *         // Get the descriptive name for this Folder. This is always the Folder Name without the full path.
       *         name?: string
       *         // Get the full vault path for this folder (ie. $/Folder1)
       *         fullName?: string
       *         // Get the date and time that the folder was created.
       *         createDate?: string
       *         // Get the name of the user who created this folder.
       *         createUserName?: string
       *         // Get the category that is assigned to this folder
       *         category?: string
       *         // Category color
       *         categoryColor?: number
       *         // The name of the life cycle state for the current folder
       *         state?: string
       *         // The color of the state.
       *         stateColor?: number
       *         // Get the number of immediate child folders.
       *         subfolderCount?: number
       *         children?: string
       *         // Get whether or not this folder is a library folder
       *         isLibrary?: boolean
       *         // Get whether this folder can be modified by the logged in user.
       *         isReadOnly?: boolean
       *         // Get if this folder is cloaked. A cloaked object is one that the caller does not have permissions to view.
       *         isCloaked?: boolean
       *         properties?: Array<{
       *           // Unique identifier for a server-based property definition
       *           propertyDefinitionId?: string
       *           // [title] Property Definition
       *           definition?: {
       *             // Get the unique identifier for a server-based property definition
       *             // [required]
       *             id: string
       *             // The relative URL to access this object.
       *             url?: Url
       *             // Get or sets the Display name for this Property Definition
       *             // [required]
       *             displayName: string
       *             // Get the System Name for this Property Definition.
       *             // [required]
       *             systemName: string
       *             // The value defined in SQL database.
       *             // [required]
       *             dataType: 'String' | 'Numeric' | 'Bool' | 'DateTime' | 'Image'
       *             // Get or sets whether this Property Definition is Active.
       *             active?: boolean
       *             // Get whether or not this is a System Property (as opposed to a UserDefined property)
       *             isSystem?: boolean
       *             // Default Value that will be applied to entities that do not have an existing value associated with this PropertyDefinition
       *             initialValue?: string
       *           }
       *           // The property value associated with the entity and PropertyDefinition
       *           value?: string
       *         }>
       *       }
       *     >
       *     propertyDefinition?: Record<
       *       string,
       *       {
       *         // Get the unique identifier for a server-based property definition
       *         // [required]
       *         id: string
       *         // The relative URL to access this object.
       *         url?: Url
       *         // Get or sets the Display name for this Property Definition
       *         // [required]
       *         displayName: string
       *         // Get the System Name for this Property Definition.
       *         // [required]
       *         systemName: string
       *         // The value defined in SQL database.
       *         // [required]
       *         dataType: 'String' | 'Numeric' | 'Bool' | 'DateTime' | 'Image'
       *         // Get or sets whether this Property Definition is Active.
       *         active?: boolean
       *         // Get whether or not this is a System Property (as opposed to a UserDefined property)
       *         isSystem?: boolean
       *         // Default Value that will be applied to entities that do not have an existing value associated with this PropertyDefinition
       *         initialValue?: string
       *       }
       *     >
       *   }
       * }
       * ```
       */
      search<
        Config extends Alova2MethodConfig<EntityCollection> & {
          pathParams: {
            /**
             * [required]
             */
            vaultId: string;
          };
          params: {
            /**
             * The value to use for the search. Based on 'SearchContent' option, this parameter will either search across all properties  or across all properties and content. Ex: q=Assembly, all objects that contain 'Assembly' within their properties will be returned.
             */
            q?: string;
            /**
             * Search File full content, e.g. option[searchContent]=false, default value is false
             */
            'option[searchContent]'?: boolean;
            /**
             * Search sub folders, e.g. option[searchSubFolders]=false, default value is false
             */
            'option[searchSubFolders]'?: boolean;
            /**
             * If true, include only versions that are consumable (released) state. Default value is false
             */
            'option[releasedFilesOnly]'?: boolean;
            /**
             * If true, include only versions that are consumable (released) state. Default value is false
             */
            'option[releasedItemsOnly]'?: boolean;
            /**
             * If true, include only the latest version; Default value is true
             */
            'option[latestOnly]'?: boolean;
            /**
             * If true, the response will include additional detailed information for each entity. Examples include:
             *   - For folders (getFolders API), it will return `FolderExtended` instead of `Folder`, which includes additional information such as the parent folder.
             *   - For file versions (getFileVersions API), it will return `FileVersionExtended` instead of `FileVersion`, which includes extra details like the checkout user ID.
             *   - For change orders (getChangeOrders API), it will return `ChangeOrderExtended` instead of `ChangeOrder`, which provides further information such as the list of assignees.
             *   - For property definitions (getPropertyDefinitions API), it will return `PropertyDefinitionExtended` instead of `PropertyDefinition`, which includes extra details like list values.
             */
            'option[extendedModels]'?: boolean;
            /**
             * The properties that need to be returned. property ids separated by ',', e.g. '1,2,3' 'all' means return all properties.
             */
            'option[propDefIds]'?: string;
            /**
             * Specifies sorting criteria for search results. Format: {propertyDefSysName} {sort-order} Accepted values for sort-order: asc, desc.  Ex: sort = Revision desc,Name asc
             */
            sort?: string;
            /**
             * Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
             *  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
             */
            limit?: number;
            /**
             * Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
             */
            cursorState?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<EntityCollection, 'vault.search', Config>;
      /**
       * ---
       *
       * [POST] Advanced Search: Search entities in vault using conditions
       *
       * **path:** /vaults/{vaultId}:advanced-search
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   vaultId: string
       * }
       * ```
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
       *   //  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
       *   limit?: number
       *   // Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
       *   cursorState?: string
       *   // Search sub-folders of the folders specified in foldersToSearch in the request body. If no folders are specified in foldersToSearch in the request body, then this parameter will not have any effect. For example, option[searchSubFolders]=false. The default value is false.
       *   'option[searchSubFolders]'?: boolean
       *   // If true, include only versions that are consumable (released) state. Default value is false
       *   'option[releasedFilesOnly]'?: boolean
       *   // If true, include only versions that are consumable (released) state. Default value is false
       *   'option[releasedItemsOnly]'?: boolean
       *   // If true, include only the latest version. Default value is true
       *   'option[latestOnly]'?: boolean
       *   // If true, the response will include additional detailed information for each entity. Examples include:
       *   //   - For folders (getFolders API), it will return `FolderExtended` instead of `Folder`, which includes additional information such as the parent folder.
       *   //   - For file versions (getFileVersions API), it will return `FileVersionExtended` instead of `FileVersion`, which includes extra details like the checkout user ID.
       *   //   - For change orders (getChangeOrders API), it will return `ChangeOrderExtended` instead of `ChangeOrder`, which provides further information such as the list of assignees.
       *   //   - For property definitions (getPropertyDefinitions API), it will return `PropertyDefinitionExtended` instead of `PropertyDefinition`, which includes extra details like list values.
       *   'option[extendedModels]'?: boolean
       *   // The properties that need to be returned. property ids separated by ',', e.g. '1,2,3' 'all' means return all properties.
       *   'option[propDefIds]'?: string
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // EntityTypes to search. If null or empty value is passed, it will include results from all entity types.
       *   entityTypesToSearch?: ('File' | 'Folder' | 'Item' | 'ChangeOrder')[]
       *   // URL string array for the folder entities.
       *   foldersToSearch?: string[]
       *   // The search parameters.
       *   // [required]
       *   searchCriterias: Array<{
       *     // URL string to the property definition
       *     propertyDefinitionUrl?: string
       *     // Represents the operator used for the search
       *     // [required]
       *     operator:
       *       | 'Unknown'
       *       | 'Contains'
       *       | 'DoesNotContain'
       *       | 'IsExactly'
       *       | 'IsEmpty'
       *       | 'IsNotEmpty'
       *       | 'GreaterThan'
       *       | 'GreaterThanOrEqualTo'
       *       | 'LessThan'
       *       | 'LessThanOrEqualTo'
       *       | 'NotEqualTo'
       *     // The value to use for the search
       *     searchString?: string
       *   }>
       *   // The properties to sort on.
       *   sortCriterias?: Array<{
       *     // URL string to the property definition
       *     propertyDefinitionUrl?: string
       *     // If true, the sort is ascending. If false, the sort is descending.
       *     ascending?: boolean
       *   }>
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [title] Cursor-based pagination
       *   pagination?: {
       *     // Limit requested for the current search
       *     limit?: number
       *     // Number of total hits. If this value is larger than the objects returned, then multiple searches will have to be performed to get the complete result set.
       *     totalResults?: number
       *     // [title] Indexing Status
       *     // The status of the indexing engine.
       *     indexingStatus?: 'IndexingComplete' | 'IndexingProperties' | 'IndexingContent' | 'NA'
       *     // Used to continue a search if the results are too large for a single call. Url has bookmark string embedded for subsequent calls on that search
       *     nextUrl?: string
       *   }
       *   results?: unknown[]
       *   included?: {
       *     folder?: Record<
       *       string,
       *       {
       *         // Get the unique identifier for this folder
       *         id?: string
       *         // The relative URL to access this object.
       *         url?: Url
       *         // Get the descriptive name for this Folder. This is always the Folder Name without the full path.
       *         name?: string
       *         // Get the full vault path for this folder (ie. $/Folder1)
       *         fullName?: string
       *         // Get the date and time that the folder was created.
       *         createDate?: string
       *         // Get the name of the user who created this folder.
       *         createUserName?: string
       *         // Get the category that is assigned to this folder
       *         category?: string
       *         // Category color
       *         categoryColor?: number
       *         // The name of the life cycle state for the current folder
       *         state?: string
       *         // The color of the state.
       *         stateColor?: number
       *         // Get the number of immediate child folders.
       *         subfolderCount?: number
       *         children?: string
       *         // Get whether or not this folder is a library folder
       *         isLibrary?: boolean
       *         // Get whether this folder can be modified by the logged in user.
       *         isReadOnly?: boolean
       *         // Get if this folder is cloaked. A cloaked object is one that the caller does not have permissions to view.
       *         isCloaked?: boolean
       *         properties?: Array<{
       *           // Unique identifier for a server-based property definition
       *           propertyDefinitionId?: string
       *           // [title] Property Definition
       *           definition?: {
       *             // Get the unique identifier for a server-based property definition
       *             // [required]
       *             id: string
       *             // The relative URL to access this object.
       *             url?: Url
       *             // Get or sets the Display name for this Property Definition
       *             // [required]
       *             displayName: string
       *             // Get the System Name for this Property Definition.
       *             // [required]
       *             systemName: string
       *             // The value defined in SQL database.
       *             // [required]
       *             dataType: 'String' | 'Numeric' | 'Bool' | 'DateTime' | 'Image'
       *             // Get or sets whether this Property Definition is Active.
       *             active?: boolean
       *             // Get whether or not this is a System Property (as opposed to a UserDefined property)
       *             isSystem?: boolean
       *             // Default Value that will be applied to entities that do not have an existing value associated with this PropertyDefinition
       *             initialValue?: string
       *           }
       *           // The property value associated with the entity and PropertyDefinition
       *           value?: string
       *         }>
       *       }
       *     >
       *     propertyDefinition?: Record<
       *       string,
       *       {
       *         // Get the unique identifier for a server-based property definition
       *         // [required]
       *         id: string
       *         // The relative URL to access this object.
       *         url?: Url
       *         // Get or sets the Display name for this Property Definition
       *         // [required]
       *         displayName: string
       *         // Get the System Name for this Property Definition.
       *         // [required]
       *         systemName: string
       *         // The value defined in SQL database.
       *         // [required]
       *         dataType: 'String' | 'Numeric' | 'Bool' | 'DateTime' | 'Image'
       *         // Get or sets whether this Property Definition is Active.
       *         active?: boolean
       *         // Get whether or not this is a System Property (as opposed to a UserDefined property)
       *         isSystem?: boolean
       *         // Default Value that will be applied to entities that do not have an existing value associated with this PropertyDefinition
       *         initialValue?: string
       *       }
       *     >
       *   }
       * }
       * ```
       */
      advancedSearch<
        Config extends Alova2MethodConfig<EntityCollection> & {
          pathParams: {
            /**
             * [required]
             */
            vaultId: string;
          };
          params: {
            /**
             * Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
             *  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
             */
            limit?: number;
            /**
             * Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
             */
            cursorState?: string;
            /**
             * Search sub-folders of the folders specified in foldersToSearch in the request body. If no folders are specified in foldersToSearch in the request body, then this parameter will not have any effect. For example, option[searchSubFolders]=false. The default value is false.
             */
            'option[searchSubFolders]'?: boolean;
            /**
             * If true, include only versions that are consumable (released) state. Default value is false
             */
            'option[releasedFilesOnly]'?: boolean;
            /**
             * If true, include only versions that are consumable (released) state. Default value is false
             */
            'option[releasedItemsOnly]'?: boolean;
            /**
             * If true, include only the latest version. Default value is true
             */
            'option[latestOnly]'?: boolean;
            /**
             * If true, the response will include additional detailed information for each entity. Examples include:
             *   - For folders (getFolders API), it will return `FolderExtended` instead of `Folder`, which includes additional information such as the parent folder.
             *   - For file versions (getFileVersions API), it will return `FileVersionExtended` instead of `FileVersion`, which includes extra details like the checkout user ID.
             *   - For change orders (getChangeOrders API), it will return `ChangeOrderExtended` instead of `ChangeOrder`, which provides further information such as the list of assignees.
             *   - For property definitions (getPropertyDefinitions API), it will return `PropertyDefinitionExtended` instead of `PropertyDefinition`, which includes extra details like list values.
             */
            'option[extendedModels]'?: boolean;
            /**
             * The properties that need to be returned. property ids separated by ',', e.g. '1,2,3' 'all' means return all properties.
             */
            'option[propDefIds]'?: string;
          };
          data: {
            /**
             * EntityTypes to search. If null or empty value is passed, it will include results from all entity types.
             */
            entityTypesToSearch?: ('File' | 'Folder' | 'Item' | 'ChangeOrder')[];
            /**
             * URL string array for the folder entities.
             */
            foldersToSearch?: string[];
            /**
             * The search parameters.
             * [required]
             */
            searchCriterias: SearchCriteria[];
            /**
             * The properties to sort on.
             */
            sortCriterias?: SortCriteria[];
          };
        }
      >(
        config: Config
      ): Alova2Method<EntityCollection, 'vault.advancedSearch', Config>;
      /**
       * ---
       *
       * [GET] Get all Vault options
       *
       * **path:** /vaults/{vaultId}/vault-options
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // Filters and returns items whose names start with the specified string
       *   'filter[name]-starts'?: string
       *   // Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
       *   //  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
       *   limit?: number
       *   // Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
       *   cursorState?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [title] Cursor-based pagination
       *   pagination?: {
       *     // Limit requested for the current search
       *     limit?: number
       *     // Number of total hits. If this value is larger than the objects returned, then multiple searches will have to be performed to get the complete result set.
       *     totalResults?: number
       *     // [title] Indexing Status
       *     // The status of the indexing engine.
       *     indexingStatus?: 'IndexingComplete' | 'IndexingProperties' | 'IndexingContent' | 'NA'
       *     // Used to continue a search if the results are too large for a single call. Url has bookmark string embedded for subsequent calls on that search
       *     nextUrl?: string
       *   }
       *   results?: Array<{
       *     id?: string
       *     // The name of the option
       *     name?: string
       *     // The value of the option
       *     value?: string
       *     // The relative URL to access this object.
       *     url?: string
       *   }>
       * }
       * ```
       */
      getVaultOptions<
        Config extends Alova2MethodConfig<VaultOptionCollection> & {
          params: {
            /**
             * Filters and returns items whose names start with the specified string
             */
            'filter[name]-starts'?: string;
            /**
             * Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" setting
             *  which could be updated using ADMS ("Global Setting" -> "Page size conifguration").
             */
            limit?: number;
            /**
             * Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
             */
            cursorState?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<VaultOptionCollection, 'vault.getVaultOptions', Config>;
      /**
       * ---
       *
       * [POST] Creates  vault option with input name and value
       *
       * **path:** /vaults/{vaultId}/vault-options
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // Option name
       *   name?: string
       *   // Option value
       *   value?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   id?: string
       *   // The name of the option
       *   name?: string
       *   // The value of the option
       *   value?: string
       *   // The relative URL to access this object.
       *   url?: string
       * }
       * ```
       */
      createVaultOption<
        Config extends Alova2MethodConfig<VaultOption> & {
          data: {
            /**
             * Option name
             */
            name?: string;
            /**
             * Option value
             */
            value?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<VaultOption, 'vault.createVaultOption', Config>;
      /**
       * ---
       *
       * [GET] Get vault option by its ID
       *
       * **path:** /vaults/{vaultId}/vault-options/{id}
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   id?: string
       *   // The name of the option
       *   name?: string
       *   // The value of the option
       *   value?: string
       *   // The relative URL to access this object.
       *   url?: string
       * }
       * ```
       */
      getVaultOptionById<Config extends Alova2MethodConfig<VaultOption>>(
        config?: Config
      ): Alova2Method<VaultOption, 'vault.getVaultOptionById', Config>;
      /**
       * ---
       *
       * [PATCH] Update vault option by its ID
       *
       * **path:** /vaults/{vaultId}/vault-options/{id}
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // Option value
       *   value?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   id?: string
       *   // The name of the option
       *   name?: string
       *   // The value of the option
       *   value?: string
       *   // The relative URL to access this object.
       *   url?: string
       * }
       * ```
       */
      updateVaultOptionById<
        Config extends Alova2MethodConfig<VaultOption> & {
          data: {
            /**
             * Option value
             */
            value?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<VaultOption, 'vault.updateVaultOptionById', Config>;
      /**
       * ---
       *
       * [DELETE] Delete vault option by its ID
       *
       * **path:** /vaults/{vaultId}/vault-options/{id}
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      deleteVaultOptionById<Config extends Alova2MethodConfig<unknown>>(
        config?: Config
      ): Alova2Method<unknown, 'vault.deleteVaultOptionById', Config>;
    };
  }

  var Apis: Apis;
}
